var lunrIndex = [{"id":"empty_config","title":"`$CLOUDY_CONFIG_JSON cannot be empty...`","body":"This could mean the Composer dependencies are missing, check your PHP error log for more info. Try `composer install` to replace missing dependencies."},{"id":"app_root","title":"Application Root","body":"The application root is by default the same as `$ROOT`, which is the directory containing your cloudy entry script file.  However you may want to alter that by the use of `config_path_base` to point to a higher directory, such as the case with [Cloudy Packages](@packages).\n\n`$CLOUDY_BASEPATH` should point to the most logical top-level directory in the context where the cloudy script is used.\n\n## What does it do?\n\n* Relative paths read in with `get_config_path` are made absolute using `$CLOUDY_BASEPATH`.\n* Paths shortened via `path_shorten` use `$CLOUDY_BASEPATH` as the basis for prefix removal.\n\n## Functions\n\n`cloudy_resolve_to_app`\n`cloudy_resolve_to_script`"},{"id":"arrays","title":"Arrays","body":"## How to copy an array\n\n    new_array=(\"${old_array[@]}\")\n\nThis comes in to play after array-based functions like `string_split`\n\n    string_split__string=\"doremi\"\n    string_split '' && local words=(\"${string_split__array}\")\n\n## How to copy and array with dynamic name\n\n    eval copy=(\\\"\\${$master[@]}\\\")\n\n## How to shift\n\n```bash\n$ a=(a b c d e)\n$ a=(\"${a[@]:1}\")\n$ echo \"${a[@]}\"\nb c d e\n```\n\n## How to pop\n\n```bash\na=(\"${a[@]:0:${#a[@]} - 1}\"\n```\n\n## Convert to CSV String\n\n```shell\ndeclare -a array=('value1' 'value2');\ncsv=$(printf \"%s,\" \"${array[@]}\")\ncsv=${csv%,}\n```\n\n## Create a Unique Values, Sorted Array\n\n```shell\ndeclare -a array=('foo' 'bar' 'foo');\nfoo=($(echo \"$(printf \"%s\\n\" \"${array[@]}\")\" | sort -u))\n```\n\n## Get all directories as an array\n\n```shell\n  FILES=()\n  for i in $(cd $DIR && find . -maxdepth 1 -type d -name '*.sql*'); do\n     [[ \"$i\" != '.' ]] && FILES=(\"${FILES[@]}\" \"$(basename \"$i\")\")\n  done\n```"},{"id":"composer","title":"Building a Cloudy-based App w\/ Composer","body":"Cloudy uses Composer for it's PHP dependencies. By default these dependencies are located within the _cloudy_ folder and managed by _cloudy\/composer.json_. Cloudy will try to install these dependencies using composer when you run `cloudy new`.\n\n```text\n.\/cloudy\/\n  \u251c\u2500\u2500 LICENSE\n  \u251c\u2500\u2500 cloudy.sh\n  \u251c\u2500\u2500 cloudy_config.schema.json\n  \u251c\u2500\u2500 cloudypm_info.schema.json\n  \u251c\u2500\u2500 composer.json\n  \u251c\u2500\u2500 composer.lock\n  \u251c\u2500\u2500 vendor\/\n```\n\nIt's possible however, to implement Cloudy into an existing app that uses Composer. That is to say, Cloudy itself becomes a composer dependency. In such case you should make a few changes as described below:\n\n## Tell Composer About Cloudy\n\n1. Add a repository reference to Cloudy in your application's _composer.json_...\n\n   ```php\n   \"repositories\": [\n      {\n         \"type\": \"path\",\n         \"url\": \".\/cloudy\/\"\n      }\n   ]\n   ```\n1. `composer require aklump\/cloudy:@dev`\n1. Delete `cloudy\/vendor` and `cloudy\/composer.lock`; these will no longer be used.\n1. Set those same files to be ignored by source control, e.g.,\n\n   ```gitignore\n   \/cloudy\/vendor\/\n   \/cloudy\/composer.lock\n   ```\n\n## Tell Cloudy About Composer\n\n_This step is usually unnecessary, as it will be detected automatically in most cases._\n\n1. Let's say your Cloudy-based controller is called _foo.sh_.\n1. Open _foo.sh_ and add the path (relative to _foo.sh_) to the vendor directory as `CLOUDY_COMPOSER_VENDOR`. See _script.example.sh_ for code example."},{"id":"readme","title":"Cloudy","body":"> A BASH Framework for PHP-Minded Developers\n\n![cloudy](..\/..\/images\/screenshot.jpg)\n\n## Summary\n\n* Clean and simple YAML configuration\n* Easy integration with PHP\n* BASH Unit Testing framework inspired by [PHPUnit](https:\/\/phpunit.de)\n* Auto-generated help output\n* Support for multilingual localization\n\n**Visit  for full documentation.**\n\n## Install with Composer\n\n1. Because this is an unpublished package, you must define it's repository in\n   your project's _composer.json_ file. Add the following to _composer.json_ in\n   the `repositories` array:\n\n    ```json\n    {\n        \"type\": \"github\",\n        \"url\": \"https:\/\/github.com\/aklump\/cloudy\"\n    }\n    ```\n1. Require this package:\n\n    ```\n    composer require aklump\/cloudy:@dev\n    ```\n\n```shell\ncomposer create-project aklump\/cloudy:@dev --repository=\"{\\\"type\\\":\\\"github\\\",\\\"url\\\": \\\"https:\/\/github.com\/aklump\/cloudy\\\"}\"\n```\n\n## Quick Start\n\nAfter installing Cloudy, to write a new script called _thunder.sh_ ...\n\n1. `cd` to the directory where you want the script to be created.\n1. Type `cloudy new thunder.sh` and the necessary files\/directories will be created in the current directory.\n1. Open _thunder.sh_, enable logging, and write your code.\n1. Open _thunder.yml_ and add some configuration.\n1. To learn about the options to use with `new` type `cloudy help new`.\n1. Refer to [the documentation](https:\/\/aklump.github.io\/cloudy\/README.html) for to learn more.\n\n### Source Control\n\n1. You may omit the cloudy framework from your repository with something like the following, then use `cloudy install` to put the files in place when necessary.\n\n```gitignore\ncloudy\/**\n!cloudy\/version.sh\n```\n\n## Requirements\n\n* Works with BASH 3\n* PHP (Used invisibly on the backend for configuration processing; no PHP knowledge is required to use Cloudy.)\n\n## Contributing\n\nIf you find this project useful... please consider [making a donation](https:\/\/www.paypal.com\/cgi-bin\/webscr?cmd=_s-xclick&hosted_button_id=4E5KZHDQCEUV8&item_name=Gratitude%20for%20aklump%2Fcloudy).\n\n## Learn More\n\n* Learn more about BASH with the [Advanced Bash-Scripting Guide](https:\/\/www.tldp.org\/LDP\/abs\/html\/).\n* Checkout [The Bash Guide](https:\/\/guide.bash.academy\/) by Maarten Billemont."},{"id":"api_functions","title":"Cloudy API: BASH Functions","body":"array_csv\n      array_dedupe\n      array_has_value\n      array_join\n      array_map__callback\n      array_sort\n      array_sort_by_item_length\n      choose\n      clear_task\n      confirm\n      create_uuid\n      date8601\n      debug\n      dir_has_files\n      echo_blue\n      echo_blue_list\n      echo_elapsed\n      echo_error\n      echo_fail\n      echo_green\n      echo_green_highlight\n      echo_green_list\n      echo_heading\n      echo_key_value\n      echo_list\n      echo_pass\n      echo_red\n      echo_red_highlight\n      echo_red_list\n      echo_scream\n      echo_see_log\n      echo_slim_table\n      echo_table\n      echo_task\n      echo_task_completed\n      echo_task_failed\n      echo_title\n      echo_warning\n      echo_white\n      echo_yellow\n      echo_yellow_highlight\n      echo_yellow_list\n      event_dispatch\n      event_listen\n      exit_with_cache_clear\n      exit_with_failure\n      exit_with_failure_code_only\n      exit_with_failure_if_config_is_not_path\n      exit_with_failure_if_empty_config\n      exit_with_help\n      exit_with_init\n      exit_with_success\n      exit_with_success_code_only\n      exit_with_success_elapsed\n      fail\n      fail_because\n      function_exists\n      get_command\n      get_command_arg\n      get_command_args\n      get_config\n      get_config_as\n      get_config_keys\n      get_config_keys_as\n      get_config_path\n      get_config_path_as\n      get_installed\n      get_option\n      get_title\n      get_version\n      handle_init\n      has_command\n      has_command_args\n      has_failed\n      has_option\n      has_options\n      implement_cloudy_basic\n      is_installed\n      json_get\n      json_get_value\n      json_load_file\n      json_set\n      list_add_item\n      list_clear\n      list_has_items\n      ltrim\n      md5_string\n      parse_args\n      path_extension\n      path_filename\n      path_filesize\n      path_is_absolute\n      path_is_yaml\n      path_make_absolute\n      path_make_canonical\n      path_make_pretty\n      path_make_relative\n      path_mtime\n      rtrim\n      string_lower\n      string_repeat\n      string_split\n      string_ucfirst\n      string_upper\n      succeed_because\n      table_add_row\n      table_clear\n      table_has_rows\n      table_set_column_widths\n      table_set_header\n      tempdir\n      throw\n      time_local\n      timestamp\n      translate\n      trim_quotes\n      url_add_cache_buster\n      url_host\n      validate_input\n      wait_for_any_key\n      warn_because\n      write_log\n      write_log_alert\n      write_log_critical\n      write_log_debug\n      write_log_dev_warning\n      write_log_emergency\n      write_log_error\n      write_log_info\n      write_log_notice\n      write_log_warning\n      yaml_add_line\n      yaml_clear\n      yaml_get\n      yaml_get_json\n      yaml_set\n\n    array_csv()\n    Echo $array_csv__array as CSV\n\n          Globals:\n\n                   array\n\n                  Options:\n\n                   Use comma+space and then the word &quot;all&quot; as the final separator\n                   Wrap each item with double quotes.\n                   Wrap each item with single quotes.\n\n              Echos:\n\n                  The CSV string\n\n    array_dedupe()\n    Remove duplicate values from an array.\n\n              Parameters:\n\n                   nothing.\n\n    array_has_value()\n    Search $array_has_value__array for a value.\n\n              Parameters:\n\n    array_join()\n    Echo a string, which is an array joined by a substring.\n\n          Globals:\n\n                   string The string to use to glue the pieces together with.\n\n                      Returns:\n\n                   if all goes well.\n                   on failure.\n\n    array_map__callback ()\n    Apply a callback to every item in an array and echo new array eval statement.\n\n    array_sort()\n    Mutate an array sorting alphabetically.\n\n          Globals:\n\n                   nothing.\n\n    array_sort_by_item_length()\n    Mutate an array sorting by the length of each item, short ot long\n\n          Globals:\n\n                   if assertion is true.\n                   if assertion failure.\n\n    choose()\n    Present a multiple choice selection list to the user.\n\n              Parameters:\n\n                   string Optional.  Alter the option to display for cancel.\n\n                      Returns:\n\n                   and echos the choice if one was selected; returns 1 if cancelled.\n\n    clear_task()\n    Call this to erase the last &quot;echo_task&quot;.\n\n                          Returns:\n\n                   nothing.\n\n    confirm()\n    Prompt for a Y or N confirmation.\n\n              Parameters:\n\n                   if the user answers Y; 1 if not.\n\n    create_uuid()\n    Get a new UUID\n\n                      Echos:\n\n                  A new UUID\n\n    date8601()\n    Return the current datatime in ISO8601 in UTC.\n\n                          Returns:\n\n                   nothing.\n\n    debug()\n    Development\n\n    dir_has_files()\n    Determine if a given directory has any non-hidden files or directories.\n\n              Parameters:\n\n                   if the path contains non-hidden files directories; 1 if not.\n\n    echo_blue()\n    Echo a string with blue text.\n\n              Parameters:\n\n                   nothing.\n\n    echo_blue_list()\n\n              Parameters:\n\n                   int\n\n                      Echos:\n\n                  The elapsed time.\n\n              Returns:\n\n                   nothing.\n\n    echo_error()\n    Echo an error message\n\n              Parameters:\n\n                   nothing.\n\n    echo_fail()\n    Echo a message indicating a failed test result.\n\n              Parameters:\n\n                   string The string to echo.\n\n                      Returns:\n\n                   nothing.\n\n    echo_green_highlight()\n    Echo a string with a green background.\n\n              Parameters:\n\n                   nothing.\n\n    echo_green_list()\n\n              Parameters:\n\n                   string The heading string.\n\n                      Returns:\n\n                   nothing.\n\n    echo_key_value()\n    $DESCRIPTION\n\n              Parameters:\n\n                   if $END$.\n\n    echo_list()\n    Echo an array as a bulleted list (does not clear list)\n\n              Parameters:\n\n    echo_pass()\n    Echo a message indicating a passed test result.\n\n              Parameters:\n\n                   string The string to echo.\n\n                      Returns:\n\n                   nothing.\n\n    echo_red_highlight()\n    Echo a string with a red background.\n\n              Parameters:\n\n                   nothing.\n\n    echo_red_list()\n\n              Parameters:\n\n                   string The string to echo.\n\n                      Returns:\n\n                   nothing.\n\n    echo_see_log()\n    Echo a message to the user to either enable and repeat, or view log for info.\n\n              Parameters:\n\n                   nothing.\n\n    echo_slim_table()\n    Echo a slim version of the table as it&#039;s been defined.\n\n                          Returns:\n\n                   nothing.\n\n    echo_table()\n    Echo the table as it&#039;s been defined.\n\n                          Returns:\n\n                   nothing.\n\n    echo_task()\n    Echo a task has started, a.k.a, pending.\n\n              Parameters:\n\n                   nothing.\n\n    echo_task_completed()\n    Replace the task pending with success.\n\n                          Returns:\n\n                   nothing.\n\n    echo_task_failed()\n    Replace the task pending with failure.\n\n                          Returns:\n\n                   nothing.\n\n    echo_title()\n    Echo a title string.\n\n              Parameters:\n\n                   nothing.\n\n    echo_warning()\n    Echo a warning message\n\n              Parameters:\n\n                   nothing.\n\n    echo_white()\n    Echo a string with white text.\n\n              Parameters:\n\n                   nothing.\n\n    echo_yellow()\n    Echo a string with yellow text.\n\n              Parameters:\n\n                   nothing.\n\n    echo_yellow_highlight()\n    Echo a string with a yellow background.\n\n              Parameters:\n\n                   nothing.\n\n    echo_yellow_list()\n\n              Parameters:\n\n    event_listen()\n    Register an event listener.\n\n              Parameters:\n\n                   string The function name to call on the event.\n\n    exit_with_cache_clear()\n    Empties caches in $CLOUDY_CORE_DIR (or other directory if provided) and exits.\n\n                          Returns:\n\n                   nothing.\n\n    exit_with_failure()\n\n                  Options:\n\n                   Optional, set the exit status, a number &gt; 0\n\n    exit_with_failure_code_only()\n    Exit without echoing anything with a non-success code.\n\n                  Options:\n\n                   Optional, set the exit status, a number &gt; 0\n\n                  Returns:\n\n                   nothing.\n\n    exit_with_failure_if_config_is_not_path()\n    Checks if a variable has been evaluated into memory and points to an existing path.\n\n              Parameters:\n\n                   string (Optional) The config path, if aliased.\n\n              Options:\n\n                   if the variable exists and points to a file; exits otherwise with 1.\n\n    exit_with_failure_if_empty_config()\n    Checks if a variable has been evaluated into memory yet or exits with failure.\n\n              Parameters:\n\n                   string (Optional) The config path, if aliased.\n\n              Options:\n\n                   if the variable is in memory.\n\n    exit_with_help()\n    Echo the help screen and exit.\n\n                          Returns:\n\n                   on success\n                   otherwise.\n\n    exit_with_init()\n    Performs an initialization (setup default config, etc.) and exits.\n\n                          Returns:\n\n                   nothing.\n\n    exit_with_success()\n    Echo a success message plus success reasons and exit\n\n              Parameters:\n\n                   0.\n\n    exit_with_success_code_only()\n    Exit without echoing anything with a 0 status code.\n\n                          Returns:\n\n                   nothing.\n\n    exit_with_success_elapsed()\n    Echo a success message (with elapsed time) plus success reasons and exit\n\n              Parameters:\n\n                   0.\n\n    fail()\n    Set the exit status to fail with no message.  Does not stop execution.\n\n                  Options:\n\n                   Optional, set the exit status, a number &gt; 0\n\n    fail_because()\n    Add a failure message to be shown on exit.\n\n              Parameters:\n\n                   string A default value if $1 is empty.\n\n                      Returns:\n\n                   if both $message and $default are empty. 0 otherwise.\n\n    function_exists()\n\n              Parameters:\n\n                   if defined; 1 otherwise.\n\n    get_command()\n    Echo the command that was used to call the script.\n\n                          Returns:\n\n                   if a valid command, 1 otherwise.\n\n    get_command_arg()\n    Return a operation argument by zero-based index key.\n\n              Parameters:\n\n                   mixed Optional, default value.\n\n                      Returns:\n\n                   if found\n                   if using the default.\n\n    get_command_args()\n    Echo all command arguments\n\n                          Returns:\n\n                   0\n\n    get_config()\n    Get a config path assignment.\n\n    get_config_as()\n    Get config path but assign it&#039;s value to a custom variable.\n\n    get_config_keys()\n    Echos eval code for the keys of a configuration associative array.\n\n              Parameters:\n\n                   on success.\n\n    get_config_keys_as()\n    Echo eval code for keys of a configuration associative array using custom var.\n\n              Parameters:\n\n                   on success.\n\n    get_config_path()\n    Echo eval code for paths of a configuration item.\n\n              Parameters:\n\n                   If you are expecting an array\n\n                  Returns:\n\n                   on success.\n\n    get_config_path_as()\n    Echo eval code for paths of a configuration item using custom var.\n\n              Parameters:\n\n                   string The path to the config item, e.g. &quot;files.private&quot;\n\n              Options:\n\n                   If you are expecting an array\n\n                  Returns:\n\n                   on success.\n\n    get_installed()\n    Echo the path to an installed program.\n\n              Parameters:\n\n                   if .\n\n    get_option()\n    Echo the value of a script option, or a default.\n\n              Parameters:\n\n                   string A default value if the option was not used.\n\n                      Returns:\n\n                   if the option was used; 2 if the default is echoed.\n\n    get_title()\n    Echo the title as defined in the configuration.\n\n              Parameters:\n\n                   nothing.\n\n    get_version()\n    Echos the version of the script.\n\n                          Returns:\n\n                   nothing.\n\n    handle_init()\n    Performs an initialization (setup default config, etc.)\n\n                          Returns:\n\n                   On success.\n                   if the init fails\n\n    has_command()\n    Determine if the script was called with a command.\n\n                          Returns:\n\n                   if a command was used.\n\n    has_command_args()\n    Determine if there are any arguments for the script &quot;command&quot;.\n\n                          Returns:\n\n                   if the command has any arguments\n                   if not.\n\n    has_failed()\n    Determine if any failure reasons have been defined yet.\n\n                          Returns:\n\n                   if one or more failure messages are present; 1 if not.\n\n    has_option()\n    Determine if the script was called with a given option.\n\n              Parameters:\n\n                   if the option was used; 1 if not.\n\n    has_options()\n    Determine if any options were used when calling the script.\n\n                          Returns:\n\n                   if at least one option was used; 1 otherwise.\n\n    implement_cloudy_basic()\n    SECTION: Ending the script.\n\n    is_installed()\n    Test if a program is installed on the system.\n\n              Parameters:\n\n                   if installed; 1 otherwise.\n\n    json_get()\n    Get the set JSON\n\n                      Echos:\n\n                  The JSON string set by json_set\n\n    json_get_value()\n    Echo a value by dot-path in the set\/loaded JSON.\n\n              Parameters:\n\n    json_load_file()\n    Load a JSON file to be read by json_get_value.\n\n              Parameters:\n\n                   if JSON is valid. 1 if not.\n\n    json_set()\n    SPDX-License-Identifier: BSD-3-Clause\n\n              Parameters:\n\n                   if the JSON is valid; 1 otherwise.\n\n    list_add_item()\n    Add an item to the list.\n\n          Globals:\n\n                   string The string to add as a list item.\n\n                      Returns:\n\n                   nothing.\n\n    list_clear()\n    Remove all items from the list.\n\n                          Returns:\n\n                   nothing\n\n    list_has_items()\n    Detect if the list has any items.\n\n                          Returns:\n\n                   if the list has at least one item.\n\n    ltrim()\n    Remove leading whitespace from string.\n\n              Parameters:\n\n                   if the string was able to be hashed.\n\n    parse_args()\n    Parses arguments into options, args and option values.\n\n    path_extension()\n    Return the extension of a file.\n\n    path_filename()\n    Return the basename less the extension.\n\n    path_filesize()\n    Echo the size of a file.\n\n              Parameters:\n\n                   string The filepath to check\n\n                      Returns:\n\n                   if absolute; 1 otherwise.\n\n    path_is_yaml()\n    Check if a filepath is a YAML file.\n\n              Parameters:\n\n                   If it is.\n                   If it is not a YAML file.\n\n    path_make_absolute()\n    Take an relative path and make it absolute to a parent.\n\n              Parameters:\n\n                   string The absolute PARENT path.\n\n                  Echos:\n\n                  The absolute path if it worked, otherwise nothing.\n\n              Returns:\n\n                   If the path could be make absolute.\n                   If $1 is not relative.\n                   If $2 is not absolute.\n                   If $1 is empty\n\n    path_make_canonical()\n    Remove all symbolic links from an absolute existing path.\n\n              Parameters:\n\n                   If all is well\n                   If $1 does not exist.\n                   If $1 is empty.\n                   If $1 is not absolute.\n\n    path_make_pretty()\n    Make a path output without leading $PWD if possible.\n\n              Parameters:\n\n                   0\n\n    path_make_relative()\n    Take an absolute path and make it relative to a parent path if possible.\n\n              Parameters:\n\n                   string The absolute PARENT path.\n\n                  Echos:\n\n                  The relative path if it worked; the original relative path if it didn&#039;t.\n\n              Returns:\n\n                   If the path could be make relative.\n                   If there was a problem creating a relative path.\n\n    path_mtime()\n    Echo the last modified time of a file.\n\n              Parameters:\n\n                   if the time cannot be determined.\n\n    rtrim()\n    Remove trailing whitespace from string.\n\n              Parameters:\n\n                   string The string to convert to lowercase.\n\n                  Echos:\n\n                  The lowercased string\n\n              Returns:\n\n                   nothing.\n\n    string_repeat()\n    Repeat a string N times.\n\n              Parameters:\n\n                   int The number of repetitions.\n\n                      Returns:\n\n                   nothing.\n\n    string_split()\n    Split a string by a delimiter.\n\n              Parameters:\n\n                   if .\n\n    string_ucfirst()\n    Echo the string with it&#039;s first letter in uppercase.\n\n              Parameters:\n\n                   nothing.\n\n    string_upper()\n    Echo the uppercase version of a string.\n\n              Parameters:\n\n                   nothing.\n\n    succeed_because()\n    Add a success reason to be shown on exit.\n\n              Parameters:\n\n                   string A default value if $1 is empty.\n\n                      Returns:\n\n                   if both $message and $default are empty; 0 if successful.\n\n    table_add_row()\n    Send any number of arguments, each is a column value for a single row.\n\n    table_clear()\n    Clear all rows from the table definition.\n\n                          Returns:\n\n                   nothing.\n\n    table_has_rows()\n    Determine if the table definition has any rows.\n\n                          Returns:\n\n                   if one or more rows in the definition; 1 if table is empty.\n\n    table_set_column_widths()\n    Manually set the column widths\n\n                          Returns:\n\n                   nothing.\n\n    table_set_header()\n    Set the column headers for a table.\n\n                          Returns:\n\n                   nothing.\n\n    tempdir()\n    Echo a temporary directory filepath.\n\n              Parameters:\n\n                   if successful\n\n    throw()\n    Echo an exception message and exit.\n\n                          Returns:\n\n                   3.\n\n    time_local()\n    Echo the current local time as hours\/minutes with optional seconds.\n\n                          Returns:\n\n                   nothing.\n\n    timestamp()\n    Echo the current unix timestamp.\n\n                          Returns:\n\n                   nothing.\n\n    translate()\n    Echo the translation of a message id into $CLOUDY_LANGUAGE.\n\n              Parameters:\n\n                   if translated\n                   if not translated.\n\n    trim_quotes()\n    Echo a string after removing leading and trailing quotes, as per YAML string.\n\n              Parameters:\n\n                   if all input is valid\n\n    wait_for_any_key()\n    Prompt the user to read a message and press any key to continue.\n\n              Parameters:\n\n                   nothing\n\n    warn_because()\n    Add a warning message to be shown on success exit; not shown on failure exits.\n\n              Parameters:\n\n                   string A default value if $1 is empty.\n\n                      Returns:\n\n                   if both $message and $default are empty; 0 if successful.\n\n    write_log()\n    You may include 1 or two arguments; when 2, the first is a log label\n\n    write_log_alert()\n    Writes a log message using the alert level.\n\n                          Returns:\n\n                   on success or 1 if the log cannot be written to.\n\n    write_log_critical()\n    Write to the log with level critical.\n\n              Parameters:\n\n                   on success.\n\n    write_log_debug()\n    Write to the log with level debug.\n\n              Parameters:\n\n                   on success.\n\n    write_log_dev_warning()\n    Log states that should only be thus during development or debugging.\n\n    write_log_emergency()\n    @link https:\/\/www.php-fig.org\/psr\/psr-3\/\n\n    write_log_error()\n    Write to the log with level error.\n\n              Parameters:\n\n                   on success.\n\n    write_log_info()\n    Write to the log with level info.\n\n              Parameters:\n\n                   on success.\n\n    write_log_notice()\n    Write to the log with level notice.\n\n              Parameters:\n\n                   on success.\n\n    write_log_warning()\n    Write to the log with level warning.\n\n              Parameters:\n\n                   on success.\n\n    yaml_add_line()\n    Add a line to our YAML data.\n\n              Parameters:\n\n                   0.\n\n    yaml_clear()\n    Empties the YAML string from earlier builds, making ready anew.\n\n                          Returns:\n\n                   0.\n\n    yaml_get()\n    Echos the YAML string as YAML.\n\n                          Returns:\n\n                   0\n\n    yaml_get_json()\n    Echos the YAML string as JSON.\n\n                          Returns:\n\n                   0\n\n    yaml_set()\n    Sets the value of the YAML string.\n\n              Parameters:\n\n                   0"},{"id":"test_functions","title":"Cloudy API: BASH Test Functions","body":"assert_contains\n      assert_count\n      assert_empty\n      assert_equals\n      assert_exit_status\n      assert_false\n      assert_file_exists\n      assert_file_not_exists\n      assert_greater_than\n      assert_internal_type\n      assert_less_than\n      assert_not_contains\n      assert_not_empty\n      assert_not_equals\n      assert_not_internal_type\n      assert_reg_exp\n      assert_same\n      assert_true\n      create_test_sandbox\n      delete_test_sandbox\n      do_tests_in\n      exit_with_test_results\n      is_being_tested\n      mark_test_skipped\n      test_fail_because\n\n    assert_contains()\n    Assert that an array contains a value.\n\n              Parameters:\n\n                   string The name of a global variable.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_count()\n    Assert that an array has a given number of elements.\n\n              Parameters:\n\n                   string The name of a global array.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_empty()\n    Assert that variable by name is empty.\n\n              Parameters:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_equals()\n    Assert that two values are equal in value but not necessarily type.\n\n              Parameters:\n\n                   mixed The value to test.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_exit_status()\n    $1 The expected exit code of the previous command.\n\n    assert_false()\n    Assert that a value equals &quot;false&quot; or &quot;FALSE&quot;.\n\n              Parameters:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_file_exists()\n    Assert that a file exists by path.\n\n              Parameters:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_file_not_exists()\n    Assert that a file does not exist at path.\n\n              Parameters:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_greater_than()\n    Asset one number is greater than another.\n\n              Parameters:\n\n                   number The number than should be greater than the target.\n\n    assert_internal_type()\n    Assert that an global variable is of a given type.\n\n              Parameters:\n\n                   string The name of a global variable.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_less_than()\n    Asset one number is less than another.\n\n              Parameters:\n\n                   number The number than should be less than the target.\n\n    assert_not_contains()\n    Assert that an array does not contain a value.\n\n              Parameters:\n\n                   string The name of a global variable.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_not_empty()\n    Assert that variable by name is not empty.\n\n              Parameters:\n\n                   string A custom message on failure.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_not_equals()\n    Assert that two values are not the same.\n\n              Parameters:\n\n                   mixed The value to test.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_not_internal_type()\n    Assert that an global variable is not of a given type.\n\n              Parameters:\n\n                   string The name of a global variable.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_reg_exp()\n    Assert that a value matches a regular expression.\n\n              Parameters:\n\n                   mixed The value to match against the regexp.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_same()\n    Assert that two values are equal and of the same type.\n\n              Parameters:\n\n                   mixed The value to test.\n\n                      Returns:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    assert_true()\n    Assert that a value equals &quot;true&quot; or &quot;TRUE&quot;.\n\n              Parameters:\n\n                   if assertion is true.\n                   if assertion fails.\n\n    create_test_sandbox()\n    Create a sandbox for testing.\n\n    delete_test_sandbox()\n    Remove the sandboxed variables.\n\n    do_tests_in()\n    Perform all tests in a file.\n\n              Parameters:\n\n                   Use this for subsequent calls to this function where you\n\n    exit_with_test_results()\n    Echo test results and exit.\n\n    is_being_tested()\n    SPDX-License-Identifier: BSD-3-Clause\n\n    mark_test_skipped()\n    Mark a single test as skipped\n\n    test_fail_because()\n    #actual} -eq 0 ] &amp;&amp; actual=&#039;&quot;&quot;&#039;\n\n              Parameters:\n\n                   string A default value if $1 is empty."},{"id":"api_functions_php","title":"Cloudy API: PHP Functions","body":"These mirror the BASH like-named functions for use in PHP.\n\nWatch for certain differences based on language conventions, such as:\n\n* return a string, rather than echo a string.\n* passing $exit_status by reference rather than using a return integar value.\n\n---\n\n      array_sort_by_item_length\n          cloudy_putenv\n          exit_with_failure\n          fail_because\n          json_bash_filter\n          json_get_value\n          json_load_file\n          path_extension\n          path_filename\n          path_filesize\n          path_is_absolute\n          path_is_yaml\n          path_make_absolute\n          path_make_pretty\n          path_make_relative\n          succeed_because\n          write_log\n          write_log_alert\n          write_log_critical\n          write_log_debug\n          write_log_dev_warning\n          write_log_emergency\n          write_log_error\n          write_log_exception\n          write_log_info\n          write_log_notice\n          write_log_warning\n          yaml_to_json"},{"id":"cloudy_basepath","title":"Cloudy Basepath","body":"The variable `$CLOUDY_BASEPATH` is used to resolve relative paths.\n\n## Auto-detected\n\nGenerally speaking you should allow it to be set automatically. In that case it will be set to one of the following:\n\n* The App root directory when the Cloudy Package is installed using Cloudy Package Manager.\n* The App root directory when the Cloudy Package is installed using Composer.\n* Otherwise, the directory containing the Cloudy Package Configuration file, e.g. `dirname \"$CLOUDY_PACKAGE_CONFIG\"`\n\n## Assigned in Cloudy Package Controller (Script)\n\nYou may include something like the following in your Cloudy Package Controller (Script). If the value is a relative path as in the first example, it will be resolved relative to the directory containing the Controller.\n\n```shell\nCLOUDY_BASEPATH=.\n```\n\n```shell\nCLOUDY_BASEPATH=\/some\/file\/path\/\n```"},{"id":"changelog","title":"Cloudy Changelog","body":"## [2.0.0] - 2024-07-??\n\n### Added\n\n- CLOUDY_BASEPATH To point to the basepath of the application. In some cases this will be the same as `$(dirname \"$CLOUDY_PACKAGE_CONTROLLER\")`, in other cases this will be a parent directory such as a website that leverages Cloudy apps installed with Cloudy Package Manager. Relative configuration paths are ALWAYS resolved with this path.\n- CLOUDY_CORE_DIR To point to the directory where Cloudy core is installed.\n- CLOUDY_PACKAGE_CONTROLLER To point to the directory where Cloudy core is installed.\n- CLOUDY_CACHE_DIR To point to the directory where Cloudy stores it's cache files.\n- CLOUDY_START_DIR used to be WDIR\n\n### Changed\n\n- Absolute paths can now be set on CONFIG; previously only relative paths worked.\n- In the bootstrap portion of the Cloudy Package Controller, replace `source \"$r\/cloudy\/cloudy.sh\"` with `CLOUDY_CORE_DIR=\"$r\/cloudy\";source \"$CLOUDY_CORE_DIR\/cloudy.sh\"`; the path may be slightly different, e.g. `source \"$r\/..\/..\/cloudy\/cloudy\/cloudy.sh\"` so ensure you maintain the correct path. The point here is to set the variable to the directory and then source _cloudy.sh_ using `$CLOUDY_CORE_DIR`.\n- Replace `path_relative_to_root` with `path_make_absolute`\n\n  ```shell\n  ## Cloudy 1.x\n  relative_path=$(path_relative_to_root \"$relative_path\")\n\n  ## Cloudy 2.x\n  ! path_is_absolute \"$relative_path\" && relative_path=$(path_make_absolute \"$relative_path\" \"$ROOT\")\n  ```\n- Replace `path_relative_to_pwd` with `path_make_relative`.\n\n  ```shell\n  path_relative_to_pwd \"$absolute\"\n  path_make_relative \"$absolute\" \"$PWD\"\n  ```\n\n- Replace `path_resolve` with `path_make_absolute` using the following pattern:\n\n  ```shell\n  path_resolve \"$absolute_prefix\" \"$path\"\n  a=$(path_make_absolute \"$path\" \"$absolute_prefix\") && path=\"$a\"\n  ```\n- Replace `path_unresolve` with `path_make_relative` using the following pattern:\n\n  ```shell\n  path_unresolve \"$absolute_prefix\" \"$path\"\n  a=$(path_make_relative \"$path\" \"$absolute_prefix\") && path=\"$a\"\n  ```\n\n### Deprecated\n\n- `get_config()` is too brittle. Use get_config_as instead, e.g. `get_config 'title'` -> `get_config_as 'title' 'title'`\n- `get_config_keys()`\n- `get_config_path()`\n\n### Removed\n\n- SCRIPT Use CLOUDY_PACKAGE_CONTROLLER instead.\n- LOGFILE Use CLOUDY_LOG instead.\n- CLOUDY_ROOT instead use CLOUDY_CORE_DIR\n- JSON configuration files; all configuration must now be written in YAML.\n- APP_ROOT Use CLOUDY_BASEPATH instead.\n- The token `${config_path_base}` has been replaced by `$CLOUDY_BASEPATH` for consistency. It can no longer be used in cloudypm.files_map.txt. Replace with `$CLOUDY_BASEPATH` in all cloudy pm packages.\n- `CLOUDY_NAME`; Add the following snippet to your package controller if you want to continue using this according to the legacy value: `export CLOUDY_NAME=\"$(path_filename $SCRIPT)\"`\n- `path_relative_to_config_base`\n\n### Fixed\n\n- Merge of cloudy package gitignore into cloudy pm .gitignore on install of package.\n\n### Security\n\n- lorem\n\n## [1.7.11] - 2024-06-29\n\n### Changed\n\n- Allow $APP_ROOT to be set with an absolute path.\n\n## [1.7.9] - 2024-06-25\n\n### Fixed\n\n- Bug introduced in 1.7.8 with {APP_ROOT} tokens.\n\n## [1.7.7] - 2024-05-10\n\n### Changed\n\n- APP_ROOT is no longer influenced by symlinking.\n\n### Added\n\n- CLOUDY_COMPOSER_VENDOR can now handle absolute paths.\n- PHP functions to match write_log_*().\n- PHP errors are now logged to the Cloudy logfile.\n\n### Removed\n\n- Composer vendor and composer.lock are no longer shipped.\n\n## [1.7.1] - 2024-05-08\n\n### Fixed\n\n- Swapped hardcoded `php` for `$CLOUDY_PHP`\n\n## [1.7.0] - 2024-05-07\n\n### Added\n\n- Add functionality to read PHP override from local config in Cloudy. See docs for code examples.\n\n## [1.6.0] - 2024-05-07\n\n### Added\n\n- The initialization API now supports directories as well as files.\n\n## [1.5.16] - 2024-03-14\n\n### Fixed\n\n- Bug with JSON methods when JSON contains unescaped single quotes.\n\n## [1.5.5] - 2023-09-21\n\n### Changed\n\n- Split _cloudy.sh_ into _inc\/cloudy.api.sh_ and _cloudy.sh_ to allow cherry-picking the api functions without bootstrapping the app.\n\n## [1.5] - 2023-04-25\n\n### Changed\n\n- POTENTIAL BREAKING CHANGES: The return value for fail_because(), warn_because(), and succeed_because() is now always `0`. Previously it was `1` if the message was empty AND the default was empty.\n\n## [1.4.9] - 2022-12-07\n\n### Fixed\n\n- If you see an error like \"line 833: cd: ... cloudy\/cloudy\/dist: No such file or directory\", try adding `CLOUDY_COMPOSER_VENDOR=\"\"` to the top of your script file, e.g. _framework\/script.sh_.\n\n## [1.4.0] - 2022-07-19\n\n### Added\n\n- Added functions `echo_task`, `clear_task`, `echo_task_completed`, `echo_task_failed`, `choose`\n- Configurable Composer vendor direct using `$CLOUDY_COMPOSER_VENDOR`\n- Added `$CLOUDY_CONFIG_HAS_CHANGED` which will be `true` if the configuration was rebuilt during boot.\n- Other small improvements and bug fixes.\n\n### Changed\n\n- Moved Composer vendor directory from _cloudy\/dist\/php\/vendor_ to _cloudy\/dist\/vendor_.\n\n## [1.3.7] - 2022-05-02\n\n### Added\n\n- `array_dedupe` function\n\n### Fixed\n\n- `assert_contains` and `assert_not_contains` with space-containing values now works.\n\n## [1.3.6] - 2021-09-17\n\n### Changed\n\n- Configuration merge algorithm to address deep merge problem.\n\n## [1.3.0] - 2021-09-11\n\n### Fixed\n\n- _.gitignore_ no longer includes duplicate lines when updating a cloudy package.\n\n### Added\n\n- `json_set`, `json_load_file`, `json_get_value` and `json_get` for easily working with JSON.\n- `echo_pass` and `echo_fail` for a consistent in test scenarios.\n- A pattern for writing command access to the documentation.\n\n### Deprecated\n\n- `--as=ALIAS` flag has been deprecated in `exit_with_failure_if_empty_config` and `exit_with_failure_if_config_is_not_path`. Replace `exit_with_failure_if_empty_config \"database.host\" --as=host` with `exit_with_failure_if_empty_config \"host\" \"database.host\"` to switch to the new syntax. This was done to match `get_config_as` and `get_config` argument patterns.\n\n## [1.2.0] - 2019-12-16\n\n### Added\n\n- md5_string function\n\n### Changed\n\n* Changed internal variable names, which should not affect your scripts.\n    * `CLOUDY_OPTION__*` are now hashed variable names.\n    * Configuration cached variable names now use hashes rather than plain config keys.\n\n### Fixed\n\n* Config variable problems with special characters.\n\n## [1.1.0] - 2019-07-13\n\n### Fixed\n\nA bug when using `additional_config` together with `config_path_base`. The issue was that `additional_config` should have been relative to `config_path_base`, however it was not working correctly. After you update to 1.1.0 your app will be broken. To fix this you will need to remove the value of `config_path_base` from each of the items in `additional_config`. As an example, if before this update, your configuration was:\n\n    config_path_base: ..\/..\/..\n    additional_config:\n      - ..\/..\/..\/bin\/config\/website_benchmark.yml\n\nYour configuration should now look like this:\n\n    config_path_base: ..\/..\/..\n    additional_config:\n      - bin\/config\/website_benchmark.yml\n\n## [1.0.6]\n\n### Changed\n\n* Renamed `$parse_args__option__*` to `parse_args__options__*`."},{"id":"conventions","title":"Cloudy Conventions","body":"_Cloudy_ has some opinions about how to write code, this page reveals them.\n\n## General\n\n* Functions that begin with `_cloudy` should be considered private and never called by your script. They may change in future versions.\n* All functions listed in _cloudy.sh_ comprise the public API and will not change across minor version changes.\n\n## Naming\n\n* Function names should be readable and intuitive, e.g., `exit_with_success` is better than `success_exit`\n* Function names should start with a verb if applicable, unless they are grouped by category, e.g. `array_join` is fine because _stack_ is the common group; `join` is the verb.\n\n## Boolean\n\nEven though BASH doesn't distinguish between (bool) \"true\" and (string) \"true\", you should indicate your intention by not using quotes for boolean value.\n\n    my_var=true\n    my_var=false\n\nDo not do the following when your intention is boolean:\n\n    my_var=\"true\"\n    my_var=\"false\"\n\nLikewise to test for `true` do like this, which again, omits any quotes around `true`.\n\n    [[ \"$my_var\" = true ]]\n\n## Functions\n\n* For getters when echoing a _default value_, return 2\n\n### Functions that operate on arrays\n\nWhen a function needs to manipulate an array, the array should be assigned to a global variable, the name of which is the function with `__array` added to the end, e.g.,\n\n    function array_join() {\n        local glue=$1\n        local string\n        string=$(printf \"%s$glue\" \"${array_join__array[@]}\") && string=${string%$glue} || return 1\n        echo $string\n        return 0\n    }\n\nAnd here is the usage\n\n    array_join__array=(\"${_config_values[@]}\")\n    local options=\"-$(array_join \", -\"), --${option}\"\n\nHowever, if a single function operates on more than one array, then the suffix should be modified as necessary. Look at `_cloudy_parse_option_arguments` for a good example. You still want the suffix to begin with two underscores.\n\n### Functions that return an array\n\nThe same naming conventions apply, if the function has to \"return\" an array, which, in BASH means it _sets_ or _mutates_ a global array.\n\nBeware of a scope issue for functions that use `eval` to set or mutate. This first example does not work, because `eval` doesn't affect the value of a global variable, even if said variable was already defined outside of the function. My understanding is that  `eval` creates [local variables by definition](https:\/\/stackoverflow.com\/questions\/40079054\/eval-variable-assignment-in-a-bash-function-causes-variable-to-be-local) when called within a function.\n\n```shell\nfunction array_sort_by_item_length() {\n    local eval=$(. \"$PHP_FILE_RUNNER\" \"$CLOUDY_CORE_DIR\/php\/functions\/invoke.php\" \"array_sort_by_item_length\" \"${array_sort_by_item_length__array[@]}\")\n\n    # note: [ $eval = 'declare -a array_sort_by_item_length__array=(\"on\" \"five\" \"three\" \"september\")' ]\n    # Notice the eval code aims to mutate $array_sort_by_item_length__array\n    # Even though $array_sort_by_item_length__array was already global, the eval doesn't not mutate the global value.\n\n    eval $eval\n    ...\n}\n```\n\nHere is the fix to make it work:\n\n```shell\ndeclare -a array_sort_by_item_length__array=()\nfunction array_sort_by_item_length() {\n    local eval=$(. \"$PHP_FILE_RUNNER\" \"$CLOUDY_CORE_DIR\/php\/functions\/invoke.php\" \"array_sort_by_item_length\" \"${array_sort_by_item_length__array[@]}\")\n\n    eval $eval\n\n    # note: [ $eval = 'declare -a sorted=(\"on\" \"five\" \"three\" \"september\")' ]\n    # It's the following assignment here that makes it work.\n    array_sort_by_item_length__array=(\"${sorted[@]}\")\n\n    ...\n}\n```\n\n### Name your function arguments\n\nTo make your code more readible, the first line(s) of a function should name the function arguments. Declare them as `local`. Then follow with a blank space, after which you begin the process of the function.\n\n    function get_config() {\n        local config_key_path=\"$1\"\n        local default_value=\"$2\"\n\n        # Now do the function stuff...\n\n### Next, declare local variables just below that\n\nGroup all local variable names below arguments and declare them there rather than deeper in the function where they are used. Even if no default values, declare them here anyway.\n\n    function get_config() {\n        local config_key_path=$1\n        local default_value=\"$2\"\n\n        local name\n        local type=\"string\"\n\n        ..."},{"id":"cloudy_core_testing","title":"Cloudy Core Testing","body":"To run all tests us:\n\n```bash\n.\/bin\/run_all_tests.sh\n```\n\nOpen that file to see how to cherry pick only some tests."},{"id":"lexicon","title":"Cloudy Lexicon","body":"## Cloudy Core\n\nCloudy core is used to build cloudy Packages. It is a BASH framework.\n\n## Cloudy Package\n\nGeneral reference to any project built upon Cloudy Core. Identifying constituents are: a controller script, one or more separate configuration file(s), and one or more commands, all of which help users accomplish things via the CLI.\n\n### Cloudy Package Controller (Script)\n\nA single BASH file (as part of a Cloudy Package) that boostraps Cloudy Core and then handles user commands.\n\n### Cloudy Package Configuration\n\nA single YAML file that defines your Cloudy Package. A key responsibility is that it may define other configuration files, allowing the end user to affect the package.\n\n## Cloudy Package Manager\n\nProvides a simply process for installing Cloudy Packages into projects. It will install packages at: _CLOUDY\\_BASEPATH\/opt\/VENDOR\/PACKAGE\\_NAME_\n\n## App\n\nIn some cases, Cloudy Packages will be combined or used within a larger project, referred to as the \"app\". The app usually has some limited configuration for each Cloudy Package, which the end user will modify as desired for app implementation. When the Cloudy Package Manager is used to facilitate inclusion, the configuration files will generally be located at _CLOUDY\\_BASEPATH\/bin\/config\/PACKAGE\\_NAME.yml_; see specific, individual Cloudy Packages for further details."},{"id":"packages","title":"Cloudy Packages","body":"Cloudy packages are modular scripts that are meant to share a single cloudy instance across all of them.  There is a defined directory structure that must be followed for this to work.\n\n## Create a package info file\n\n    name: aklump\/perms\n    clone_from: https:\/\/github.com\/aklump\/website-perms\n    entry_script: perms.sh\n    entry_symlink: perms\n    on_install: init\n    on_update: update\n\n1. Create a file, convention names it _cloudypm.yml_.\n1. The name must follow `vendor\/name` format.\n1. The schema of the file can be seen [here](https:\/\/github.com\/aklump\/cloudy\/blob\/master\/cloudy\/dist\/cloudypm_info.schema.json).\n1. The `on_*` are commands that will be fired at the end of that event.  They are optional.\n1. `entry_symlink` is optional and can be used to indicate a symlink value other than the filename of `entry_script` without extension.  In the above example `entry_symlink` is shown only for illustration.  The default value if it was omitted is `perms`.\n\n## Add Package to the Registry\n\n1. The registry file is located [here](https:\/\/github.com\/aklump\/cloudy\/blob\/master\/cloudy_package_registry.txt).\n1. Add the _vendor\/name_ and _a link to cloudypm.yml or cloudypm.json_ for your package.  These must be separated by a single space, e.g.\n\n        aklump\/perms https:\/\/raw.githubusercontent.com\/aklump\/website-perms\/master\/cloudypm.yml?token=AAZ_CajHqKkAfvJNQT5WKrtqwcYZivzGks5btjkEwA%3D%3D\n\n1. You do this by cloning and creating a pull request with your addition."},{"id":"route_access","title":"Command Access","body":"This describes a pattern for controlling command access.\n\nCreate a method such as this:\n\n```shell\nfunction implement_route_access() {\n  command=$(get_command)\n  eval $(get_config_as 'allowed_routes' \"commands.$command.access_by_env\")\n  [[ \"\" == \"$allowed_routes\" ]] && return 0\n\n  local csv\n  for i in \"${allowed_routes[@]}\"; do\n     [ \"$i\" == \"$LOCAL_ENV_ID\" ] && return 0\n     eval $(get_config_as env_alias \"environments.$i.id\")\n     csv=\"$csv, \\\"$env_alias\\\"\"\n  done\n\n  fail_because \"\\\"$command\\\" can be used only in ${csv#, } environments.\"\n  fail_because \"Current environment is \\\"$LOCAL_ENV\\\".\"\n  exit_with_failure \"Command not allowed\"\n}\n```\n\nAdd to your configuration, e.g.,\n\n```yaml\ncommands:\n  fetch:\n    access_by_env:\n      - dev\n      - staging\n    help: 'Fetch remote assets to local.'\n    ...\n```\n\nCall the function before your command switch:\n\n```bash\n...\nimplement_cloudy_basic\nimplement_route_access\n\n# Handle other commands.\ncommand=$(get_command)\ncase $command in\n...\n```"},{"id":"autoloader","title":"Composer autoloader not found","body":"To fix this for a Cloudy PM app, do the following in it's controller.\n\n1. Change to `CLOUDY_COMPOSER_VENDOR=\"..\/..\/cloudy\/cloudy\/vendor\"`"},{"id":"configuration","title":"Configuration","body":"## Overview\n\nConfiguration files are YAML or JSON. They are connected to your script in one, two, or three ways.\n\n1. The main configuration file is required and is hardcoded in your script as `$CLOUDY_PACKAGE_CONFIG`.\n1. Within that file, you may indicate additional configuration files using the key `additional_config`, which defines an array. Be aware that these paths are relative to `config_path_base`, see below for more info.\n1. Finally, configuration files may be provided dynamically at run time listening to the event `compile_config`.\n\nIf configuration values conflict, those that came later will take prescendence; note: arrays will be merged.\n\n## In Depth\n\nThe following examples will be shown with YAML.\n\nIn the header of your script you will find `$CLOUDY_PACKAGE_CONFIG`, this is for the base configuration file, e.g.,\n\n        CLOUDY_PACKAGE_CONFIG=script.example.yml\n\n1. Set it's value to the path of a supported file to use as configuration, absolute paths must begin with a forward slash, otherwise the path will be taken relative to the directory containing the script, i.e., `$(dirname your_cloudy_script.sh)`\n1. You may add additional configuration files by adding something like following in the YAML of the base configuration file. Notice the use of `~` to reference the user's home directory; this is a nice way to allow per-user configuration overrides. Additional configuration files are optional and will only be included if they exist. The use of the `$CLOUDY_BASEPATH` token is encouraged over the use of relative paths, as it is less confusing.\n\n        additional_config:\n          - $CLOUDY_BASEPATH\/.my_app\/config.yml\n          - _install.local.yml\n          - ~\/.my_project.yml\n\n1. Thirdly, you may provide configuration paths at run-time:\n\n        function on_compile_config() {\n            echo \"some\/other\/config.yml\"\n        }\n\n1. You may have any number of configuration files.\n1. Consider limited file permissions on your configuration files; e.g. `chmod go-rwx`.\n\n## Using Config\n\n### Scalars\n\nTo get a configuration value you will use the `get_config` function. The following example is the contents of an imaginary _config.yml_:\n\n    perms:\n      user: aklump\n      group: apache\n      files: 640\n      directories: 750\n\nTo access the perms `group` scalar value do one of the following:\n\n    eval $(get_config \"perms.group\" \"staff\")\n    # [ perms_group = 'apache' ]\n\n* Notice the dot separation to denote parent\/child.\n* The second argument is a default value, e.g., `staff`.\n\nYou can also assign to a different variable like this:\n\n    eval $(get_config_as \"group\" \"perms.group\" \"staff\")\n    # [ group = 'apache' ]\n\n### Arrays\n\nArrays are handled differntly depending upon a few things: if the config key points to a multi-dimensional array, an single-level associative array, or an single-level indexed array. For examples turn to the following configuration YAML:\n\n    user:\n      images:\n        tags:\n        - nature\n        - space\n        - religion\n        types:\n        - jpg\n        - png\n\nLet's see what `$(get_config -a 'user.images.tags')` returns us:\n\nWhen the config key points to an array `get_config` echos a string ready for `eval`, which generates a nice set of BASH vars containing the values of `perms`, e.g.,\n\n    eval $(get_config perms)\n    echo $perms_user\n    echo $perms_group\n    echo $perms_files\n    echo $perms_directories\n\nHere's how to locate a value key.\n\n```bash\neval $(get_config_keys_as 'keys' \"items\")\nfor key in \"${keys[@]}\"; do\n  eval $(get_config_as -a 'label' \"items.${key}.label\")\ndone\n```\n\n### Non-Scalars Keys\n\nIn a more complex configuration like the following, you might want to get the array keys, in this case all the \"operations\"; do so with `get_config`. Our example will echo a string like this: `declare -a config_keys=(\"help\" \"new\")`\n\n    commands:\n      help:\n        help: Display this help screen\n      new:\n        help: Create new Cloudy script file in the current directory\n        options:\n          config:\n            help: Set the basename of the config file.\n          force:\n            aliases: [f]\n            help: Force the overwrite of an existin file.\n\nThis is a usage example:\n\n    eval $(get_config_keys \"commands\")\n\n    ${config_keys[0]} == \"_default\"\n    ${config_keys[1]} == \"help\"\n    ${config_keys[2]} == \"new\"\n\n### Filepaths\n\nConfiguration values which are filepaths can be added to the YAML as relative paths:\n\n    webroot: ..\/web\n    path_to_binaries: .\n    public_files: ..\/web\/sites\/default\/files\n\nThen when you access the configuration use `get_config_path`, e.g.,\n\n    eval $(get_config_path_as \"webroot\" \"webroot\")\n\nThe value of `$webroot` will be an an absolute filepath.\n\n#### How are relative filepaths made absolute?\n\n@todo This needs updating; I think config_path_base might need to be removed from config.\n\n1. By default `$ROOT` is used as the basepath, which is the directory that contains your Cloudy script.\n1. You can alter this behavior by setting the configuration variable as `config_path_base` with a value, which is either an absolute path, or a relative path, relative to `$ROOT`. Both of the following are valid values:\n\n        # relative to $ROOT\n        config_path_base: ..\/..\/..\n\n        # or using an absolute path...\n        config_path_base: \/Users\/aklump\/config\n\n#### Pro Tip: Prefix Your Paths Array\n\nThis example shows how you can get your files array with dynamic prefixes when necessary.\n\n```shell\nfunction _get_ignore_paths() {\n  local snippet=$(get_config_as -a 'ignore_paths' 'pantheon.files.ignore')\n  local find=']=\"'\n\n  echo \"${snippet\/\/$find\/$find$CONFIG_DIR\/fetch\/$ENV\/files\/}\"\n}\n\nfunction plugin_init() {\n    eval $(_get_ignore_paths)\n\n    for path in \"${ignore_paths[@]}\"; do\n      if [ ! -f \"$path\" ]; then\n        touch \"$path\"\n        succeed_because \"Created: $path\"\n      fi\n    done\n}\n```\n\n#### Pro Tip\n\nIf you put a stack of paths under a single key, like so:\n\n    files:\n    - webroot: ..\/web\n    - bin: .\n    - public: ..\/web\/sites\/default\/files\n\nYou can import all of them with one line like this:\n\n    eval $(get_config_path_as \"files\" \"files\")\n\nAnd you will have access to:\n\n    $files_webroot\n    $files_bin\n    $files_public\n\nIf the yaml is an indexed array like so:\n\n    files:\n    - ..\/web\n    - .\n    - ..\/web\/sites\/default\/files\n\nYou have one extra step of variable assignment.\n\n    eval $(get_config_path \"writeable_directories\")\n    writeable_directories=($_config_values[@]})\n\n## Detecting Config Changes\n\nThe variable `$CLOUDY_CONFIG_HAS_CHANGED` will be set to `true` if the configuration was rebuilt on a given execution. This happens the first time the script is executed after a cache clear. Otherwise it's value will be `false`. The variable is available as early as the `boot` event.\n\nUse this variable to rebuild configuration when necessary:\n\n```shell\nif [[ \"$CLOUDY_CONFIG_HAS_CHANGED\" == true ]]; then\n  # TODO rebuild my dependent configuration.\nfi\n```"},{"id":"development","title":"Development Tools","body":"## How to use `debug`\n\nThis function has nothing to do with step debugging, however it gives you a consistent means to see where something happened and what a value is at a given point in the code\n\n### Example One\n\n    debug \"Stopping at this point;$0;$FUNCNAME;$LINENO\"\n\nThis will give you a nice output like this:\n\n![Debug example 1](..\/..\/images\/debug-1.jpg)\n\nOr if called from within a function:\n\n    function my_function() {\n        debug \"Stopping at this point;$0;$FUNCNAME;$LINENO\"\n    }\n\n![Debug example 4](..\/..\/images\/debug-4.jpg)\n\n* Even if not calling within a function you may pass `$FUNCNAME` as shown in both cases, and it will simply be ignored if irrelevent.\n\n### Example Two\n\nThis example shows how to create a label.  By separating your message and label with a single semi-colon, you will get this type of result.  Notice the `$` is escaped as we want a literal dollar-sign in the label.\n\n     debug \"$CLOUDY_START_DIR;\\$CLOUDY_START_DIR\"\n\n![Debug example 2](..\/..\/images\/debug-2.jpg)\n\n### Example Three\n\nThis will just give you a quick message with default label:\n\n    debug \"Quick message\"\n\n![Debug example 3](..\/..\/images\/debug-3.jpg)\n\n## Stop execution with `throw`\n\nSimilar to `debug`, yet it stops execution immediately with an exit code of 3.\n\n    throw \"Aborting at this point;$0;$FUNCNAME;$LINENO\"\n\n![Throw example](..\/..\/images\/throw.jpg)"},{"id":"documenting","title":"Documenting Code","body":"Functions should adhere to the following docblock convention:\n\n```shell\n##\n # The summary of the function goes here followed by two spaces.\n #\n # @global"},{"id":"php_errors","title":"Error Handling in Cloudy PHP","body":"You should use the Cloudy error handling strategy and functions, which have been mirrored to PHP:\n\n* `fail_because`\n* `exit_with_failure`\n\n### How Exceptions are Handled\n\nIf your PHP code throws an exception, the exception message will automatically be passed to `fail_because` and the exception code will be passed to `$CLOUDY_EXIT_STATUS`"},{"id":"events","title":"Events (Hooks)","body":"* Event handlers are functions that must be defined before the Cloudy bootstrap.\n\n        #!\/usr\/bin\/env bash\n\n        ...\n\n        #\n        # Define all event handlers here.\n        #\n\n        # Begin Cloudy Bootstrap\n        s=\"${BASH_SOURCE[0]}\";while ...\n\n* To see the available events recursively search codebase for `event_dispatch \"`.\n\n## Cloudy Core Events\n\n* pre_config\n* compile_config\n* boot\n* clear_cache\n\n## on_boot\n\nIf you define this function before the bootstrap it will be called once the minimum bootstrap has been called.  To see an example of this you can look to the `tests` path in _cloudy_installer.sh_.\n\n## Example of a Custom Event\n\nImagine a custom event like showing info.  Let's call the event `show_info`.  You Cloudy script will fire or trigger the event with a line like this:\n\n    event_dispatch \"show_info\" \"do\" \"re\" \"mi\"\n    local trigger_result=$?\n\nHow might another script respond to this event?\n\n    function on_show_info() {\n        local do=$1\n        local re=$2\n        local mi=$3\n\n        ...\n    }\n\n### Listening for events\n\nYou can register custom callbacks using `event_listen`.  See below...\n\n### Using `additional_bootstrap` files\n\nIn some cases you will need to add your listeners in a custom bootstrap file which is registered in your configuration as `additional_bootstrap`.  They are sourced after all configuration has been loaded.  The contents of such file could look like this:\n\n    #!\/usr\/bin\/env bash\n\n    function here_we_go() {\n        debug \"$FUNCNAME;\\$FUNCNAME\"\n    }\n\n    event_listen \"boot\" \"here_we_go\""},{"id":"error_handling","title":"Exit Status","body":"When you call `exit_with_success` and `exit_with_success_elapsed` the exit status is set to 0 and the script exits.  With the latter, the elapsed time is also printed.\n\nWhen you call `exit_with_failure` the exit status is set to 1 by default.  To change the exit status to something other than 1, then pass the `--status={code}` option, like the following, which will return a 2.  Valid exit codes are from 0-255. [Learn more](https:\/\/www.tldp.org\/LDP\/abs\/html\/exit-status.html).\n\n    exit_with_failure --status=2 \"Missing $ROOT\/_perms.local.sh.\"\n\nYou can use `throw` kind of like an exception."},{"id":"filepaths","title":"Filepaths","body":"## `realpath` vs. `pwd`\n\nThe difference between these two is made apparent when you deal with a symlink. Using `realpath` will resolve the symlink to the actual path. Whereas, `pwd` is going to give you the apparent filepath, that is an unresolved symlink.\n\n```text\n.\n\u251c\u2500\u2500 bar\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 foo -> ..\/foo\n\u2514\u2500\u2500 foo\n\n3 directories, 0 files\n\u2601  $  echo $(realpath \"bar\/foo\")\n\/Users\/aklump\/foo\n\u2601  $  echo $(cd \"bar\/foo\" && pwd)\n\/Users\/aklump\/bar\/foo\n```\n\n## How do relative paths resolve?\n\n* Use `path_make_absolute`.\n* Use a path token (see below).\n* All relative paths in configuration will resolve to CLOUDY_BASEPATH by default.\n* For greater clarity, you may use path tokens instead of relative paths in your configuration.\n\n## Path Tokens\n\n@todo Auto generate this in book.php\n\n1. `CLOUDY_BASEPATH`\n1. `CLOUDY_CORE_DIR`\n\n? what are the path tokens?\n\n1. `$CLOUDY_BASEPATH`\n1. `$CLOUDY_CORE_DIR`"},{"id":"functions","title":"Functions","body":"## Correct Way to Pass Function Arguments\n\n> Notice the double quotes below `\"$@\"`  Without these any quoted arguments containing spaces will not be properly passed along.\n\n```shell\nfunction env_on_import_db() {\n  call_plugin mysql import_db \"$@\"\n}\n```\n\nOr shift the first argument and pass the rest:\n\n```shell\nfunction remote_ssh_by_environment() {\n  local environment_id=\"$1\"\n\n  eval $(get_config_as env_auth \"environments.$environment_id.ssh\")\n  [[ \"$env_auth\" ]] || return 1\n  echo ssh -t -o BatchMode=yes \"$env_auth\" \"${@:2}\"\n}\n```\n\n## Using Functions to Create Variable Values\n\nFollow this pattern for best results.\n\n```bash\nfunction lorem_echo_color() {\n  local is_colorblind=\"$1\"\n\n  [[ \"$is_colorblind\" == true ]] && echo \"Observer is colorblind.\" && return 1\n  echo \"blue\" && return 0\n}\n```\n\n### Acting Only When a Variable Is Set\n\n```bash\nif color=$(lorem_echo_color); then\n  echo \"The color has been set to: $color\"\nfi\n```\n\n### Failing When a Variable Cannot Be Set\n\n```bash\nfunction parent_caller() {\n  local color\n  ! color=$(lorem_echo_color) && fail_because \"$color\" && return 1\n}\n\n# In this example `lorem_echo_color` is not being called from inside a parent function.\n! color=$(lorem_echo_color) && fail_because \"$color\" && exit_with_failure\n```\n\n### Assigning Default Values Instead of Failing\n\n```bash\n# Use this pattern for an empty or default value\ncolor=$(lorem_echo_color) || color=''\ncolor=$(lorem_echo_color) || color='some default'\n```\n\nPoints to take note of:\n\n* Do not put `fail_because` inside of functions that echo their results. The message will get lost due due to the subshell aspect.\n* Instead echo the message to be passed into `fail_because` by the caller.\n* In parent functions, do not use `local` on the same line as the `color=` assignment or this will cause the `return 1` to be lost.\n* Sometimes you will want a default value rather than to process a failure, use the second example in that case."},{"id":"globals","title":"Global Variables","body":"Beyond the [internal variables](https:\/\/www.tldp.org\/LDP\/abs\/html\/internalvariables.html#BASHSUBSHELLREF) the following variables are available to your Cloudy Package:\n\n```shell\n# @var integer $CLOUDY_EXIT_STATUS\n# @var string $CLOUDY_BASEPATH\n# @var string $CLOUDY_CACHE_DIR\n# @var string $CLOUDY_COMPOSER_VENDOR\n# @var string $CLOUDY_CONFIG_JSON\n# @var string $CLOUDY_CORE_DIR\n# @var string $CLOUDY_INSTALLED_AS\n# @var string $CLOUDY_PACKAGE_CONFIG\n# @var string $CLOUDY_PACKAGE_CONTROLLER\n# @var string $CLOUDY_PHP\n# @var string $CLOUDY_RUNTIME_ENV\n# @var string $CLOUDY_RUNTIME_UUID\n# @var string $CLOUDY_START_DIR\n```\n\n## $CLOUDY_BASEPATH\n\nAn absolute path, which is used to resolve relative paths. This can be set automatically or it will be detected automatically [see this page](@cloudy_basepath) for more info.\n\n## $CLOUDY_CACHE_DIR\n\nThe absolute path the directory containing Cloudy Core\n\n## $CLOUDY_START_DIR\n\nThe working directory when $CLOUDY_PACKAGE_CONTROLLER was called.\n\n## $CLOUDY_CORE_DIR\n\nThe absolute path the directory containing Cloudy Core.  Developers can [control where this is located](@relocating_cloudy).\n\n## $CLOUDY_PACKAGE_CONTROLLER\n\nThe absolute path to the Cloudy Package controller script.\n\n## $CLOUDY_PACKAGE_CONFIG\n\nThe absolute path to the main configuration file for your Cloudy package.\n\n## $CLOUDY_LOG\n\nAbsolute path to a log file, if enabled.\n\n## $CLOUDY_RUNTIME_UUID\n\nThis will change every time the controller is executed.\n\n---\n\n* Determine your version of BASH with `echo $BASH_VERSION`"},{"id":"lists","title":"Lists","body":"Here is an example of a realtime list with nice bullets. You might use this if you are processing something where it would take too long to wait for the entire list to be complete, hence using `echo_list` is not fast enough user feedback.\n\n```bash\ni=1\nfor item in ${items[@]}; do\n  bullet=$LI\n  [ $i -eq ${#items[@]} ] && bullet=$LIL\n  echo \"$bullet $name\"\n  ((i++))\ndone\n```"},{"id":"localize","title":"Localization\/Translation","body":"Note: this is not available until after the configuration has been bootstrapped.\n\n## Translate or reword\n\nYou can translate or reword certain strings with this feature\n\n    translate:\n      ids:\n      - Completed successfully.\n      - Failed.\n      strings:\n        en:\n        - Installation succeeded.\n        - Installation failed.\n\n* The ids are the strings that appear normally.\n* To begin a translation, copy the entire ids array as `translate.strings.LANG` and then alter the strings you mean to.  The value of `LANG` must be a [two or three letter ISO 639 language code](https:\/\/www.loc.gov\/standards\/iso639-2\/php\/code_list.php).\n* The indexes of the ids array must match with the `translate.strings.LANG` array.\n\n## Implementation\n\nTo implement localization in a script, do like this:\n\n     echo_title $(translate \"Welcome to your new script!\")\n\nThen add that to `translate.ids`:\n\n    translate:\n      ids:\n      - Completed successfully.\n      - Failed.\n      - Welcome to your new script!"},{"id":"logging","title":"Logging to File","body":"There is a file logging API built in to _Cloudy_.\n\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_language\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_translate_en_exit_with_success\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_translate_en_exit_with_failure\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_commands_coretest_options__keys\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_commands__keys\n\nThese functions should be self-explanatory; each one takes a single argument, which is the message.\n\n    write_log_*\n\nTo log an error in BASH:\n\n```shell\nwrite_log_error \"Cannot load file $filepath\"\n```\n\nThere are PHP, same-name equivalents, e.g.:\n\n```php\nwrite_log_error(\"Cannot load file $filepath\");\n```\n\nThe one that may require explanation is `write_log`, which takes one or two arguments.\n\nWhen using two arguments the first is an arbitrary log label, which appears in place of the standard log levels from above. You can set this to anything and that will allow you to filter your log items by that key using whatever log reader you're using. Using _Console_ in OSX is my preference.\n\n    write_log \"alpha\" \"Recording a value $value\"\n\nYou may also call it like this:\n\n    write_log \"No custom label\"\n\n## Enabling Logging\n\n### Hardcoding Into Your Controller\n\nFirst you must declare the filename of the log file; this enables logging. This is relative to your script's directory and should be placed at the top of your script before the bootstrap.\n\n```shell\n[[ ! \"$CLOUDY_LOG\" ]] && CLOUDY_LOG=\"script.example.log\"\n\n# Begin Cloudy Bootstrap\ns=\"${BASH_SOURCE[0]}\";while ...\n```\n\n### Enabling on the CLI\n\nExport the `CLOUDY_LOG` variable with a path to the logfile and then run your app.\n\n```shell\nexport CLOUDY_LOG=\/path\/to\/file.log\n```"},{"id":"menus","title":"Menus","body":"## Advanced Menus\n\nThis example shows how to generate a menu using PHP, JSON which has different labels and values.\n\n_get_menu_json.php_\n```php"},{"id":"relocating_cloudy","title":"Relocating Cloudy","body":"To use an instance of the Cloudy framework other than the default, you need to do one thing; change the path value of `CLOUDY_CORE_DIR` in the bootstrap section of a Cloudy Package Controller:\n\n![relocate cloudy core dir](..\/..\/images\/relocate_cloudy_core_dir.png)"},{"id":"version","title":"Script Version","body":"To provide a version for your script other than the default `1.0`, you have two options.\n\n## Version Indicated in YAML\n\nYou may hard-code the version in a YAML config file like this:\n\n    title: Cloudy Installer\n    version: 1.5\n    ...\n\n## Version Indicated Dynamically\n\nIf you would rather provide your version dynamically with BASH, you can override the default `get_version` by adding it to your script file anytime after the bootstrap; this allows you to provide it via PHP, `cat` or whatever, e.g.,\n\n    ...\n    done;r=\"$(cd -P \"$(dirname \"$s\")\" && pwd)\";source \"$r\/cloudy\/dist\/cloudy.sh\"\n    # End Cloudy Bootstrap\n\n    function get_version() {\n        local version=$(grep \"version = \" \"$ROOT\/web_package.info\")\n        echo ${version\/version = \/ }\n    }"},{"id":"php_version","title":"Setting the PHP Version Used by Cloudy","body":"The value of the [environment variable](https:\/\/www.howtogeek.com\/668503\/how-to-set-environment-variables-in-bash-on-linux\/) `CLOUDY_PHP` will be used to locate the PHP binary. You may set that explicitly (see below) or let Cloudy do it automatically.\n\n### Globally\n\nAdd the following line to _~\/.bashrc_ or _~\/.bash\\_profile_ as appropriate to your case.  [Learn more...](https:\/\/www.howtogeek.com\/668503\/how-to-set-environment-variables-in-bash-on-linux\/)\n\n```bash\nexport CLOUDY_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.2.20\/bin\/php\"\n```\n\n### At Runtime\n\nCoincidentally, if you run the following, the test will actually fail, as it asserts that `$CLOUDY_PHP` is set to the default PHP binary, which it will not be in this case.\n\n```bash\n export CLOUDY_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.2.20\/bin\/php\"; .\/cloudy_tools.sh tests\n```\n\n### Defined in Cloudy Package Controller\n\nYou may set the value in the `on_pre_config` [event handler](@events):\n\n```bash\nfunction on_pre_config() {\n  CLOUDY_PHP=\"\/some\/path\/to\/php\"\n}\n```\n\n### In Configuration Files\n\nTo enable this feature **you must add the following** to the Cloudy Package Controller, which does an early configuration read.\n\n_Cloudy Package Controller File: foo.sh_\n\n```bash\nfunction on_pre_config() {\n  source \"$CLOUDY_CORE_DIR\/inc\/config\/early.sh\"\n}\n```\n\n_Base configuration File: foo.core.yml_\n\n```yaml\nadditional_config:\n  - $CLOUDY_BASEPATH\/.foo\/local.yml\n```\n\n_Additional Local Config: local.yml_\n\n```yaml\nshell_commands:\n  php: \/usr\/local\/bin\/php84\n```"},{"id":"php_envvars","title":"Sharing Data Between BASH and PHP","body":"## From BASH to PHP\n\nIf you want to pass custom variables from BASH to PHP, then you should use the native BASH `export` and the PHP `getenv()`, which is not special to Cloudy.\n\n_In file.sh_\n\n```shell\nexport MY_VAR='foo bar'\n. \"$PHP_FILE_RUNNER\" file.php\n```\n\n_In file.php_\n\n```php\n\/** @var array $CLOUDY_FAILURES *\/\n\/** @var array $CLOUDY_SUCCESSES *\/\n\/** @var integer $CLOUDY_EXIT_STATUS *\/\n\/** @var string $CLOUDY_BASEPATH *\/\n\/** @var string $CLOUDY_CACHE_DIR *\/\n\/** @var string $CLOUDY_COMPOSER_VENDOR *\/\n\/** @var string $CLOUDY_CONFIG_JSON *\/\n\/** @var string $CLOUDY_CORE_DIR *\/\n\/** @var string $CLOUDY_PACKAGE_CONFIG *\/\n\/** @var string $CLOUDY_PACKAGE_CONTROLLER *\/\n\/** @var string $CLOUDY_RUNTIME_ENV *\/\n\/** @var string $CLOUDY_RUNTIME_UUID *\/\n\/** @var string $CLOUDY_START_DIR *\/\n\/** @var string $PHP_FILE_RUN_CONTROLLER *\/\n\n$MY_VAR=getenv('MY_VAR');\n```\n\nWhen you use `$PHP_FILE_RUNNER` the BASH variables listed above are mirrored in the PHP include file.  _Hint: Add the varable declarations to the top of your included PHP files._\n\n## From PHP to BASH\n\nIt is in this direction where Cloudy works behind the scenes to do the unusual, thereby allowing you to send data from PHP back to your BASH script. You must be using `$PHP_FILE_RUNNER` to take advantage of this feature.\n\n_In file.sh_\n\n```shell\n. \"$PHP_FILE_RUNNER\" file.php\n# See below for how $MY_VAR is set in file.php...\necho \"$MY_VAR\"\n```\n\n_In file.php_\n\n```php\n$MY_VAR='lorem ipsum'\ncloudy_putenv('MY_VAR', $MY_VAR);\n```\n\n## Accessing Configuration in PHP\n\nThe complete configuration will be written to an environment variable `$CLOUDY_CONFIG_JSON`, which can be decoded by PHP.\n\n```php\n$config = json_decode(getenv('CLOUDY_CONFIG_JSON'), TRUE);\n```"},{"id":"plugins","title":"Single File Plugins Pattern","body":"Here is a pattern that can be used if you want to allow \"plugin\" type files, PHP or BASH, to be used by your project:\n\n_Implementing controller snippet:_\n\n```shell\ncall_plugin \"$CONFIG_DIR\/plugins\/$plugin\" || exit_with_failure\n```\n\n_Function definition for `call_plugin()`_\n```shell\nfunction call_plugin() {\n  local plugin_path=\"$1\"\n\n  if [[ ! -f \"$plugin_path\" ]]; then\n    fail_because \"$plugin_path does not exist.\"\n    return 1\n  elif [[ \"$(path_extension \"$plugin_path\")\" == \"php\" ]]; then\n    # TODO It may be more appropriate to be explicite about the arguments.\n    plugin_output=$($CLOUDY_PHP  $@)\n  else\n    plugin_output=$(.  $@)\n  fi\n\n  if [[ $? -ne 0 ]]; then\n    [[ \"$plugin_output\" ]] && fail_because \"$plugin_output\"\n    fail_because \"\\\"$plugin\\\" has failed.\"\n    return 1\n  fi\n\n  [[ \"$plugin_output\" ]] && succeed_because \"$plugin_output\"\n  return 0\n}\n```\n\n_The plugin, PHP version:_\n\n```php"},{"id":"variable_scopes","title":"Sourcing Scripts","body":"#_parent.sh_\n\n```shell\nFRUIT='apple'\necho \"parent: $FRUIT\"\n# This is the same scope as parent.sh; think of it as COPY AND PASTE (or PHP Traits).\nsource child.sh\n# We see that child.sh has affected our variable in this file.\necho \"parent: $FRUIT\"\n```\n\n_child.sh_\n\n```shell\necho \"child: $FRUIT\"\n# Child changes the variable, which the parent will experience\nFRUIT='banana'\necho \"child: $FRUIT\"\n```\n\n_output is_\n\n```text\n$ .\/parent.sh\nparent: apple\nchild: apple\nchild: banana\nparent: banana\n$ echo $FRUIT\n```\n\n## Exporting Variables\n\nYou can see the dramatic difference in the subtle changes in how the script is called in this example. In order for `.\/parent.sh` (a subshell) to pass it's value up to the CLI (parent shell), you would have to use `export FRUIT`. In the second example, `export is unnecessary` because `. .\/parent.sh` is sourcing the file and remains in the same shell.\n\n```text\n$ .\/parent.sh\nparent: apple\nchild: apple\nchild: banana\nparent: banana\n$ echo $FRUIT\n\n$ . .\/parent.sh\nparent: apple\nchild: apple\nchild: banana\nparent: banana\n$ echo $FRUIT\nbanana\n$\n```\n\n## Running Scripts\n\n`. foo.sh`\n\n* This is the source command, followed by a space, and then the script to be sourced. It executes the foo.sh script in the current shell itself. As a result:\n* Any variables that are modified or created inside foo.sh will be available in the current shell after foo.sh completes.\n* If the script foo.sh uses exit, it will close your current shell session.\n\n`.\/foo.sh`\n\n* This form runs foo.sh as a sub-process. Your shell will start a separate process to run the script. As a result:\n* Any variables that are modified or created inside foo.sh will not be available in the parent shell after foo.sh completes.\n* foo.sh needs to have execute (x) permissions for this to work.\n\nWhether you should use .\/foo.sh or . .\/foo.sh (or its equivalent source .\/foo.sh) depends on your specific needs.\n\n.\/foo.sh: This runs the script in a new shell. It won't affect the environment of the current shell. Use this when you want to run a script that doesn't modify your current shell environment.\n\n`. .\/foo.sh` or `source .\/foo.sh`: This sources the script in the current shell. Any environment variables or functions that the script defines or modifies will be available in your current shell after the script runs. Use this when running a script that defines or modifies environment variables or shell functions that you want to use after the script runs, such as a script that sets up environment variables for a project.\n\nFor shell scripts that are meant to initialize something in your environment, such as setting environment variables to configure a software, or defining functions to be used later, sourcing is the way to go. But for shell scripts that are meant to do a standalone job, running them in a new shell isolates them and prevents them from affecting the current shell environment, which is a safer option."},{"id":"strings","title":"String Manipulation","body":"Taken from [Advanced Bash-Scripting Guide: Chapter 10. Manipulating Variables](https:\/\/www.tldp.org\/LDP\/abs\/html\/string-manipulation.html)\n\n## Trim the dot from right side of string\n\n```bash\n${string%.}\n```\n\n## Trim the dot from left side of string\n\n```bash\n${string#.}\n```\n\n## Trim all leading and trailing whitespace\n\n```bash\nstring=\"   foo    \"\nstring=${foo## }\nstring=${foo%% }\n# \"$string\" == \"foo\"\n```\n\nOr use the Cloudy helpers:\n\n```bash\nstring=\"   foo    \"\nstring=\"$(ltrim \"$string\")\"\nstring=\"$(rtrim \"$string\")\"\n# \"$string\" == \"foo\"\n```\n\n## Get string length\n\n```bash\n${#string}\n```"},{"id":"tables","title":"Tables (Tabular Output)","body":"You can easily create tables with _Cloudy_.\n\nThe following code:\n\n    echo_heading \"Tabular Data Example\"\n    table_set_header \"Word\" \"Part of Speech\"\n    table_add_row \"jump\" \"verb\"\n    table_add_row \"chocolaty\" \"adjective\"\n    table_add_row \"kitten cat\" \"noun noun\"\n    table_add_row \"quickly\" \"adverb\"\n    echo_table\n\nWill produce output like the following\n\n![Tabular output](..\/..\/images\/table.jpg)\n\n## Control the Padding\n\nUse the options `--lpad` and `--rpad` to control the horizontal padding.\n\n        echo_heading \"Tabular Data Example\"\n        table_set_header \"Word\" \"Part of Speech\"\n        table_add_row \"jump\" \"verb\"\n        ...\n        echo_table --lpad=10 --rpad=10\n\n![Tabular output](..\/..\/images\/table-padding.jpg)"},{"id":"installer","title":"The Initialize API","body":"The Cloudy Initialization API makes it easy for your application to provide scaffolding (files and directories) to an instance during installation.\n\n**In your app, create a folder called _init\/_. When users of your app run the `init` command, files will be copied from _init\/_ to the location you've specified in your files map.**\n\n## The Files Map\n\nIn your app, _init\/cloudypm.files\\_map.txt_ is a text file that tells what files go where. Basically two columns, separated by a space. The first column represents filenames relative to _init\/_, where `*` is all files. The second column is either a path relative to `$ROOT` or an absolute path, which represents the installed location.\n\nThe contents of the files map must have at least one line that will look something like this; notice the use of the asterix in both columns.\n\n```text\n* ..\/..\/..\/bin\/config\/*\n```\n\n### Multiple Destinations\n\nBut let's say you want one of the files to go elsewhere. The contents of _cloudypm.files\\_map.txt_ might look like this:\n\n```text\n* ..\/..\/..\/bin\/config\/*\n_perms.custom.sh ..\/..\/..\/bin\/_perms.custom.sh\n```\n\nIn this case `*` represents all files except for _\\_perms.custom.sh_. They are initialized as before, however _\\_perms.custom.sh_ is initializeed at _$ROOT\/..\/..\/..\/bin\/\\_perms.custom.sh_.\n\nRenaming the installed file is achieved by indicating a different basename in column two.\n\n### Ignoring Files in _init\/_\n\nFinally let's say you want to skip over a file completely; do not include a destination for it, and it will be ignored, like this\n\n```text\n* ..\/..\/..\/bin\/config\/*\n_perms.custom.sh ..\/..\/..\/bin\/_perms.custom.sh\nignored_file.txt\n```\n\n### Tokens\n\nIn most cases you should consider using tokens like shown below. If you find your tokens are not get interpolated it's possible `handle_init` is getting called too early. Try moving `handle_init` to the `on_boot` event handler in your controller file to fix this. Early versions of Cloudy recommended calling that from `on_pre_config`, which does not support tokens.\n\n```text\n* $CLOUDY_BASEPATH\/.live_dev_porter\/*\nconfig.gitignore $CLOUDY_BASEPATH\/.live_dev_porter\/.gitignore\n```\n\n#### Supported Tokens\n\n1. `$CLOUDY_BASEPATH`\n\n## Special Filenames\n\n**Special files should not be listed in the files map.**\n\n### _gitignore_\n\nIf you create a file at _init\/gitignore_ (no leading dot!), it will be automatically be copied to _..\/..\/..\/opt\/.gitignore_ and merged with the existing _.gitignore_.  (This is the recommended location by Cloudy Package Manager.)"},{"id":"command","title":"The Script \"Command\"","body":"The script operation is defined as the first _argument_ passed.  In all of the following examples it is `alpha`.\n\n    .\/script.example.sh alpha bravo charlie\n    .\/script.example.sh -f alpha\n    .\/script.example.sh --test alpha -f\n\n## No Script Arguments (Default Command)\n\nIf no argument is passed then the YAML configuration file may define a default operation like this:\n\n    default_command: get\n\nIf the configuration file is as above, then these two are identical:\n\n    $ .\/script.example.sh\n    $ .\/script.example.sh get\n\n## An Assumed Command\n\nSomewhat related to the default command is `assume_command`.  It is used in a case where you want to insert (assume) a command that is not typed.  For example, if you want your users to type,  `.\/script.example.sh ` instead of `.\/script.example.sh  `, you should use `assume_command` in your config, which will cause the command to be inserted.  Any command that is registered will be respected as you would expect, but if the immediate first script argument is not registered as a command, then the `assume_command` will be used as if it had been typed.  This effectively inserts the `assume_command` value between the script name and the first argument.\n\n    assume_command get\n\nWhen configured as show above, the following are the same (so long as `file` is not registered as a command).\n\n    $ .\/script.example.sh file file2\n    $ .\/script.example.sh get file file2\n\n## API\n\n    get_command\n    get_config \"default_command\""},{"id":"options","title":"The Script \"Options\"","body":"Options are arguments passed to the script that begin with a single `-` or double `-`.  Here are some examples:\n\n        .\/script.example.sh -f -h -p\n        .\/script.example.sh -fhp\n        .\/script.example.sh --file=intro.txt --noup\n\n* Single hyphen options may only be one letter\n* They may be grouped or separate.\n* Order does not matter.\n* Double hypen options may provide values."},{"id":"arguments","title":"This script \"arguments\"","body":"Cloudy makes it easy to react to script arguments.  For example:\n\n    .\/install.sh dev install --tree=blue -abc\n\nHere we have:\n\n* The script file _install.sh_\n* The command `command=$(get_command)`, e.g. `dev`\n* One argument `arg=$(get_arg 0)`, e.g., `install`.\n* One value option, `tree`, `param=$(get_param \"tree\")`, e.g., `blue`\n* Three boolean options: `a,b,c`, `has_flag \"a\"`\n\n## Test if an option was used\n\n    has_option b && echo \"has b option\"\n\n## Access an option value\n\n    echo \"tree's value is $(get_option tree \"not set\")\""},{"id":"dev_configuration","title":"Understanding Configuration","body":"#### Serialized Configuration Files\n\n* YAML Configuration files get normalized then converted to BASH and cached.\n* This process happens early in _cloudy.core.sh_\n* Changes in the serialized files trigger an automatic flush and rebuild of the config cache.\n* Cached files are stored in `$CLOUDY_CACHE_DIR`\n\n### Cached Configuration\n\n* Relative paths are no yet resolved at this point."},{"id":"testing","title":"Unit Testing","body":"Cloudy offers a simple unit testing framework based on PhpUnit.  To see how you might implement unit tests, refer to the following files\n\n* _cloudy_tools.sh_ and find how the command `tests` is handled in `on_boot`.\n* _tests\/cloudy.tests.sh_ to see how the tests themselves are written.\n* _cloudy\/dist\/inc\/cloudy.testing.sh_ for a list of assertions.\n* It is optional to add the command to your _config.yml_ file.  It's not functionally necessary, but you might do it for documentation purposes.\n* To check if code is being run from inside a test you can use `is_being_tested`, e.g.:\n\n        is_being_tested && ...\n\n## Setup\n\nYou will want to implement the `on_boot` hook if you want to run tests.\n\n    ...\n    # Uncomment this line to enable file logging.\n    CLOUDY_LOG=\"install\/cloudy\/cache\/cloudy_installer.log\"\n\n    function on_boot() {\n        [[ \"$(get_command)\" == \"tests\" ]] || return 0\n        source \"$CLOUDY_CORE_DIR\/inc\/cloudy.testing.sh\"\n        do_tests_in \"cloudy_installer.tests.sh\"\n        do_tests_in --continue ...\n        do_tests_in --continue ...\n        exit_with_test_results\n    }\n    ...\n\n## Fixtures\n\nYou may use the following as test fixtures, i.e.,\n\n    setup_before_test\n    teardown_after_test\n\n## Unit Testing of Php\n\nA good example of how to setup unit tests for PHP classes can be found in [aklump\/website_backup](https:\/\/github.com\/aklump\/website_backup)."},{"id":"upgrade_v2","title":"Upgrade Path to Cloudy 2.0.0","body":"Developer's should follow these steps to upgrade Cloudy packages from 1.x to 2.x:\n\n1. Replace `get_config_*()` with `get_config_*_as()` functions.\n2. Replace `$SCRIPT` with `$CLOUDY_PACKAGE_CONTROLLER`\n3. Replace `$APP_ROOT` with `$CLOUDY_BASEPATH`\n5. Replace `$CLOUDY_ROOT` with `$CLOUDY_CORE_DIR`\n6. Replace `$CONFIG` with `$CLOUDY_PACKAGE_CONFIG`\n7. Replace `$LOGFILE` with `$CLOUDY_LOG`\n8. Update the bootstrap in your controllers per changelog"},{"id":"menus_input","title":"User Input and Menus","body":"## Any Keypress\n\n```bash\nwait_for_any_key\n```\n\n## Yes or No\n\n```bash\nprompt \"Export the database first?\" --caution\n```\n\n## Multiple Choice\n\n* In this example `$search` can be user input, substring of a filename to look for.\n* The options will be relative paths\n* The `filepath=` assignment converts the selection to an absolute path.\n\n```bash\nchoose__array=()\nfor i in *$search*.sql*; do\n  [[ -f \"$i\" ]] && choose__array=(\"${choose__array[@]}\" \"$i\")\ndone\nfor i in \"${export_dir%\/}\"\/*$search*.sql*; do\n  [[ -f \"$i\" ]] && choose__array=(\"${choose__array[@]}\" \"$(path_make_relative \"$i\" \"$PWD\")\")\ndone\n! shortpath=$(choose \"Choose a database export by number\") && fail_because \"Cancelled.\" && exit_with_failure\nfilepath=${PWD%\/}\/${shortpath#\/}\n\necho \"Your choice was: $filepath\"\n```"},{"id":"tempdir","title":"Using a Temporary Directory","body":"In some cases you may need to define the variable `$TMPDIR` to allow a script to work.  To do so enter something like the following to _.bash_profile_ on your server.\n\n    export TMPDIR=\"\/home\/foo\/tmp\""},{"id":"php_example","title":"Writing Cloudy PHP (Complete Example)","body":"Let's say your Cloudy app defines the command  `json-decode`. Because PHP has a native function for this we will use PHP to do the work instead of BASH.\n\nThis excerpt, taken from the _Cloudy Package Controller_, shows how to reference the PHP file that handles the `json-decode` command provided by the user.\n\n```shell\n# User input\ncommand='json-decode'\njson_user_input='{\"color\":\"red\"}'\n\n# Snippet taken from controller\ncase $command in\n    \"json-decode\")\n      . \"$PHP_FILE_RUNNER\" \"$CLOUDY_BASEPATH\/json_decode.php\" \"$json_user_input\"\n      has_failed && exit_with_failure\n      exit_with_success\n      ;;\nesac\n```\n\nHere are the contents of a PHP file, which will do the work for the command `json-decode`. Notice the use of the functions that you have been using while writing Cloudy BASH code.\n\n```php\n$result = json_decode($argv[1], JSON_PRETTY_PRINT);\nif (FALSE === $result) {\n  fail_because(\"Could not parse the provided JSON\");\n  fail_because($argv[1]);\n}\nelse {\n  echo \"The provided color is: \" . $result['color'];\n}\n```"},{"id":"php_bash_side","title":"Writing Cloudy PHP: BASH Perspective","body":"Mixing PHP with BASH using Cloudy is quite simple.\n\n## Basic PHP File Inclusion Syntax\n\n```php\n. \"$PHP_FILE_RUNNER\"\n```\n\nThe above pattern allows your PHP file to execute within the current cloudy context and configuration. Cloudy also provides [functions](@api_functions_php) in PHP you will recognize from Cloudy's [BASH API](@api_functions).\n\n## Capturing the PHP Output\n\nThis is just like you'd do sourcing a BASH file or function.\n\n```php\nphp_file_output=$(. \"$PHP_FILE_RUNNER\"  )\n```\n\n## Get the PHP File's Exit Status\n\nThe exit status of `$PHP_FILE_RUNNER` will reflect if `fail_because` was used by php_file, indicated by a 1. However, a number > 1 will result if `fail_because` was passed that number as the explicit exit status. An exit status of 0 represents success, as usual.  ** Be careful here, and make sure you read the documentation on how to trigger errors from Cloudy PHP.**\n\n```shell\n. \"$PHP_FILE_RUNNER\" file.php\nexit_status=$?\nif [[ $exit_status -ne 0 ]]; then\n  # Respond to the failure.\nfi\n```\n\nThe following can be used as an alternative to the above pattern, with the subtle difference that it will take into account the failure state, i.e. `$CLOUDY_EXIT_STATUS -ne 0`, that may have existed before file.php was run. Therefore it does not check ONLY the result of file.php, but the failure state of the entire app at that point.\n\n```shell\n. \"$PHP_FILE_RUNNER\" file.php\nif has_failed; then\n  # Respond to the failure.\nfi\n```"},{"id":"php_php_side","title":"Writing Cloudy PHP: PHP Perspective","body":"* Use [echo](https:\/\/www.php.net\/manual\/en\/function.echo.php) as you would in a BASH function or sourced file.\n* Return values are always ignored; however [return](https:\/\/www.php.net\/manual\/en\/function.return.php) may be used for early exit and\/or code flow.\n* Never use [exit](https:\/\/www.php.net\/manual\/en\/function.exit.php).\n* To indicate failure use `fail_because` or `exit_with_failure`. To set exit status pass the number to one of those functions.\n* Any exception will be automatically converted to `exit_with_failure` and the script will stop immediately.\n* The BASH parent script can be known by looking at `$PHP_FILE_RUN_CONTROLLER`\n* Never hardcode PHP into your app codebase, e.g. `php`; instead if you must point to the PHP binary then use the variable `\"$CLOUDY_PHP\"`"},{"id":"writing_scripts","title":"Writing Your First Cloudy Script","body":"Let's say you want to create a script called _imagine.sh_.\n\n## Defining Your Script's Commands\n\nTo understand how to define commands, let's look at the following example.  This is taken from the script's master configuration file.\n\n    commands:\n      mountain:\n        help: Indicate the the user wants to imagine a mountain setting.\n        aliases:\n          - mt\n        arguments:\n          mountain_name:\n            help: The name to give to the imagined item.\n            required: true\n        options:\n          peaks:\n            help: The numbe of peaks.\n            aliases:\n              - p\n            type: integer\n\nLet's break the above down into parts, but first take note that it is not enough merely to define your commands in configuration, you have to handle each command in _imagine.sh_ as well, e.g.,\n\n    if [[ \"$(get_command)\" == \"mountain\" ]]; then ...\n\n... or with a case statment, e.g.,\n\n    case $(get_command) in\n      \"mountain\")\n        ...\n      ;;\n\nBack to the configuration...\n\n### Indicate the command name\n\nThe most basic definition consists fo a command and a help topic:\n\n    commands:\n      mountain:\n        help: Install a Cloudy package from the Cloudy Package Registry.\n\nIf this was all that was defined in the configuration, users would only be able to enter:\n\n    .\/imagine.sh mountain\n\n### Indicate command aliases\n\nBy adding one or more command aliases, you give the user options, usually for brevity in typing.\n\n    commands:\n      mountain:\n        help: Indicate the the user wants to imagine a mountain setting.\n        aliases:\n          - mt\n\nWith this configuration the user can enter either of these two and get the same effect.\n\n    .\/imagine.sh mountain\n    .\/imagine.sh mt\n\n### Indicate command arguments\n\nLet's say you want to collect a mountain name, you would indicate a command argument ``.\n\n    commands:\n      mountain:\n        ...\n        arguments:\n          mountain_name:\n            help: The name to give to the imagined mountain.\n\nNow the user may enter any of the following, however the user who provides the mountain name will have a different response--presumably--than the one who omits it.\n\n    .\/imagine.sh mountain\n    .\/imagine.sh mt\n    .\/imagine.sh mountain Everest\n    .\/imagine.sh mt Everest\n\n#### Make an argument required\n\nBut what if the name is to be requried?\n\n    commands:\n      mountain:\n        ...\n        arguments:\n          mountain_name:\n            ...\n            required: true\n\nNow the user can no longer omit the `` argument.\n\n### Indicate command options\n\n    commands:\n      mountain:\n        ...\n        options:\n          peaks:\n            help: The numbe of peaks.\n            aliases:\n              - p\n            type: integer\n          yes:\n            help: Answer yes to all questions.\n            aliases:\n              - y\n            type: boolean\n\nThe user will now be entering any of the following:\n\n    .\/imagine.sh mt \"Three Sisters\" --peaks=3\n    .\/imagine.sh mt \"Three Sisters\" -p=3\n    .\/imagine.sh mt \"Three Sisters\" --yes -p=3\n    .\/imagine.sh mt \"Three Sisters\" -y -p=3"},{"id":"yaml","title":"YAML in BASH","body":"There are some helper functions to facilitate JSON and YAML data manipulation.  Here is some real-world code to illustrate this:\n\n    # Begin a new YAML string.\n    yaml_clear\n\n    # Add a root-level value.\n    yaml_add_line \"base_url: $base_url\"\n\n    # Begin a new hash\/array.\n    yaml_add_line \"results:\"\n    for path in \"${pages[@]}\"; do\n\n      # Notice the indent on this hash key.\n      yaml_add_line \"  \\\"$path\\\":\"\n      for (( i = 0; i < 5; ++i )); do\n        time=$(curl -w '%{time_total}' -o \/dev\/null -s ${base_url%\/}\/${path%\/} -L)\n\n        # Add a hash element, notice the double indent.\n        yaml_add_line \"    - $time\"\n      done\n    done\n\n    # Send the YAML off to be processed by PHP, but first convert it to JSON for\n    # easier PHP consumption.  functions\/invoke.php will process the raw json and add\n    # some values to it and echo augmented JSON string which we can then do\n    # something with...\n    processed_json=$(. \"$PHP_FILE_RUNNER\" \"$ROOT\/functions\/invoke.php\" \"$(yaml_get_json)\") || fail_because \"Could not process raw results.\"\n\n    ..."}]