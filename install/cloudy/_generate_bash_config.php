#!/usr/bin/php
<?php

/**
 * @file
 * Write a bash config file based on JSON.
 */

define('CONFIG_PREFIX', 'cloudy_config');

require_once dirname(__FILE__) . '/_bootstrap.php';

/**
 * Convert a multidimensional data array into BASH declarations.
 *
 * @param mixed $value
 *   The starting data array or final value.
 * @param array $context
 *   Has the following keys:
 *   - stack array
 *     This can be seeded with elements returned in the final array.
 *
 * @return array
 *   A single dimension array of BASH declarations representing the variables.
 */
function flatten($value, array &$context = []) {

  // Setup defaults.
  $context += ['parents' => [], 'stack' => []];
  $var_name = get_var_name($context['parents'], CONFIG_PREFIX);

  // Define the reason for stopping recursion and return.
  if (!is_array($value)) {
    $context['stack'][] = _cloudy_declare_bash_variable($var_name, $value);

    return $context['stack'];
  }

  // Generate the keys.
  $keys_var_name = get_var_name($context['parents'], CONFIG_PREFIX . '_keys');

  if (is_numeric(key($value))) {
    $context['stack'][] = _cloudy_declare_bash_variable($var_name, array_values($value));
  }
  $context['stack'][] = _cloudy_declare_bash_variable($keys_var_name, array_keys($value));

  // Otherwise recurse.
  foreach ($value as $k => $v) {
    $context['parents'][] = $k;
    flatten($v, $context);
    array_pop($context['parents']);
  }

  return $context['stack'];
}

/**
 * Generate a BASH variable name.
 *
 * @param array $parents
 *   Usually this is $context['parents'].
 * @param string ...
 *   Additional elements to merge into the key.
 *
 * @return string
 *   A stack key variable name.
 */
function get_var_name(array $parents, $prefix) {
  $args = func_get_args();
  $array = array_shift($args);
  $prefix = array_shift($args);
  if (count($args)) {
    $array = array_merge($array, $args);
  }
  array_unshift($array, $prefix);

  return ltrim(implode('___', $array));
}

try {
  $json = $g->get($argv, 2, '{}');
  if (empty($json)) {
    throw new \RuntimeException("JSON is empty; cannot parse an empty configuration string.");
  }
  $data = json_decode($json, TRUE);
  if ($data === NULL) {
    throw new \RuntimeException("Invalid JSON: \"$json\"");
  }

  $context = ['stack' => []];
  $context['stack'][] = "#!/usr/bin/env bash\n";
  $context['stack'][] = "#\n# @file\n# Autogenerated configuration; DO NOT EDIT.\n#\n";
  $stack = flatten($data, $context);
  echo implode(PHP_EOL, $stack);
  exit(0);

}
catch (\Exception $exception) {
  echo __FILE__ . '|' . $exception->getMessage();
}

exit(1);
