var lunrIndex = [{"id":"empty_config","title":"`$CLOUDY_CONFIG_JSON cannot be empty...`","body":"This could mean the Composer dependencies are missing, check your PHP error log for more info. Try `composer install` to replace missing dependencies."},{"id":"app_root","title":"Application Root","body":"The application root is by default the same as `$ROOT`, which is the directory containing your cloudy entry script file.  However you may want to alter that by the use of `config_path_base` to point to a higher directory, such as the case with [Cloudy Packages](@packages).\n\n`$APP_ROOT` should point to the most logical top-level directory in the context where the cloudy script is used.\n\n## What does it do?\n\n* Relative paths read in with `get_config_path` are made absolute using `$APP_ROOT`.\n* Paths shortened via `path_shorten` use `$APP_ROOT` as the basis for prefix removal."},{"id":"arrays","title":"Arrays","body":"## How to copy an array\n\n    new_array=(\"${old_array[@]}\")\n\nThis comes in to play after array-based functions like `string_split`\n\n    string_split__string=\"doremi\"\n    string_split '' && local words=(\"${string_split__array}\")\n\n## How to copy and array with dynamic name\n\n    eval copy=(\\\"\\${$master[@]}\\\")\n\n## How to shift\n\n```bash\n$ a=(a b c d e)\n$ a=(\"${a[@]:1}\")\n$ echo \"${a[@]}\"\nb c d e\n```\n\n## How to pop\n\n```bash\na=(\"${a[@]:0:${#a[@]} - 1}\"\n```\n\n## Convert to CSV String\n\n```shell\ndeclare -a array=('value1' 'value2');\ncsv=$(printf \"%s,\" \"${array[@]}\")\ncsv=${csv%,}\n```\n\n## Create a Unique Values, Sorted Array\n\n```shell\ndeclare -a array=('foo' 'bar' 'foo');\nfoo=($(echo \"$(printf \"%s\\n\" \"${array[@]}\")\" | sort -u))\n```\n\n## Get all directories as an array\n\n```shell\n  FILES=()\n  for i in $(cd $DIR && find . -maxdepth 1 -type d -name '*.sql*'); do\n     [[ \"$i\" != '.' ]] && FILES=(\"${FILES[@]}\" \"$(basename \"$i\")\")\n  done\n```"},{"id":"composer","title":"Building a Cloudy-based App w\/ Composer","body":"By default Cloudy handles it's own PHP dependencies internally using Composer; however it includes the vendor directory in the codebase so that one using the framework need not think about Composer at all.\n\nThis strategy becomes unnecessary and possibly confusing if the app you are building will also manage dependencies using Composer. When this is the case you should make the following modifications to consolidate the dependencies into a single _vendor\/_ directory and follow Composer best-practices by excluding the vendor directory from your app's code repository.\n\n## Tell Composer About Cloudy\n\n1. Add a repository reference to Cloudy in your application's _composer.json_...\n\n   ```php\n   \"repositories\": [\n      {\n         \"type\": \"path\",\n         \"url\": \".\/cloudy\/\"\n\n   ],\n   ```\n1. ... then tell Composer where to find Cloudy: `composer require aklump\/cloudy`.\n1. Delete `cloudy\/vendor` and `cloudy\/composer.lock`; these will no longer be used...\n1. ... and just to be sure, set those same files to be ignored by source control, e.g.,\n\n   ```gitignore\n   \/cloudy\/vendor\/\n   \/cloudy\/composer.lock\n   ```\n\n## Tell Cloudy About Composer\n\n1. Let's say your Cloudy-based controller is called _foo.sh_.\n1. Open _foo.sh_ and add the path (relative to _foo.sh_) to the vendor directory as `COMPOSER_VENDOR`. See _script.example.sh_ for code example."},{"id":"readme","title":"Cloudy","body":"![cloudy](..\/..\/images\/screenshot.jpg)\n\n## Summary\n\nA BASH framework, which uses YAML or JSON for your script's configuration and provides a unit testing framework.\n\nCloudy Boosts the following features:\n\n* Clean configuration options (YAML, JSON) for your scripts\n* A BASH Unit Testing framework inspired by [PHPUnit](https:\/\/phpunit.de)\n* Auto-generated help output\n* Support for multilingual localization\n\n**Visit  for full documentation.**\n\n## Quick Start\n\nAfter installing Cloudy, to write a new script called _thunder.sh_ ...\n\n1. `cd` to the directory where you want the script to be created.\n1. Type `cloudy new thunder.sh` and the necessary files\/directories will be created in the current directory.\n1. Open _thunder.sh_, enable logging, and write your code.\n1. Open _thunder.yml_ and add some configuration.\n1. To learn about the options to use with `new` type `cloudy help new`.\n1. Refer to [the documentation](https:\/\/aklump.github.io\/cloudy\/README.html) for to learn more.\n\n### Using JSON\n\n1. To work with JSON configuration instead type `cloudy new thunder.sh --json`.\n\n### Source Control\n\n1. You may omit the cloudy framework from your repository with something like the following, then use `cloudy install` to put the files in place when necessary.\n\n```gitignore\ncloudy\/**\n!cloudy\/version.sh\n```\n\n## Requirements\n\n* Works with BASH 3\n* PHP (Used invisibly on the backend for configuration processing; no PHP knowledge is required to use Cloudy.)\n\n## Contributing\n\nIf you find this project useful... please consider [making a donation](https:\/\/www.paypal.com\/cgi-bin\/webscr?cmd=_s-xclick&hosted_button_id=4E5KZHDQCEUV8&item_name=Gratitude%20for%20aklump%2Fcloudy).\n\n## Installation\n\nInstallation means downloading this repository to your system. It contains _cloudy_tools.sh_ which is used to generate new scripts, as well as the cloudy framework. It is a Cloudy script.\n\nHere is a snippet to clone this repo to a directory on your system _$HOME\/opt\/cloudy_ and create a symlink in _$HOME\/bin\/cloudy_. This assumes _~\/bin_ is in your `$PATH` variable.\n\n    (cd $HOME && (test -d opt || mkdir opt) && (test -d bin || mkdir bin) && cd opt && (test -d cloudy || git clone https:\/\/github.com\/aklump\/cloudy.git) && (test -s $HOME\/bin\/cloudy || ln -s $HOME\/opt\/cloudy\/cloudy_installer.sh $HOME\/bin\/cloudy)) && cloudy\n\nOn success you should see something resembling the following:\n\n![Successful installation](..\/..\/images\/installed.jpg)\n\n## Usage\n\nBeyond the [internal variables](https:\/\/www.tldp.org\/LDP\/abs\/html\/internalvariables.html#BASHSUBSHELLREF) the following variables are made available by Cloudy.\n\n| varname        | description                                                                 |\n|----------------|-----------------------------------------------------------------------------|\n| `$CLOUDY_NAME` | Machine name of your script.                                                |\n| `$ROOT`        | The directory containing your script.                                       |\n| `$APP_ROOT`    | All relative configuration files use this as base.  [Learn more](@app_root) |\n| `$SCRIPT`      | Absolute path to your script.                                               |\n| `$CONFIG`      | Absolute path to the base config file.                                      |\n| `$WDIR`        | The working directory when script was initiated.                            |\n| `$LOGFILE`     | Absolute path to a log file, if enabled.                                    |\n\n* Determine your version of BASH with `echo $BASH_VERSION`\n\n## Learn More\n\n* Learn more about BASH with the [Advanced Bash-Scripting Guide](https:\/\/www.tldp.org\/LDP\/abs\/html\/).\n* Checkout [The Bash Guide](https:\/\/guide.bash.academy\/) by Maarten Billemont."},{"id":"api","title":"Cloudy API","body":"Cloudy Functions\n\nCloudy Test Functions\nThe following functions available with:\n\n    assert_contains\n    assert_count\n    assert_empty\n    assert_equals\n    assert_exit_status\n    assert_false\n    assert_file_exists\n    assert_file_not_exists\n    assert_greater_than\n    assert_internal_type\n    assert_less_than\n    assert_not_contains\n    assert_not_empty\n    assert_not_equals\n    assert_not_internal_type\n    assert_reg_exp\n    assert_same\n    assert_true\n    create_test_sandbox\n    delete_test_sandbox\n    do_tests_in\n    exit_with_test_results\n    is_being_tested\n    mark_test_skipped\n    test_fail_because\n\nFunctions In Depth By Name\n\n    assert_contains()\n    Assert that an array contains a value.\n\n          Arguments:\n              $1: The value to search for.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_count()\n    Assert that an array has a given number of elements.\n\n          Arguments:\n              $1: The expected length.\n              $2: The name of a global array.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_empty()\n    Assert that variable by name is empty.\n\n          Arguments:\n              $1: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_equals()\n    Assert that two values are equal in value but not necessarily type.\n\n          Arguments:\n              $1: The expected value.\n              $2: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_exit_status()\n    Assert a function returns a given exit code.\n\n          Arguments:\n              $:\n\n    assert_false()\n    Assert that a value equals &quot;false&quot; or &quot;FALSE&quot;.\n\n          Arguments:\n              $1: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_file_exists()\n    Assert that a file exists by path.\n\n          Arguments:\n              $1: The filepath of the expected file.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_file_not_exists()\n    Assert that a file does not exist at path.\n\n          Arguments:\n              $1: The filepath to ensure does not exist.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_greater_than()\n    Asset one number is greater than another.\n\n          Arguments:\n              $1: The target value.\n              $2: The number than should be greater than the target.\n                          Returns 0 if  $2 is &gt; $1\n\n    assert_internal_type()\n    Assert that an global variable is of a given type.\n\n          Arguments:\n              $1: The expected type.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_less_than()\n    Asset one number is less than another.\n\n          Arguments:\n              $1: The target value.\n              $2: The number than should be less than the target.\n                          Returns 0 if  $2 is &lt; $1\n\n    assert_not_contains()\n    Assert that an array does not contain a value.\n\n          Arguments:\n              $1: The value to search for.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_not_empty()\n    Assert that variable by name is not empty.\n\n          Arguments:\n              $1: The actual value\n              $2: A custom message on failure.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_not_equals()\n    Assert that two values are not the same.\n\n          Arguments:\n              $1: The expected value.\n              $2: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_not_internal_type()\n    Assert that an global variable is not of a given type.\n\n          Arguments:\n              $1: The expected type.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_reg_exp()\n    Assert that a value matches a regular expression.\n\n          Arguments:\n              $1: The regular expression.\n              $2: The value to match against the regexp.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_same()\n    Assert that two values are equal and of the same type.\n\n          Arguments:\n              $1: The expected value.\n              $2: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    assert_true()\n    Assert that a value equals &quot;true&quot; or &quot;TRUE&quot;.\n\n          Arguments:\n              $1: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n\n    create_test_sandbox()\n    Create a sandbox for testing.\n\n    delete_test_sandbox()\n    Remove the sandboxed variables.\n\n    do_tests_in()\n    Perform all tests in a file.\n\n          Arguments:\n              $1: The path to a test file.\n                          Returns 0 if all tests pass; 1 otherwise.\n\n    exit_with_test_results()\n    Echo test results and exit.\n\n    is_being_tested()\n    Determine if code is being run from inside a test.\n\n    mark_test_skipped()\n    Mark a single test as skipped\n\n    test_fail_because()\n    Add a failure message to be shown on exit.\n\n          Arguments:\n              $1: string The reason for the failure.\n              $2: string A default value if $1 is empty.\n                          Returns 1 if both $message and $default are empty."},{"id":"changelog","title":"Cloudy Changelog","body":"## [Unreleased]\n\n## [1.7.1] - 2024-05-08\n\n### Fixed\n\n- Swapped hardcoded `php` for `$CLOUDY_PHP`\n\n## [1.7.0] - 2024-05-07\n\n### Added\n\n- Add functionality to read PHP override from local config in Cloudy. See docs for code examples.\n\n## [1.6.0] - 2024-05-07\n\n### Added\n\n- The initialization API now supports directories as well as files.\n\n## [1.5.16] - 2024-03-14\n\n### Fixed\n\n- Bug with JSON methods when JSON contains unescaped single quotes.\n\n## [1.5.5] - 2023-09-21\n\n### Changed\n\n- Split _cloudy.sh_ into _inc\/cloudy.api.sh_ and _cloudy.sh_ to allow cherry-picking the api functions without bootstrapping the app.\n\n## [1.5] - 2023-04-25\n\n### Changed\n\n- POTENTIAL BREAKING CHANGES: The return value for fail_because(), warn_because(), and succeed_because() is now always `0`. Previously it was `1` if the message was empty AND the default was empty.\n\n## [1.4.9] - 2022-12-07\n\n### Fixed\n\n- If you see an error like \"line 833: cd: ... cloudy\/framework\/cloudy: No such file or directory\", try adding `COMPOSER_VENDOR=\"\"` to the top of your script file, e.g. _framework\/script.sh_.\n\n## [1.4.0] - 2022-07-19\n\n### Added\n\n- Added functions `echo_task`, `clear_task`, `echo_task_completed`, `echo_task_failed`, `choose`\n- Configurable Composer vendor direct using `$COMPOSER_VENDOR`\n- Added `$CLOUDY_CONFIG_HAS_CHANGED` which will be `true` if the configuration was rebuilt during boot.\n- Other small improvements and bug fixes.\n\n### Changed\n\n- Moved Composer vendor directory from _framework\/cloudy\/php\/vendor_ to _framework\/cloudy\/vendor_.\n\n## [1.3.7] - 2022-05-02\n\n### Added\n\n- `array_dedupe` function\n\n### Fixed\n\n- `assert_contains` and `assert_not_contains` with space-containing values now works.\n\n## [1.3.6] - 2021-09-17\n\n### Changed\n\n- Configuration merge algorithm to address deep merge problem.\n\n## [1.3.0] - 2021-09-11\n\n### Fixed\n\n- _.gitignore_ no longer includes duplicate lines when updating a cloudy package.\n\n### Added\n\n- `json_set`, `json_load_file`, `json_get_value` and `json_get` for easily working with JSON.\n- `echo_pass` and `echo_fail` for a consistent in test scenarios.\n- A pattern for writing command access to the documentation.\n\n### Deprecated\n\n- `--as=ALIAS` flag has been deprecated in `exit_with_failure_if_empty_config` and `exit_with_failure_if_config_is_not_path`. Replace `exit_with_failure_if_empty_config \"database.host\" --as=host` with `exit_with_failure_if_empty_config \"host\" \"database.host\"` to switch to the new syntax. This was done to match `get_config_as` and `get_config` argument patterns.\n\n## [1.2.0] - 2019-12-16\n\n### Added\n\n- md5_string function\n\n### Changed\n\n* Changed internal variable names, which should not affect your scripts.\n    * `CLOUDY_OPTION__*` are now hashed variable names.\n    * Configuration cached variable names now use hashes rather than plain config keys.\n\n### Fixed\n\n* Config variable problems with special characters.\n\n## [1.1.0] - 2019-07-13\n\n### Fixed\n\nA bug when using `additional_config` together with `config_path_base`. The issue was that `additional_config` should have been relative to `config_path_base`, however it was not working correctly. After you update to 1.1.0 your app will be broken. To fix this you will need to remove the value of `config_path_base` from each of the items in `additional_config`. As an example, if before this update, your configuration was:\n\n    config_path_base: ..\/..\/..\n    additional_config:\n      - ..\/..\/..\/bin\/config\/website_benchmark.yml\n\nYour configuration should now look like this:\n\n    config_path_base: ..\/..\/..\n    additional_config:\n      - bin\/config\/website_benchmark.yml\n\n## [1.0.6]\n\n### Changed\n\n* Renamed `$parse_args__option__*` to `parse_args__options__*`."},{"id":"conventions","title":"Cloudy Conventions","body":"_Cloudy_ has some opinions about how to write code, this page reveals them.\n\n## General\n\n* Functions that begin with `_cloudy` should be considered private and never called by your script.  They may change in future versions.\n* All functions listed in _cloudy.sh_ comprise the public API and will not change across minor version changes.\n\n## Naming\n\n* Function names should be readable and intuitive, e.g., `exit_with_success` is better than `success_exit`\n* Function names should start with a verb if applicable, unless they are grouped by category, e.g. `array_join` is fine because _stack_ is the common group; `join` is the verb.\n\n## Boolean\n\nEven though BASH doesn't distinguish between (bool) \"true\" and (string) \"true\", you should indicate your intention by not using quotes for boolean value.\n\n    my_var=true\n    my_var=false\n\nDo not do the following when your intention is boolean:\n\n    my_var=\"true\"\n    my_var=\"false\"\n\nLikewise to test for `true` do like this, which again, omits any quotes around `true`.\n\n    [[ \"$my_var\" = true ]]\n\n## Functions\n\n* For getters when echoing a _default value_, return 2\n\n### Functions that operate on arrays\n\nWhen a function needs to manipulate an array, the array should be assigned to a global variable, the name of which is the function with `__array` added to the end, e.g.,\n\n    function array_join() {\n        local glue=$1\n        local string\n        string=$(printf \"%s$glue\" \"${array_join__array[@]}\") && string=${string%$glue} || return 1\n        echo $string\n        return 0\n    }\n\nAnd here is the usage\n\n    array_join__array=(\"${_config_values[@]}\")\n    local options=\"-$(array_join \", -\"), --${option}\"\n\nHowever, if a single function operates on more than one array, then the suffix should be modified as necessary.  Look at `_cloudy_parse_option_arguments` for a good example.  You still want the suffix to begin with two underscores.\n\n### Functions that return an array\nThe same naming conventions apply, if the function has to \"return\" an array, which, in BASH means it _sets_ or _mutates_ a global array.\n\nBeware of a scope issue for functions that use `eval` to set or mutate.  This first example does not work, because `eval` doesn't affect the value of a global variable, even if said variable was already defined outside of the function.  My understanding is that  `eval` creates [local variables by definition](https:\/\/stackoverflow.com\/questions\/40079054\/eval-variable-assignment-in-a-bash-function-causes-variable-to-be-local) when called within a function.\n\n    function array_sort_by_item_length() {\n        local eval=$(\"$CLOUDY_PHP\" \"$CLOUDY_ROOT\/php\/helpers.php\" \"array_sort_by_item_length\" \"${array_sort_by_item_length__array[@]}\")\n\n        # note: [ $eval = 'declare -a array_sort_by_item_length__array=(\"on\" \"five\" \"three\" \"september\")' ]\n        # Notice the eval code aims to mutate $array_sort_by_item_length__array\n        # Even though $array_sort_by_item_length__array was already global, the eval doesn't not mutate the global value.\n\n        eval $eval\n        ...\n    }\n\nHere is the fix to make it work:\n\n    function array_sort_by_item_length() {\n        local eval=$(\"$CLOUDY_PHP\" \"$CLOUDY_ROOT\/php\/helpers.php\" \"array_sort_by_item_length\" \"${array_sort_by_item_length__array[@]}\")\n\n        eval $eval\n\n        # note: [ $eval = 'declare -a sorted=(\"on\" \"five\" \"three\" \"september\")' ]\n        # It's the following assignment here that makes it work.\n        array_sort_by_item_length__array=(\"${sorted[@]}\")\n\n        ...\n    }\n\n### Name your function arguments\n\nTo make your code more readible, the first line(s) of a function should name the function arguments.  Declare them as `local`.  Then follow with a blank space, after which you begin the process of the function.\n\n    function get_config() {\n        local config_key_path=\"$1\"\n        local default_value=\"$2\"\n\n        # Now do the function stuff...\n\n### Next, declare local variables just below that\n\nGroup all local variable names below arguments and declare them there rather than deeper in the function where they are used.  Even if no default values, declare them here anyway.\n\n    function get_config() {\n        local config_key_path=$1\n        local default_value=\"$2\"\n\n        local name\n        local type=\"string\"\n\n        ..."},{"id":"packages","title":"Cloudy Packages","body":"Cloudy packages are modular scripts that are meant to share a single cloudy instance across all of them.  There is a defined directory structure that must be followed for this to work.\n\n## Create a package info file\n\n    name: aklump\/perms\n    clone_from: https:\/\/github.com\/aklump\/website-perms\n    entry_script: perms.sh\n    entry_symlink: perms\n    on_install: init\n    on_update: update\n\n1. Create a file, convention names it _cloudypm.yml_.\n1. The name must follow `vendor\/name` format.\n1. The schema of the file can be seen [here](https:\/\/github.com\/aklump\/cloudy\/blob\/master\/framework\/cloudy\/cloudypm_info.schema.json).\n1. The `on_*` are commands that will be fired at the end of that event.  They are optional.\n1. `entry_symlink` is optional and can be used to indicate a symlink value other than the filename of `entry_script` without extension.  In the above example `entry_symlink` is shown only for illustration.  The default value if it was omitted is `perms`.\n\n## Add Package to the Registry\n\n1. The registry file is located [here](https:\/\/github.com\/aklump\/cloudy\/blob\/master\/cloudy_package_registry.txt).\n1. Add the _vendor\/name_ and _a link to cloudypm.yml or cloudypm.json_ for your package.  These must be separated by a single space, e.g.\n\n        aklump\/perms https:\/\/raw.githubusercontent.com\/aklump\/website-perms\/master\/cloudypm.yml?token=AAZ_CajHqKkAfvJNQT5WKrtqwcYZivzGks5btjkEwA%3D%3D\n\n1. You do this by cloning and creating a pull request with your addition."},{"id":"route_access","title":"Command Access","body":"This describes a pattern for controlling command access.\n\nCreate a method such as this:\n\n```shell\nfunction implement_route_access() {\n  command=$(get_command)\n  eval $(get_config_as 'allowed_routes' \"commands.$command.access_by_env\")\n  [[ \"\" == \"$allowed_routes\" ]] && return 0\n\n  local csv\n  for i in \"${allowed_routes[@]}\"; do\n     [ \"$i\" == \"$LOCAL_ENV_ID\" ] && return 0\n     eval $(get_config_as env_alias \"environments.$i.id\")\n     csv=\"$csv, \\\"$env_alias\\\"\"\n  done\n\n  fail_because \"\\\"$command\\\" can be used only in ${csv#, } environments.\"\n  fail_because \"Current environment is \\\"$LOCAL_ENV\\\".\"\n  exit_with_failure \"Command not allowed\"\n}\n```\n\nAdd to your configuration, e.g.,\n\n```yaml\ncommands:\n  fetch:\n    access_by_env:\n      - dev\n      - staging\n    help: 'Fetch remote assets to local.'\n    ...\n```\n\nCall the function before your command switch:\n\n```bash\n...\nimplement_cloudy_basic\nimplement_route_access\n\n# Handle other commands.\ncommand=$(get_command)\ncase $command in\n...\n```"},{"id":"autoloader","title":"Composer autoloader not found","body":"To fix this for a Cloudy PM app, do the following in it's controller.\n\n1. Change to `COMPOSER_VENDOR=\"..\/..\/cloudy\/cloudy\/vendor\"`"},{"id":"configuration","title":"Configuration","body":"## Overview\n\nConfiguration files are YAML or JSON.  They are connected to your script in one, two, or three ways.\n\n1. The main configuration file is required and is hardcoded in your script as `$CONFIG`.\n1. Within that file, you may indicate additional configuration files using the key `additional_config`, which defines an array.  Be aware that these paths are relative to `config_path_base`, see below for more info.\n1. Finally, configuration files may be provided dynamically at run time listening to the event `compile_config`.\n\nIf configuration values conflict, those that came later will take prescendence; note: arrays will be merged.\n\n## In Depth\n\nThe following examples will be shown with YAML.\n\nIn the header of your script you will find `$CONFIG`, this is for the base configuration file, e.g.,\n\n        CONFIG=script.example.yml\n\n1. Set it's value to the path of a supported file to use as configuration, absolute paths must begin with a forward slash, otherwise the path will be taken relative to the directory containing the script, i.e., `$(dirname your_cloudy_script.sh)`\n1. You may add additional configuration files by adding something like following in the YAML of the base configuration file.  Notice the use of `~` to reference the user's home directory; this is a nice way to allow per-user configuration overrides.  Additional configuration files are optional and will only be included if they exist.\n\n        additional_config:\n          - _install.local.yml\n          - ~\/.my_project.yml\n\n1. Thirdly, you may provide configuration paths at run-time:\n\n        function on_compile_config() {\n            echo \"some\/other\/config.yml\"\n        }\n\n1. You may have any number of configuration files.\n1. Consider limited file permissions on your configuration files; e.g. `chmod go-rwx`.\n\n## Using Config\n\n### Scalars\n\nTo get a configuration value you will use the `get_config` function.  The following example is the contents of an imaginary _config.yml_:\n\n    perms:\n      user: aklump\n      group: apache\n      files: 640\n      directories: 750\n\nTo access the perms `group` scalar value do one of the following:\n\n    eval $(get_config \"perms.group\" \"staff\")\n    # [ perms_group = 'apache' ]\n\n* Notice the dot separation to denote parent\/child.\n* The second argument is a default value, e.g., `staff`.\n\nYou can also assign to a different variable like this:\n\n    eval $(get_config_as \"group\" \"perms.group\" \"staff\")\n    # [ group = 'apache' ]\n\n### Arrays\n\nArrays are handled differntly depending upon a few things: if the config key points to a multi-dimensional array, an single-level associative array, or an single-level indexed array.  For examples turn to the following configuration YAML:\n\n    user:\n      images:\n        tags:\n        - nature\n        - space\n        - religion\n        types:\n        - jpg\n        - png\n\nLet's see what `$(get_config -a 'user.images.tags')` returns us:\n\nWhen the config key points to an array `get_config` echos a string ready for `eval`, which generates a nice set of BASH vars containing the values of `perms`, e.g.,\n\n    eval $(get_config perms)\n    echo $perms_user\n    echo $perms_group\n    echo $perms_files\n    echo $perms_directories\n\nHere's how to locate a value key.\n```bash\neval $(get_config_keys_as 'keys' \"items\")\nfor key in \"${keys[@]}\"; do\n  eval $(get_config_as -a 'label' \"items.${key}.label\")\ndone\n```\n\n### Non-Scalars Keys\n\nIn a more complex configuration like the following, you might want to get the array keys, in this case all the \"operations\"; do so with `get_config`.  Our example will echo a string like this: `declare -a config_keys=(\"help\" \"new\")`\n\n    commands:\n      help:\n        help: Display this help screen\n      new:\n        help: Create new Cloudy script file in the current directory\n        options:\n          config:\n            help: Set the basename of the config file.\n          force:\n            aliases: [f]\n            help: Force the overwrite of an existin file.\n\nThis is a usage example:\n\n    eval $(get_config_keys \"commands\")\n\n    ${config_keys[0]} == \"_default\"\n    ${config_keys[1]} == \"help\"\n    ${config_keys[2]} == \"new\"\n\n### Filepaths\n\nConfiguration values which are filepaths can be added to the YAML as relative paths:\n\n    webroot: ..\/web\n    path_to_binaries: .\n    public_files: ..\/web\/sites\/default\/files\n\nThen when you access the configuration use `get_config_path`, e.g.,\n\n    eval $(get_config_path \"webroot\")\n\nThe value of `$webroot` will be an an absolute filepath.\n\n#### How are relative filepaths made absolute?\n\n1. By default `$ROOT` is used as the basepath, which is the directory that contains your Cloudy script.\n1. You can alter this behavior by setting the configuration variable as `config_path_base` with a value, which is either an absolute path, or a relative path, relative to `$ROOT`.  Both of the following are valid values:\n\n        # relative to $ROOT\n        config_path_base: ..\/..\/..\n\n        # or using an absolute path...\n        config_path_base: \/Users\/aklump\/config\n\n#### Pro Tip: Prefix Your Paths Array\n\nThis example shows how you can get your files array with dynamic prefixes when necessary.\n\n```shell\nfunction _get_ignore_paths() {\n  local snippet=$(get_config_as -a 'ignore_paths' 'pantheon.files.ignore')\n  local find=']=\"'\n\n  echo \"${snippet\/\/$find\/$find$CONFIG_DIR\/fetch\/$ENV\/files\/}\"\n}\n\nfunction plugin_init() {\n    eval $(_get_ignore_paths)\n\n    for path in \"${ignore_paths[@]}\"; do\n      if [ ! -f \"$path\" ]; then\n        touch \"$path\"\n        succeed_because \"Created: $path\"\n      fi\n    done\n}\n```\n\n#### Pro Tip\n\nIf you put a stack of paths under a single key, like so:\n\n    files:\n    - webroot: ..\/web\n    - bin: .\n    - public: ..\/web\/sites\/default\/files\n\nYou can import all of them with one line like this:\n\n    eval $(get_config_path \"files\")\n\nAnd you will have access to:\n\n    $files_webroot\n    $files_bin\n    $files_public\n\nIf the yaml is an indexed array like so:\n\n    files:\n    - ..\/web\n    - .\n    - ..\/web\/sites\/default\/files\n\nYou have one extra step of variable assignment.\n\n    eval $(get_config_path \"writeable_directories\")\n    writeable_directories=($_config_values[@]})\n\n## Detecting Config Changes\n\nThe variable `$CLOUDY_CONFIG_HAS_CHANGED` will be set to `true` if the configuration was rebuilt on a given execution.  This happens the first time the script is executed after a cache clear.  Otherwise it's value will be `false`.  The variable is available as early as the `boot` event.\n\nUse this variable to rebuild configuration when necessary:\n\n```shell\nif [[ \"$CLOUDY_CONFIG_HAS_CHANGED\" == true ]]; then\n  # TODO rebuild my dependent configuration.\nfi\n```"},{"id":"development","title":"Development Tools","body":"## How to use `debug`\n\nThis function has nothing to do with step debugging, however it gives you a consistent means to see where something happened and what a value is at a given point in the code\n\n### Example One\n\n    debug \"Stopping at this point;$0;$FUNCNAME;$LINENO\"\n\nThis will give you a nice output like this:\n\n![Debug example 1](..\/..\/images\/debug-1.jpg)\n\nOr if called from within a function:\n\n    function my_function() {\n        debug \"Stopping at this point;$0;$FUNCNAME;$LINENO\"\n    }\n\n![Debug example 4](..\/..\/images\/debug-4.jpg)\n\n* Even if not calling within a function you may pass `$FUNCNAME` as shown in both cases, and it will simply be ignored if irrelevent.\n\n### Example Two\n\nThis example shows how to create a label.  By separating your message and label with a single semi-colon, you will get this type of result.  Notice the `$` is escaped as we want a literal dollar-sign in the label.\n\n     debug \"$WDIR;\\$WDIR\"\n\n![Debug example 2](..\/..\/images\/debug-2.jpg)\n\n### Example Three\n\nThis will just give you a quick message with default label:\n\n    debug \"Quick message\"\n\n![Debug example 3](..\/..\/images\/debug-3.jpg)\n\n## Stop execution with `throw`\n\nSimilar to `debug`, yet it stops execution immediately with an exit code of 3.\n\n    throw \"Aborting at this point;$0;$FUNCNAME;$LINENO\"\n\n![Throw example](..\/..\/images\/throw.jpg)"},{"id":"documenting","title":"Documenting Code","body":"Cloudy scripts should include function documentation per [TomDoc](http:\/\/tomdoc.org) syntax.\n\nDocumentation can be extracted using [tomdoc.sh](https:\/\/github.com\/tests-always-included\/tomdoc.sh)\n\nHere is an example docblock.\n\n    # Prompt for a Y or N confirmation.\n    #\n    # $1 - The confirmation message\n    # --caution - Use when answering Y requires caution.\n    # --danger - Use when answering Y is a dangerous thing.\n    #\n    # Returns 0 if the user answers Y; 1 if not.\n    function confirm() {\n        local message=\"$1\"\n        ..."},{"id":"events","title":"Events (Hooks)","body":"* Event handlers are functions that must be defined before the Cloudy bootstrap.\n\n        #!\/usr\/bin\/env bash\n\n        ...\n\n        #\n        # Define all event handlers here.\n        #\n\n        # Begin Cloudy Bootstrap\n        s=\"${BASH_SOURCE[0]}\";while ...\n\n* To see the available events recursively search codebase for `event_dispatch \"`.\n\n## Cloudy Core Events\n\n* pre_config\n* compile_config\n* boot\n* clear_cache\n\n## on_boot\n\nIf you define this function before the bootstrap it will be called once the minimum bootstrap has been called.  To see an example of this you can look to the `tests` path in _cloudy_installer.sh_.\n\n## Example of a Custom Event\n\nImagine a custom event like showing info.  Let's call the event `show_info`.  You Cloudy script will fire or trigger the event with a line like this:\n\n    event_dispatch \"show_info\" \"do\" \"re\" \"mi\"\n    local trigger_result=$?\n\nHow might another script respond to this event?\n\n    function on_show_info() {\n        local do=$1\n        local re=$2\n        local mi=$3\n\n        ...\n    }\n\n### Listening for events\n\nYou can register custom callbacks using `event_listen`.  See below...\n\n### Using `additional_bootstrap` files\n\nIn some cases you will need to add your listeners in a custom bootstrap file which is registered in your configuration as `additional_bootstrap`.  They are sourced after all configuration has been loaded.  The contents of such file could look like this:\n\n    #!\/usr\/bin\/env bash\n\n    function here_we_go() {\n        debug \"$FUNCNAME;\\$FUNCNAME\"\n    }\n\n    event_listen \"boot\" \"here_we_go\""},{"id":"error_handling","title":"Exit Status","body":"When you call `exit_with_success` and `exit_with_success_elapsed` the exit status is set to 0 and the script exits.  With the latter, the elapsed time is also printed.\n\nWhen you call `exit_with_failure` the exit status is set to 1 by default.  To change the exit status to something other than 1, then pass the `--status={code}` option, like the following, which will return a 2.  Valid exit codes are from 0-255. [Learn more](https:\/\/www.tldp.org\/LDP\/abs\/html\/exit-status.html).\n\n    exit_with_failure --status=2 \"Missing $ROOT\/_perms.local.sh.\"\n\nYou can use `throw` kind of like an exception."},{"id":"functions","title":"Functions","body":"## Correct Way to Pass Function Arguments\n\n> Notice the double quotes below `\"$@\"`  Without these any quoted arguments containing spaces will not be properly passed along.\n\n```shell\nfunction env_on_import_db() {\n  call_plugin mysql import_db \"$@\"\n}\n```\n\nOr shift the first argument and pass the rest:\n\n```shell\nfunction remote_ssh_by_environment() {\n  local environment_id=\"$1\"\n\n  eval $(get_config_as env_auth \"environments.$environment_id.ssh\")\n  [[ \"$env_auth\" ]] || return 1\n  echo ssh -t -o BatchMode=yes \"$env_auth\" \"${@:2}\"\n}\n```\n\n## Using Functions to Create Variable Values\n\nFollow this pattern for best results.\n\n```bash\nfunction lorem_echo_color() {\n  local is_colorblind=\"$1\"\n\n  [[ \"$is_colorblind\" == true ]] && echo \"Observer is colorblind.\" && return 1\n  echo \"blue\" && return 0\n}\n```\n\n### Acting Only When a Variable Is Set\n\n```bash\nif color=$(lorem_echo_color); then\n  echo \"The color has been set to: $color\"\nfi\n```\n\n### Failing When a Variable Cannot Be Set\n\n```bash\nfunction parent_caller() {\n  local color\n  ! color=$(lorem_echo_color) && fail_because \"$color\" && return 1\n}\n\n# In this example `lorem_echo_color` is not being called from inside a parent function.\n! color=$(lorem_echo_color) && fail_because \"$color\" && exit_with_failure\n```\n\n### Assigning Default Values Instead of Failing\n\n```bash\n# Use this pattern for an empty or default value\ncolor=$(lorem_echo_color) || color=''\ncolor=$(lorem_echo_color) || color='some default'\n```\n\nPoints to take note of:\n\n* Do not put `fail_because` inside of functions that echo their results. The message will get lost due due to the subshell aspect.\n* Instead echo the message to be passed into `fail_because` by the caller.\n* In parent functions, do not use `local` on the same line as the `color=` assignment or this will cause the `return 1` to be lost.\n* Sometimes you will want a default value rather than to process a failure, use the second example in that case."},{"id":"lists","title":"Lists","body":"Here is an example of a realtime list with nice bullets. You might use this if you are processing something where it would take too long to wait for the entire list to be complete, hence using `echo_list` is not fast enough user feedback.\n\n```bash\ni=1\nfor item in ${items[@]}; do\n  bullet=$LI\n  [ $i -eq ${#items[@]} ] && bullet=$LIL\n  echo \"$bullet $name\"\n  ((i++))\ndone\n```"},{"id":"localize","title":"Localization\/Translation","body":"Note: this is not available until after the configuration has been bootstrapped.\n\n## Translate or reword\n\nYou can translate or reword certain strings with this feature\n\n    translate:\n      ids:\n      - Completed successfully.\n      - Failed.\n      strings:\n        en:\n        - Installation succeeded.\n        - Installation failed.\n\n* The ids are the strings that appear normally.\n* To begin a translation, copy the entire ids array as `translate.strings.LANG` and then alter the strings you mean to.  The value of `LANG` must be a [two or three letter ISO 639 language code](https:\/\/www.loc.gov\/standards\/iso639-2\/php\/code_list.php).\n* The indexes of the ids array must match with the `translate.strings.LANG` array.\n\n## Implementation\n\nTo implement localization in a script, do like this:\n\n     echo_title $(translate \"Welcome to your new script!\")\n\nThen add that to `translate.ids`:\n\n    translate:\n      ids:\n      - Completed successfully.\n      - Failed.\n      - Welcome to your new script!"},{"id":"logging","title":"Logging to File","body":"There is a file logging API built in to _Cloudy_.\n\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_language\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_translate_en_exit_with_success\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_translate_en_exit_with_failure\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_commands_coretest_options__keys\n    [Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_commands__keys\n\nFirst you must declare the filename of the log file; this enables logging.  This is relative to your script's directory and should be placed at the top of your script before the bootstrap.\n\n    LOGFILE=\"script.example.log\"\n\n    # Begin Cloudy Bootstrap\n    s=\"${BASH_SOURCE[0]}\";while ...\n\nThese functions should be self-explanatory; each one takes a single argument, which is the message.\n\n    write_log_*\n\nTo log an error, e.g.,\n\n    write_log_error \"Cannot load file $filepath\"\n\nThe one that may require explanation is `write_log`, which takes one or two arguments.\n\nWhen using two arguments the first is an arbitrary log label, which appears in place of the standard log levels from above.  You can set this to anything and that will allow you to filter your log items by that key using whatever log reader you're using.  Using _Console_ in OSX is my preference.\n\n    write_log \"alpha\" \"Recording a value $value\"\n\nYou may also call it like this:\n\n    write_log \"No custom label\""},{"id":"menus","title":"Menus","body":"## Advanced Menus\n\nThis example shows how to generate a menu using PHP, JSON which has different labels and values.\n\n_get_menu_json.php_\n```php"},{"id":"cloudy_php","title":"PHP and Cloudy","body":"Cloudy uses quite a bit of PHP under the hood.\n\n## PHP Version\n\nThe value of the [environment variable](https:\/\/www.howtogeek.com\/668503\/how-to-set-environment-variables-in-bash-on-linux\/) `CLOUDY_PHP` will be used to locate the PHP binary. You may set that explicitly (see below) or let Cloudy do it automatically. See `cloudy_bootstrap_php()` for details.\n\n> The value of the environment variable `CLOUDY_PHP` will be used to locate the PHP binary.\n\n### Setting Cloudy's PHP Version Globally\n\nAdd the following line to _~\/.bashrc_ or _~\/.bash\\_profile_ as appropriate to your case.  [Learn more...](https:\/\/www.howtogeek.com\/668503\/how-to-set-environment-variables-in-bash-on-linux\/)\n\n```bash\nexport CLOUDY_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.2.20\/bin\/php\"\n```\n\n### Setting Cloudy's PHP Version at Runtime\n\nCoincidentally, if you run the following, the test will actually fail, as it asserts that `$CLOUDY_PHP` is set to the default PHP binary, which it will not be in this case.\n\n```bash\n export CLOUDY_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.2.20\/bin\/php\"; .\/cloudy_tools.sh tests\n```\n\n### Setting PHP in Your Controller\n\nLet's say the PHP path exists in another global variable.  You may pass that off to Cloudy in the `on_pre_config` [event handler](@events), like this:\n\n```bash\nfunction on_pre_config() {\n  if [[ \"$PHP_PATH\" ]]; then\n    CLOUDY_PHP=\"$PHP_PATH\"\n  fi\n}\n```\n\n### Setting PHP in Additional Config\n\n_foo.core.yml_\n\n```yaml\nadditional_config:\n  - .foo\/config.local.yml\n```\n\nYou may provide the PHP path using an `additional_config` file that matches _*.local.yml_. It might contain the following:\n\n_.foo\/config.local.yml_\n\n```yaml\nshell_commands:\n  php: \/usr\/local\/bin\/php\n```\n\nIn the controller file, in `on_pre_config`, you must add the following line so that the local config is read during bootstrap.\n\n```bash\nfunction on_pre_config() {\n  source \"$CLOUDY_ROOT\/inc\/cloudy.read_local_config.sh\"\n}\n```\n\n## PHP Dependencies (and Composer)\n\n[See Composer](@composer) for dependency management strategies.\n\n## Writing Code\n\nWhen writing your app's source code, never hardcode PHP as `php` nor as a path. Instead use `\"$CLOUDY_PHP\"`, as shown below.  **Always wrap this variable with double quotes (to support spaces in paths).** This will ensure consistent PHP versions throughout execution.\n\n```php\n\"$CLOUDY_PHP\" \"\/my\/php\/script\/foo.php\"\n```\n\n### Accessing Configuration\n\nFor your PHP scripts to have access to the configuration values setup in the YAML file(s), you should decode the environment variable `CLOUDY_CONFIG_JSON`, e.g., `$config = json_decode(getenv('CLOUDY_CONFIG_JSON'), TRUE);`.\n\n**You will need to add `export CLOUDY_CONFIG_JSON` to your controller file.**"},{"id":"version","title":"Script Version","body":"To provide a version for your script other than the default `1.0`, you have two options.\n\n## Version Indicated in YAML\n\nYou may hard-code the version in a YAML config file like this:\n\n    title: Cloudy Installer\n    version: 1.5\n    ...\n\n## Version Indicated Dynamically\n\nIf you would rather provide your version dynamically with BASH, you can override the default `get_version` by adding it to your script file anytime after the bootstrap; this allows you to provide it via PHP, `cat` or whatever, e.g.,\n\n    ...\n    done;r=\"$(cd -P \"$(dirname \"$s\")\" && pwd)\";source \"$r\/framework\/cloudy\/cloudy.sh\"\n    # End Cloudy Bootstrap\n\n    function get_version() {\n        local version=$(grep \"version = \" \"$ROOT\/web_package.info\")\n        echo ${version\/version = \/ }\n    }"},{"id":"plugins","title":"Single File Plugins Pattern","body":"Here is a pattern that can be used if you want to allow \"plugin\" type files, php or bash, to be used by your project:\n\n_Implementing controller snippet:_\n\n```shell\ncall_plugin \"$CONFIG_DIR\/plugins\/$plugin\" || exit_with_failure\n```\n\n_Function definition for `call_plugin()`_\n```shell\nfunction call_plugin() {\n  local plugin_path=\"$1\"\n\n  if [[ ! -f \"$plugin_path\" ]]; then\n    fail_because \"$plugin_path does not exist.\"\n    return 1\n  elif [[ \"$(path_extension \"$plugin_path\")\" == \"php\" ]]; then\n    # TODO It may be more appropriate to be explicite about the arguments.\n    plugin_output=$($CLOUDY_PHP  $@)\n  else\n    plugin_output=$(.  $@)\n  fi\n\n  if [[ $? -ne 0 ]]; then\n    [[ \"$plugin_output\" ]] && fail_because \"$plugin_output\"\n    fail_because \"\\\"$plugin\\\" has failed.\"\n    return 1\n  fi\n\n  [[ \"$plugin_output\" ]] && succeed_because \"$plugin_output\"\n  return 0\n}\n```\n\n_The plugin, PHP version:_\n\n```php"},{"id":"strings","title":"String Manipulation","body":"Taken from [Advanced Bash-Scripting Guide: Chapter 10. Manipulating Variables](https:\/\/www.tldp.org\/LDP\/abs\/html\/string-manipulation.html)\n\n## Trim the dot from right side of string\n\n```bash\n${string%.}\n```\n\n## Trim the dot from left side of string\n\n```bash\n${string#.}\n```\n\n## Trim all leading and trailing whitespace\n\n```bash\nstring=\"   foo    \"\nstring=${foo## }\nstring=${foo%% }\n# \"$string\" == \"foo\"\n```\n\n## Get string length\n\n```bash\n${#string}\n```"},{"id":"tables","title":"Tables (Tabular Output)","body":"You can easily create tables with _Cloudy_.\n\nThe following code:\n\n    echo_heading \"Tabular Data Example\"\n    table_set_header \"Word\" \"Part of Speech\"\n    table_add_row \"jump\" \"verb\"\n    table_add_row \"chocolaty\" \"adjective\"\n    table_add_row \"kitten cat\" \"noun noun\"\n    table_add_row \"quickly\" \"adverb\"\n    echo_table\n\nWill produce output like the following\n\n![Tabular output](..\/..\/images\/table.jpg)\n\n## Control the Padding\n\nUse the options `--lpad` and `--rpad` to control the horizontal padding.\n\n        echo_heading \"Tabular Data Example\"\n        table_set_header \"Word\" \"Part of Speech\"\n        table_add_row \"jump\" \"verb\"\n        ...\n        echo_table --lpad=10 --rpad=10\n\n![Tabular output](..\/..\/images\/table-padding.jpg)"},{"id":"installer","title":"The Initialize API","body":"The Cloudy Initialization API makes it easy for your application to provide scaffolding (files and directories) to an instance during installation.\n\n**In your app, create a folder called _init\/_. When users of your app run the `init` command, files will be copied from _init\/_ to the location you've specified in your files map.**\n\n## The Files Map\n\nIn your app, _init\/cloudypm.files\\_map.txt_ is a text file that tells what files go where. Basically two columns, separated by a space. The first column represents filenames relative to _init\/_, where `*` is all files. The second column is either a path relative to `$ROOT` or an absolute path, which represents the installed location.\n\nThe contents of the files map must have at least one line that will look something like this; notice the use of the asterix in both columns.\n\n```text\n* ..\/..\/..\/bin\/config\/*\n```\n\n### Multiple Destinations\n\nBut let's say you want one of the files to go elsewhere. The contents of _cloudypm.files\\_map.txt_ might look like this:\n\n```text\n* ..\/..\/..\/bin\/config\/*\n_perms.custom.sh ..\/..\/..\/bin\/_perms.custom.sh\n```\n\nIn this case `*` represents all files except for _\\_perms.custom.sh_. They are initialized as before, however _\\_perms.custom.sh_ is initializeed at _$ROOT\/..\/..\/..\/bin\/\\_perms.custom.sh_.\n\nRenaming the installed file is achieved by indicating a different basename in column two.\n\n### Ignoring Files in _init\/_\n\nFinally let's say you want to skip over a file completely; do not include a destination for it, and it will be ignored, like this\n\n```text\n* ..\/..\/..\/bin\/config\/*\n_perms.custom.sh ..\/..\/..\/bin\/_perms.custom.sh\nignored_file.txt\n```\n\n### Tokens\n\nIn most cases you should consider using tokens like shown below. If you find your tokens are not get interpolated it's possible `handle_init` is getting called too early. Try moving `handle_init` to the `on_boot` event handler in your controller file to fix this. Early versions of Cloudy recommended calling that from `on_pre_config`, which does not support tokens.\n\n```text\n* {APP_ROOT}\/.live_dev_porter\/*\nconfig.gitignore {APP_ROOT}\/.live_dev_porter\/.gitignore\n```\n\n```text\n* {config_path_base}\/.live_dev_porter\/*\nconfig.gitignore {config_path_base}\/.live_dev_porter\/.gitignore\n```\n\n#### Supported Tokens\n\n1. `{config_path_base}`\n1. `{APP_ROOT}`\n\n## Special Filenames\n\n**Special files should not be listed in the files map.**\n\n### _gitignore_\n\nIf you create a file at _init\/gitignore_ (no leading dot!), it will be automatically be copied to _..\/..\/..\/opt\/.gitignore_ and merged with the existing _.gitignore_.  (This is the recommended location by Cloudy Package Manager.)"},{"id":"command","title":"The Script \"Command\"","body":"The script operation is defined as the first _argument_ passed.  In all of the following examples it is `alpha`.\n\n    .\/script.example.sh alpha bravo charlie\n    .\/script.example.sh -f alpha\n    .\/script.example.sh --test alpha -f\n\n## No Script Arguments (Default Command)\n\nIf no argument is passed then the YAML configuration file may define a default operation like this:\n\n    default_command: get\n\nIf the configuration file is as above, then these two are identical:\n\n    $ .\/script.example.sh\n    $ .\/script.example.sh get\n\n## An Assumed Command\n\nSomewhat related to the default command is `assume_command`.  It is used in a case where you want to insert (assume) a command that is not typed.  For example, if you want your users to type,  `.\/script.example.sh ` instead of `.\/script.example.sh  `, you should use `assume_command` in your config, which will cause the command to be inserted.  Any command that is registered will be respected as you would expect, but if the immediate first script argument is not registered as a command, then the `assume_command` will be used as if it had been typed.  This effectively inserts the `assume_command` value between the script name and the first argument.\n\n    assume_command get\n\nWhen configured as show above, the following are the same (so long as `file` is not registered as a command).\n\n    $ .\/script.example.sh file file2\n    $ .\/script.example.sh get file file2\n\n## API\n\n    get_command\n    get_config \"default_command\""},{"id":"options","title":"The Script \"Options\"","body":"Options are arguments passed to the script that begin with a single `-` or double `-`.  Here are some examples:\n\n        .\/script.example.sh -f -h -p\n        .\/script.example.sh -fhp\n        .\/script.example.sh --file=intro.txt --noup\n\n* Single hyphen options may only be one letter\n* They may be grouped or separate.\n* Order does not matter.\n* Double hypen options may provide values."},{"id":"arguments","title":"This script \"arguments\"","body":"Cloudy makes it easy to react to script arguments.  For example:\n\n    .\/install.sh dev install --tree=blue -abc\n\nHere we have:\n\n* The script file _install.sh_\n* The command `command=$(get_command)`, e.g. `dev`\n* One argument `arg=$(get_arg 0)`, e.g., `install`.\n* One value option, `tree`, `param=$(get_param \"tree\")`, e.g., `blue`\n* Three boolean options: `a,b,c`, `has_flag \"a\"`\n\n## Test if an option was used\n\n    has_option b && echo \"has b option\"\n\n## Access an option value\n\n    echo \"tree's value is $(get_option tree \"not set\")\""},{"id":"testing","title":"Unit Testing","body":"Cloudy offers a simple unit testing framework based on PhpUnit.  To see how you might implement unit tests, refer to the following files\n\n* _cloudy_tools.sh_ and find how the command `tests` is handled in `on_boot`.\n* _tests\/cloudy.tests.sh_ to see how the tests themselves are written.\n* _framework\/cloudy\/inc\/cloudy.testing.sh_ for a list of assertions.\n* It is optional to add the command to your _config.yml_ file.  It's not functionally necessary, but you might do it for documentation purposes.\n* To check if code is being run from inside a test you can use `is_being_tested`, e.g.:\n\n        is_being_tested && ...\n\n## Setup\n\nYou will want to implement the `on_boot` hook if you want to run tests.\n\n    ...\n    # Uncomment this line to enable file logging.\n    LOGFILE=\"install\/cloudy\/cache\/cloudy_installer.log\"\n\n    function on_boot() {\n        [[ \"$(get_command)\" == \"tests\" ]] || return 0\n        source \"$CLOUDY_ROOT\/inc\/cloudy.testing.sh\"\n        do_tests_in \"cloudy_installer.tests.sh\"\n        do_tests_in --continue ...\n        do_tests_in --continue ...\n        exit_with_test_results\n    }\n    ...\n\n## Fixtures\n\nYou may use the following as test fixtures, i.e.,\n\n    setup_before_test\n    teardown_after_test\n\n## Unit Testing of Php\n\nA good example of how to setup unit tests for PHP classes can be found in [aklump\/website_backup](https:\/\/github.com\/aklump\/website_backup)."},{"id":"menus_input","title":"User Input and Menus","body":"## Any Keypress\n\n```bash\nwait_for_any_key\n```\n\n## Yes or No\n\n```bash\nprompt \"Export the database first?\" --caution\n```\n\n## Multiple Choice\n\n* In this example `$search` can be user input, substring of a filename to look for.\n* The options will be relative paths\n* The `filepath=` assignment converts the selection to an absolute path.\n\n```bash\nchoose__array=()\nfor i in *$search*.sql*; do\n  [[ -f \"$i\" ]] && choose__array=(\"${choose__array[@]}\" \"$i\")\ndone\nfor i in \"${export_dir%\/}\"\/*$search*.sql*; do\n  [[ -f \"$i\" ]] && choose__array=(\"${choose__array[@]}\" \"$(path_unresolve \"$PWD\" \"$i\")\")\ndone\n! shortpath=$(choose \"Choose a database export by number\") && fail_because \"Cancelled.\" && exit_with_failure\nfilepath=${PWD%\/}\/${shortpath#\/}\n\necho \"Your choice was: $filepath\"\n```"},{"id":"tempdir","title":"Using a Temporary Directory","body":"In some cases you may need to define the variable `$TMPDIR` to allow a script to work.  To do so enter something like the following to _.bash_profile_ on your server.\n\n    export TMPDIR=\"\/home\/foo\/tmp\""},{"id":"writing_scripts","title":"Writing Your First Cloudy Script","body":"Let's say you want to create a script called _imagine.sh_.\n\n## Defining Your Script's Commands\n\nTo understand how to define commands, let's look at the following example.  This is taken from the script's master configuration file.\n\n    commands:\n      mountain:\n        help: Indicate the the user wants to imagine a mountain setting.\n        aliases:\n          - mt\n        arguments:\n          mountain_name:\n            help: The name to give to the imagined item.\n            required: true\n        options:\n          peaks:\n            help: The numbe of peaks.\n            aliases:\n              - p\n            type: integer\n\nLet's break the above down into parts, but first take note that it is not enough merely to define your commands in configuration, you have to handle each command in _imagine.sh_ as well, e.g.,\n\n    if [[ \"$(get_command)\" == \"mountain\" ]]; then ...\n\n... or with a case statment, e.g.,\n\n    case $(get_command) in\n      \"mountain\")\n        ...\n      ;;\n\nBack to the configuration...\n\n### Indicate the command name\n\nThe most basic definition consists fo a command and a help topic:\n\n    commands:\n      mountain:\n        help: Install a Cloudy package from the Cloudy Package Registry.\n\nIf this was all that was defined in the configuration, users would only be able to enter:\n\n    .\/imagine.sh mountain\n\n### Indicate command aliases\n\nBy adding one or more command aliases, you give the user options, usually for brevity in typing.\n\n    commands:\n      mountain:\n        help: Indicate the the user wants to imagine a mountain setting.\n        aliases:\n          - mt\n\nWith this configuration the user can enter either of these two and get the same effect.\n\n    .\/imagine.sh mountain\n    .\/imagine.sh mt\n\n### Indicate command arguments\n\nLet's say you want to collect a mountain name, you would indicate a command argument ``.\n\n    commands:\n      mountain:\n        ...\n        arguments:\n          mountain_name:\n            help: The name to give to the imagined mountain.\n\nNow the user may enter any of the following, however the user who provides the mountain name will have a different response--presumably--than the one who omits it.\n\n    .\/imagine.sh mountain\n    .\/imagine.sh mt\n    .\/imagine.sh mountain Everest\n    .\/imagine.sh mt Everest\n\n#### Make an argument required\n\nBut what if the name is to be requried?\n\n    commands:\n      mountain:\n        ...\n        arguments:\n          mountain_name:\n            ...\n            required: true\n\nNow the user can no longer omit the `` argument.\n\n### Indicate command options\n\n    commands:\n      mountain:\n        ...\n        options:\n          peaks:\n            help: The numbe of peaks.\n            aliases:\n              - p\n            type: integer\n          yes:\n            help: Answer yes to all questions.\n            aliases:\n              - y\n            type: boolean\n\nThe user will now be entering any of the following:\n\n    .\/imagine.sh mt \"Three Sisters\" --peaks=3\n    .\/imagine.sh mt \"Three Sisters\" -p=3\n    .\/imagine.sh mt \"Three Sisters\" --yes -p=3\n    .\/imagine.sh mt \"Three Sisters\" -y -p=3"},{"id":"yaml","title":"YAML in BASH","body":"There are some helper functions to facilitate JSON and YAML data manipulation.  Here is some real-world code to illustrate this:\n\n    # Begin a new YAML string.\n    yaml_clear\n\n    # Add a root-level value.\n    yaml_add_line \"base_url: $base_url\"\n\n    # Begin a new hash\/array.\n    yaml_add_line \"results:\"\n    for path in \"${pages[@]}\"; do\n\n      # Notice the indent on this hash key.\n      yaml_add_line \"  \\\"$path\\\":\"\n      for (( i = 0; i < 5; ++i )); do\n        time=$(curl -w '%{time_total}' -o \/dev\/null -s ${base_url%\/}\/${path%\/} -L)\n\n        # Add a hash element, notice the double indent.\n        yaml_add_line \"    - $time\"\n      done\n    done\n\n    # Send the YAML off to be processed by PHP, but first convert it to JSON for\n    # easier PHP consumption.  helpers.php will process the raw json and add\n    # some values to it and echo augmented JSON string which we can then do\n    # something with...\n    processed_json=$(\"$CLOUDY_PHP\" \"$ROOT\/helpers.php\" \"$(yaml_get_json)\") || fail_because \"Could not process raw results.\"\n\n    ..."}]