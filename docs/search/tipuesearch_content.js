var tipuesearch = {"pages":[{"title":"Cloudy Changelog","text":"Cloudy Changelog\n  \n  \n\n\n\n\n  &laquo;Cloudy APICloudyCloudy Conventions&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\n\n\nFixed\n\n\nIf you see an error like \"line 833: cd: ... cloudy\/framework\/cloudy: No such file or directory\", try adding COMPOSER_VENDOR=\"\" to the top of your script file, e.g. framework\/script.sh.\n\n\n\n\nAdded\n\n\nAdded functions echo_task, clear_task, echo_task_completed, echo_task_failed, choose\nConfigurable Composer vendor direct using $COMPOSER_VENDOR\nAdded $CLOUDY_CONFIG_HAS_CHANGED which will be true if the configuration was rebuilt during boot.\nOther small improvements and bug fixes.\n\n\nChanged\n\n\nMoved Composer vendor directory from framework\/cloudy\/php\/vendor to framework\/cloudy\/vendor.\n\n\n\n\nAdded\n\n\narray_dedupe function\n\n\nFixed\n\n\nassert_contains and assert_not_contains with space-containing values now works.\n\n\n\n\nChanged\n\n\nConfiguration merge algorithm to address deep merge problem.\n\n\n\n\nFixed\n\n\n.gitignore no longer includes duplicate lines when updating a cloudy package.\n\n\nAdded\n\n\njson_set, json_load_file, json_get_value and json_get for easily working with JSON.\necho_pass and echo_fail for a consistent in test scenarios.\nA pattern for writing command access to the documentation.\n\n\nDeprecated\n\n\n--as=ALIAS flag has been deprecated in exit_with_failure_if_empty_config and exit_with_failure_if_config_is_not_path. Replace exit_with_failure_if_empty_config \"database.host\" --as=host with exit_with_failure_if_empty_config \"host\" \"database.host\" to switch to the new syntax. This was done to match get_config_as and get_config argument patterns.\n\n\n\n\nAdded\n\n\nmd5_string function\n\n\nChanged\n\n\nChanged internal variable names, which should not affect your scripts.\n\n\nCLOUDY_OPTION__* are now hashed variable names.\nConfiguration cached variable names now use hashes rather than plain config keys.\n\n\n\nFixed\n\n\nConfig variable problems with special characters.\n\n\n\n\nFixed\n\nA bug when using additional_config together with config_path_base. The issue was that additional_config should have been relative to config_path_base, however it was not working correctly. After you update to 1.1.0 your app will be broken. To fix this you will need to remove the value of config_path_base from each of the items in additional_config. As an example, if before this update, your configuration was:\n\nconfig_path_base: ..\/..\/..\nadditional_config:\n  - ..\/..\/..\/bin\/config\/website_benchmark.yml\n\n\nYour configuration should now look like this:\n\nconfig_path_base: ..\/..\/..\nadditional_config:\n  - bin\/config\/website_benchmark.yml\n\n\n\n\nChanged\n\n\nRenamed $parse_args__option__* to parse_args__options__*.\n\n\n\n\n  \n\n\n\n  &laquo;Cloudy APICloudyCloudy Conventions&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:29 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"CHANGELOG.html"},{"title":"Cloudy","text":"Cloudy\n  \n  \n\n\n\n\n  &laquo;Application RootCloudyCloudy API&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\n\n\nA BASH framework, which uses YAML or JSON for your script's configuration and provides a unit testing framework.\n\nCloudy Boosts the following features:\n\n\nClean configuration options (YAML, JSON) for your scripts\nA BASH Unit Testing framework inspired by PHPUnit\nAuto-generated help output\nSupport for multilingual localization\n\n\nVisit https:\/\/aklump.github.io\/cloudy for full documentation.\n\n\n\nAfter installing Cloudy, to write a new script called thunder.sh ...\n\n\ncd to the directory where you want the script to be created.\nType cloudy new thunder.sh and the necessary files\/directories will be created in the current directory.\nOpen thunder.sh, enable logging, and write your code.\nOpen thunder.yml and add some configuration.\nTo learn about the options to use with new type cloudy help new.\nRefer to the documentation for to learn more.\n\n\nUsing JSON\n\n\nTo work with JSON configuration instead type cloudy new thunder.sh --json.\n\n\n\n\n\nWorks with BASH 3\nPHP (Used invisibly on the backend for configuration processing; no PHP knowledge is required to use Cloudy.)\n\n\n\n\nIf you find this project useful... please consider making a donation.\n\n\n\nInstallation means downloading this repository to your system.  It contains cloudy_tools.sh which is used to generate new scripts, as well as the cloudy framework.  It is a Cloudy script.\n\nHere is a snippet to clone this repo to a directory on your system $HOME\/opt\/cloudy and create a symlink in $HOME\/bin\/cloudy.  This assumes ~\/bin is in your $PATH variable.\n\n(cd $HOME &amp;&amp; (test -d opt || mkdir opt) &amp;&amp; (test -d bin || mkdir bin) &amp;&amp; cd opt &amp;&amp; (test -d cloudy || git clone https:\/\/github.com\/aklump\/cloudy.git) &amp;&amp; (test -s $HOME\/bin\/cloudy || ln -s $HOME\/opt\/cloudy\/cloudy_installer.sh $HOME\/bin\/cloudy)) &amp;&amp; cloudy\n\n\nOn success you should see something resembling the following:\n\n\n\n\n\nBeyond the internal variables the following variables are made available by Cloudy.\n\n\n\n\n  varname\n  description\n\n\n\n\n  $CLOUDY_NAME\n  Machine name of your script.\n\n\n  $ROOT\n  The directory containing your script.\n\n\n  $APP_ROOT\n  All relative configuration files use this as base.  Learn more\n\n\n  $SCRIPT\n  Absolute path to your script.\n\n\n  $CONFIG\n  Absolute path to the base config file.\n\n\n  $WDIR\n  The working directory when script was initiated.\n\n\n  $LOGFILE\n  Absolute path to a log file, if enabled.\n\n\n\n\n\nDetermine your version of BASH with echo $BASH_VERSION\n\n\n\n\n\nLearn more about BASH with the Advanced Bash-Scripting Guide.\nCheckout The Bash Guide by Maarten Billemont.\n\n\n\n\n  \n\n\n\n  &laquo;Application RootCloudyCloudy API&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:30 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"README.html"},{"title":"Cloudy API","text":"Cloudy API\n  \n  \n\n\n\n\n  &laquo;CloudyCloudyCloudy Changelog&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n      You should probably use get_config_as() instead as it&#039;s less brittle.\n      array_csv\n      array_dedupe\n      array_has_value\n      array_join\n      array_map\n      array_sort\n      array_sort_by_item_length\n      choose\n      clear_task\n      confirm\n      date8601\n      debug\n      dir_has_files\n      echo_blue\n      echo_blue_list\n      echo_elapsed\n      echo_error\n      echo_fail\n      echo_green\n      echo_green_highlight\n      echo_green_list\n      echo_heading\n      echo_key_value\n      echo_list\n      echo_pass\n      echo_red\n      echo_red_highlight\n      echo_red_list\n      echo_scream\n      echo_slim_table\n      echo_table\n      echo_task\n      echo_task_completed\n      echo_task_failed\n      echo_title\n      echo_warning\n      echo_white\n      echo_yellow\n      echo_yellow_highlight\n      echo_yellow_list\n      event_dispatch\n      event_listen\n      exit_with_cache_clear\n      exit_with_failure\n      exit_with_failure_code_only\n      exit_with_failure_if_config_is_not_path\n      exit_with_failure_if_empty_config\n      exit_with_help\n      exit_with_init\n      exit_with_success\n      exit_with_success_code_only\n      exit_with_success_elapsed\n      fail\n      fail_because\n      function_exists\n      get_command\n      get_command_arg\n      get_command_args\n      get_config_as\n      get_config_keys\n      get_config_keys_as\n      get_config_path\n      get_config_path_as\n      get_installed\n      get_option\n      get_title\n      get_version\n      handle_init\n      has_command\n      has_command_args\n      has_failed\n      has_option\n      has_options\n      implement_cloudy_basic\n      is_installed\n      json_get\n      json_get_value\n      json_load_file\n      json_set\n      list_add_item\n      list_clear\n      list_has_items\n      md5_string\n      parse_args\n      path_extension\n      path_filename\n      path_filesize\n      path_is_absolute\n      path_mtime\n      path_relative_to_config_base\n      path_relative_to_pwd\n      path_relative_to_root\n      path_resolve\n      path_unresolve\n      string_lower\n      string_repeat\n      string_split\n      string_ucfirst\n      string_upper\n      succeed_because\n      table_add_row\n      table_clear\n      table_has_rows\n      table_set_column_widths\n      table_set_header\n      tempdir\n      throw\n      time_local\n      timestamp\n      translate\n      url_add_cache_buster\n      url_host\n      validate_input\n      wait_for_any_key\n      warn_because\n      write_log\n      write_log_alert\n      write_log_critical\n      write_log_debug\n      write_log_dev_warning\n      write_log_emergency\n      write_log_error\n      write_log_info\n      write_log_notice\n      write_log_warning\n      yaml_add_line\n      yaml_clear\n      yaml_get\n      yaml_get_json\n      yaml_set\n  \n\n\n\nThe following functions available with: source\n\"$CLOUDY_ROOT\/inc\/cloudy.testing.sh\"\n\n\n      assert_contains\n      assert_count\n      assert_empty\n      assert_equals\n      assert_exit_status\n      assert_false\n      assert_file_exists\n      assert_file_not_exists\n      assert_greater_than\n      assert_internal_type\n      assert_less_than\n      assert_not_contains\n      assert_not_empty\n      assert_not_equals\n      assert_not_internal_type\n      assert_reg_exp\n      assert_same\n      assert_true\n      create_test_sandbox\n      delete_test_sandbox\n      do_tests_in\n      exit_with_test_results\n      is_being_tested\n      mark_test_skipped\n      test_fail_because\n  \n\n\n\n\n      \n    \n    @code\n  eval $(get_config &#039;path.to.config&#039;)\n@code\n    \n        \n        When requesting an array you must pass -a as the first argument if there&#039;s\nany chance that the return value will be empty.\n@code\n  eval $(get_config &#039;path.to.string&#039; &#039;default_value&#039;)\n  eval $(get_config -a &#039;path.to.array&#039; &#039;default_value&#039;)\n@code\n        \n      \n    \n    Echo $array_csv__array as CSV\n    \n        \n        @option --prose Use comma+space and then the word &quot;all&quot; as the final separator\nas when writing English prose, e.g. &quot;do, re and mi&quot;.\n@option --quotes Wrap each item with double quotes.\n@option --single-quotes Wrap each item with single quotes.\n@code\n  array_csv__array=(&#039;foo bar&#039; &#039;baz&#039; zulu)\n  csv=$(array_csv)\n@endcode\n        \n      \n    \n    Remove duplicate values from an array.\n    \n          Arguments: \n              $1: string The VARIABLE NAME of the defined array.\n                          Returns nothing.\n            \n        \n        Beware the order of the array will most likely be altered.\n@code\n  declare -a duplicated=(&quot;blue&quot; &quot;red&quot; &quot;blue&quot; &quot;yellow&quot;);\n  eval $(array_dedupe duplicated)\n@endcode\n        \n      \n    \n    Search $array_has_value__array for a value.\n    \n          Arguments: \n              $1: The value to search for in array.\n                        \n        \n        array_has_value__array\nYou must provide your array as $array_has_value__array like so:\n@code\n  array_has_value__array=(&quot;${some_array_to_search[@]}&quot;)\n  array_has_value &quot;tree&quot; &amp;&amp; echo &quot;found tree&quot;\n@endcode\n        \n      \n    \n    Echo a string, which is an array joined by a substring.\n    \n          Arguments: \n              $1: The string to use to glue the pieces together with.\n                          Returns 0 if all goes well; 1 on failure.\n            \n        \n        array_join__array\n        \n      \n    \n    Apply a callback to every item in an array and echo new array eval statement.\n    \n          Arguments: \n              $1: string The VARIABLE NAME of the defined array.\n                          Returns nothing.\n            \n        \n        array_map__callback\nThe array_map__callback has to be re-defined for each call of array_map and receives the value of an array item as\nit&#039;s argument.  The example here expects that user_patterns is an array, already defined.  The array user_patterns is\nmutated by the eval statement at the end.\n@code\n  function array_map__callback {\n      echo &quot;&lt;h1&gt;$1&lt;\/h1&gt;&quot;\n  }\n  declare -a titles=(&quot;The Hobbit&quot; &quot;Charlottes Web&quot;);\n  eval $(array_map titles)\n@endcode\n        \n      \n    \n    Mutate an array sorting alphabetically.\n    \n        \n        array_sort__array\n        \n      \n    \n    Mutate an array sorting by the length of each item, short ot long\n    \n        \n        array_sort__array\n@code\n array_sort_by_item_length__array=(&quot;september&quot; &quot;five&quot; &quot;three&quot; &quot;on&quot;)\n array_sort_by_item_length\n@endcode\n        \n      \n    \n    Assert that an array contains a value.\n    \n          Arguments: \n              $1: The value to search for.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that an array has a given number of elements.\n    \n          Arguments: \n              $1: The expected length.\n              $2: The name of a global array.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that variable by name is empty.\n    \n          Arguments: \n              $1: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that two values are equal in value but not necessarily type.\n    \n          Arguments: \n              $1: The expected value.\n              $2: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert a function returns a given exit code.\n    \n          Arguments: \n              $: \n                        \n        \n        Here are three examples of how to call...\n@code\n  array_sort; assert_exit_status 0\n  $(has_option &#039;name&#039;); assert_exit_status 0\n  has_option &#039;name&#039; &gt; \/dev\/null; assert_exit_status 0\n@endcode\n        \n      \n    \n    Assert that a value equals &quot;false&quot; or &quot;FALSE&quot;.\n    \n          Arguments: \n              $1: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that a file exists by path.\n    \n          Arguments: \n              $1: The filepath of the expected file.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that a file does not exist at path.\n    \n          Arguments: \n              $1: The filepath to ensure does not exist.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Asset one number is greater than another.\n    \n          Arguments: \n              $1: The target value.\n              $2: The number than should be greater than the target.\n                          Returns 0 if  $2 is &gt; $1\n            \n        \n        \n      \n    \n    Assert that an global variable is of a given type.\n    \n          Arguments: \n              $1: The expected type.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Asset one number is less than another.\n    \n          Arguments: \n              $1: The target value.\n              $2: The number than should be less than the target.\n                          Returns 0 if  $2 is &lt; $1\n            \n        \n        \n      \n    \n    Assert that an array does not contain a value.\n    \n          Arguments: \n              $1: The value to search for.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that variable by name is not empty.\n    \n          Arguments: \n              $1: The actual value\n              $2: A custom message on failure.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that two values are not the same.\n    \n          Arguments: \n              $1: The expected value.\n              $2: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that an global variable is not of a given type.\n    \n          Arguments: \n              $1: The expected type.\n              $2: The name of a global variable.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that a value matches a regular expression.\n    \n          Arguments: \n              $1: The regular expression.\n              $2: The value to match against the regexp.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Assert that two values are equal and of the same type.\n    \n          Arguments: \n              $1: The expected value.\n              $2: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        @todo is this needed, since bash is untyped?\n        \n      \n    \n    Assert that a value equals &quot;true&quot; or &quot;TRUE&quot;.\n    \n          Arguments: \n              $1: The value to test.\n                          Returns 0 if assertion is true; 1 otherwise.\n            \n        \n        \n      \n    \n    Present a multiple choice selection list to the user.\n    \n          Arguments: \n              $1: The message to display\n              $2: Optional.  Alter the option to display for cancel.\n                          Returns 0 and echos the choice if one was selected; returns 1 if cancelled.\n            \n        \n        The choices should be defined in the variable: choose__array before calling.\n        \n      \n    \n    Call this to erase the last &quot;echo_task&quot;.\n    \n        \n        You may want to do this if the task was aborted and neight completed nor\nfailed.  It will erase the task instead of marking a result.\n        \n      \n    \n    Prompt for a Y or N confirmation.\n    \n          Arguments: \n              $1: The confirmation message\n                    Options: \n                  --caution: Use when answering Y requires caution.\n                  --danger: Use when answering Y is a dangerous thing.\n                            Returns 0 if the user answers Y; 1 if not.\n            \n        \n        \n      \n    \n    Create a sandbox for testing.\n    \n        \n        Some global variables need to be stashed during testing, such as those\nto do with the exit system.\n@see delete_test_sandbox\n        \n      \n    \n    Return the current datatime in ISO8601 in UTC.\n    \n        \n        options -\n  -c - Remove hyphens and colons for use in a filename\n        \n      \n    \n    Echo the arguments sent to this is an eye-catching manner.\n    \n        \n        Call as in the example below for better tracing.\n@code\n  debug &quot;Some message to show|$0|$FUNCNAME|$LINENO&quot;\n@endcode\n        \n      \n    \n    Remove the sandboxed variables.\n    \n        \n        @see create_test_sandbox\n        \n      \n    \n    Determine if a given directory has any non-hidden files or directories.\n    \n          Arguments: \n              $1: The path to a directory to check\n                          Returns 0 if the path contains non-hidden files directories; 1 if not.\n            \n        \n        \n      \n    \n    Perform all tests in a file.\n    \n          Arguments: \n              $1: The path to a test file.\n                          Returns 0 if all tests pass; 1 otherwise.\n            \n        \n        \n      \n    \n    Echo a string with blue text.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    @param $echo_list__array\n    \n        \n        \n      \n    \n    Echo the elapsed time since the beginning of the script.\n    \n        \n        \n      \n    \n    Echo an error message\n    \n          Arguments: \n              $1: The error message.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a message indicating a failed test result.\n    \n          Arguments: \n              $1: The message to print\n                        \n        \n        \n      \n    \n    Echo a string with green text.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a string with a green background.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    @param $echo_list__array\n    \n        \n        \n      \n    \n    Echo a heading string.\n    \n          Arguments: \n              $1: The heading string.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    $DESCRIPTION\n    \n          Arguments: \n              $1: $PARAM$\n                          Returns 0 if $END$.\n            \n        \n        \n      \n    \n    Echo an array as a bulleted list (does not clear list)\n    \n        \n        @param $echo_list__array\nYou must add items to your list first:\n@code\n  list_add_item &quot;List item&quot;\n  echo_list\n  list_clear\n@endcode\n@see echo_list__array=(&quot;${some_array_to_echo[@]}&quot;)\n        \n      \n    \n    Echo a message indicating a passed test result.\n    \n          Arguments: \n              $1: The message to print\n                        \n        \n        \n      \n    \n    Echo a string with red text.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a string with a red background.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    @param $echo_list__array\n    \n        \n        \n      \n    \n    Echo a string with really, really loudly.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a slim version of the table as it&#039;s been defined.\n    \n        \n        \n      \n    \n    Echo the table as it&#039;s been defined.\n    \n        \n        \n      \n    \n    Echo a task has started, a.k.a, pending.\n    \n          Arguments: \n              $1: The imperative, e.g., &quot;Download all files&quot;\n                          Returns nothing.\n            \n        \n        This should be followed by echo_task_completed or echo_task_failed.\n@see echo_task_completed\n@see echo_task_failed\n        \n      \n    \n    Replace the task pending with success.\n    \n        \n        @see echo_task\n@see echo_task_failed\n        \n      \n    \n    Replace the task pending with failure.\n    \n        \n        @see echo_task\n@see echo_task_completed\n        \n      \n    \n    Echo a title string.\n    \n          Arguments: \n              $1: The title string.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a warning message\n    \n          Arguments: \n              $1: The warning message.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a string with white text.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a string with yellow text.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a string with a yellow background.\n    \n          Arguments: \n              $1: The string to echo.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    @param $echo_list__array\n    \n        \n        \n      \n    \n    Dispatch that an event has occurred to all listeners.\n    \n        \n        Additional arguments beyond $1 are passed on to the listeners.\n        \n      \n    \n    Register an event listener.\n    \n        \n        \n      \n    \n    Empties caches in $CLOUDY_ROOT (or other directory if provided) and exits.\n    \n        \n        \n      \n    \n    @option --status=N Optional, set the exit status, a number &gt; 0\n    \n        \n        \n      \n    \n    Exit without echoing anything with a non-success code.\n    \n        \n        @option --status=N Optional, set the exit status, a number &gt; 0\n        \n      \n    \n    Checks if a variable has been evaluated into memory and points to an existing path.\n    \n          Arguments: \n              $1: The alias.  Or if not aliased, the config path used by `get_config`.\n              $2: (Optional) The config path, if aliased.\n                          Returns 0 if the variable exists and points to a file; exits otherwise with 1.\n            \n        \n        Both of these aliase examples are the same, though the --as is an older syntax\nthat has been deprecated.\n@code\n  exit_with_failure_if_empty_config &#039;database.host&#039;\n## Using an alias...\n  exit_with_failure_if_empty_config &#039;host&#039; &#039;database.host&#039;\n## Aliased, deprecated syntax.\n  exit_with_failure_if_empty_config &#039;database.host&#039; --as=host\n@endcode\n        \n      \n    \n    Checks if a variable has been evaluated into memory yet or exits with failure.\n    \n          Arguments: \n              $1: The alias.  Or if not aliased, the config path used by `get_config`.\n              $2: (Optional) The config path, if aliased.\n                          Returns 0 if the variable is in memory.\n            \n        \n        Both of these aliase examples are the same, though the --as is an older syntax\nthat has been deprecated.\n@code\n  exit_with_failure_if_empty_config &#039;database.host&#039;\n## Using an alias...\n  exit_with_failure_if_empty_config &#039;host&#039; &#039;database.host&#039;\n## Aliased, deprecated syntax.\n  exit_with_failure_if_empty_config &#039;database.host&#039; --as=host\n@endcode\n        \n      \n    \n    Echo the help screen and exit.\n    \n        \n        \n      \n    \n    Performs an initialization (setup default config, etc.) and exits.\n    \n        \n        You must set up an init command in your core config file.\nThen call this function from inside `on_pre_config`, e.g.\n[[ &quot;$(get_command)&quot; == &quot;init&quot; ]] &amp;&amp; exit_with_init\nThe translation service is not yet bootstrapped in on_pre_config, so if you\nwant to alter the strings printed you can do something like this:\nif [[ &quot;$(get_command)&quot; == &quot;init&quot; ]]; then\n    CLOUDY_FAILED=&quot;Initialization failed.&quot;\n    CLOUDY_SUCCESS=&quot;Initialization complete.&quot;\n    exit_with_init\nfi\n        \n      \n    \n    Echo a success message plus success reasons and exit\n    \n          Arguments: \n              $1: The success message to use.\n                          Returns 0.\n            \n        \n        \n      \n    \n    Exit without echoing anything with a 0 status code.\n    \n        \n        \n      \n    \n    Echo a success message (with elapsed time) plus success reasons and exit\n    \n          Arguments: \n              $1: The success message to use.\n                          Returns 0.\n            \n        \n        \n      \n    \n    Echo test results and exit.\n    \n        \n        \n      \n    \n    Set the exit status to fail with no message.  Does not stop execution.\n    \n        \n        Try not to use this because it gives no indication as to why\n@option --status=N Optional, set the exit status, a number &gt; 0\n@see exit_with_failure\n        \n      \n    \n    Add a failure message to be shown on exit.\n    \n          Arguments: \n              $1: string The reason for the failure.\n              $2: string A default value if $1 is empty.\n                          Returns 1 if both $message and $default are empty. 0 otherwise.\n            \n        \n        @code\n  fail_because &quot;$reason&quot; &quot;Some default if $reason is empty&quot;\n@endcode\n        \n      \n    \n    Determine if a function has been defined.\n    \n          Arguments: \n              $1: string The name of the function to check.\n                          Returns 0 if defined; 1 otherwise.\n            \n        \n        \n      \n    \n    Echo the command that was used to call the script.\n    \n        \n        \n      \n    \n    Return a operation argument by zero-based index key.\n    \n          Arguments: \n              $1: int The index of the argument\n              $2: mixed Optional, default value.\n                        \n        \n        As an example see the following code:\n@code\n  .\/script.sh action blue apple\n  get_command --&gt; &quot;action&quot;\n  get_command_arg 0 --&gt; &quot;blue&quot;\n  get_command_arg 1 --&gt; &quot;apple&quot;\n@endcode\nReturns 0 if found, 2 if using the default.\n        \n      \n    \n    Echo all command arguments\n    \n        \n        If options are mixed in they will be stripped out, that is to say, if the\nscript was called like this &quot;script.sh do -f re -h mi&quot;, this function will\necho &quot;do re mi&quot;\n        \n      \n    \n    Get config path but assign it&#039;s value to a custom variable.\n    \n        \n        @code\n  eval $(get_config_as &#039;title&#039; &#039;path.to.some.title&#039; &#039;default&#039;)\n  eval $(get_config_as &#039;title&#039; -a &#039;path.to.some.array&#039; )\n@code\n        \n      \n    \n    Echos eval code for the keys of a configuration associative array.\n    \n          Arguments: \n              $1: The path to the config item, e.g. &quot;files.private&quot;\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Echo eval code for keys of a configuration associative array using custom var.\n    \n          Arguments: \n              $1: The path to the config item, e.g. &quot;files.private&quot;\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Echo eval code for paths of a configuration item.\n    \n          Arguments: \n              $1: The path to the config item, e.g. &quot;files.private&quot;\n                    Options: \n                  -a: If you are expecting an array\n                            Returns 0 on success.\n            \n        \n        Relative paths are made absolute using $APP_ROOT.\n        \n      \n    \n    Echo eval code for paths of a configuration item using custom var.\n    \n          Arguments: \n              $1: The variable name to assign the value to.\n              $2: The path to the config item, e.g. &quot;files.private&quot;\n                    Options: \n                  -a: If you are expecting an array\n                            Returns 0 on success.\n            \n        \n        Relative paths are made absolute using $APP_ROOT.\n        \n      \n    \n    Echo the path to an installed program.\n    \n          Arguments: \n              $1: The name of the program you need.\n                          Returns 0 if .\n            \n        \n        \n      \n    \n    Echo the value of a script option, or a default.\n    \n          Arguments: \n              $1: The name of the option\n              $2: A default value if the option was not used.\n                          Returns 0 if the option was used; 2 if the default is echoed.\n            \n        \n        \n      \n    \n    Echo the title as defined in the configuration.\n    \n          Arguments: \n              $1: A default value if no title is defined.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echos the version of the script.\n    \n        \n        \n      \n    \n    Performs an initialization (setup default config, etc.)\n    \n        \n        You must set up an init command in your core config file.\nThen call this function from inside `on_pre_config`, e.g.\n[[ &quot;$(get_command)&quot; == &quot;init&quot; ]] &amp;&amp; handle_init\n...do your extra work here...\nexit_with...\nYou should only call this function if you need to do something additional in\nyour init step, where you don&#039;t want to exit.  If not, you should use\nexit_with_init, instead.\nThe translation service is not yet bootstrapped in on_pre_config, so if you\nwant to alter the strings printed you can do something like this:\nif [[ &quot;$(get_command)&quot; == &quot;init&quot; ]]; then\n    CLOUDY_FAILED=&quot;Initialization failed.&quot;\n    CLOUDY_SUCCESS=&quot;Initialization complete.&quot;\n    exit_with_init\nfi\n        \n      \n    \n    Determine if the script was called with a command.\n    \n        \n        \n      \n    \n    Determine if there are any arguments for the script &quot;command&quot;.\n    \n        \n        \n      \n    \n    Determine if any failure reasons have been defined yet.\n    \n        \n        \n      \n    \n    Determine if the script was called with a given option.\n    \n          Arguments: \n              $1: The option to check for.\n                          Returns 0 if the option was used; 1 if not.\n            \n        \n        \n      \n    \n    Determine if any options were used when calling the script.\n    \n        \n        \n      \n    \n    Implement cloudy common commands and options.\n    \n        \n        An optional set of commands for all scripts.  This is just the handlers,\nyou must still set up the commands in the config file as usual.\n        \n      \n    \n    Determine if code is being run from inside a test.\n    \n        \n        \n      \n    \n    Test if a program is installed on the system.\n    \n          Arguments: \n              $1: The name of the program to check for.\n                          Returns 0 if installed; 1 otherwise.\n            \n        \n        \n      \n    \n    Echo the JSON string as set\n    \n        \n        @code\n  json=&quot;$(json_get)&quot;\n@endcode\n        \n      \n    \n    Echo a value by dot-path in the set\/loaded JSON.\n    \n          Arguments: \n              $1: The dot path, e.g. &#039;foo.bar&#039;\n                        \n        \n        If the path is invalid, an empty string is echoed.  Be sure to wrap in double quotes to protect values that contain spaces.\n@code\n  json_set &#039;{&quot;foo&quot;:{&quot;bar&quot;:&quot;baz et al&quot;}}&#039;\n  value=&quot;$(json_get_value foo.bar)&quot;\n@endcode\n        \n      \n    \n    Load a JSON file to be read by json_get_value.\n    \n          Arguments: \n              $1: Path to a valid JSON file\n                          Returns 0 if JSON is valid. 1 if not.\n            \n        \n        \n      \n    \n    Set a JSON string to be later read by json_get_value().\n    \n          Arguments: \n              $1: A JSON string, wrapped by single quotes.\n                          Returns 0 if the JSON is valid; 1 otherwise.\n            \n        \n        Call this once to put your json string into memory, then make unlimited calls\nto json_get_value as necessary.  You may check the return code to ensure JSON syntax\nis valid.  If your string contains single quotes, you will need to escape them.\n@code\n  json_set &#039;{&quot;foo&quot;:{&quot;bar&quot;:&quot;baz et al&quot;}}&#039;\n@endcode\n        \n      \n    \n    Add an item to the list.\n    \n          Arguments: \n              $1: The string to add as a list item.\n                          Returns nothing.\n            \n        \n        echo_list__array\n        \n      \n    \n    Remove all items from the list.\n    \n        \n        \n      \n    \n    Detect if the list has any items.\n    \n        \n        \n      \n    \n    Mark a single test as skipped\n    \n        \n        \n      \n    \n    Echo the md5 hash of a string.\n    \n          Arguments: \n              $: \n                          Returns 0 if the string was able to be hashed.\n            \n        \n        \n      \n    \n    Parses arguments into options, args and option values.\n    \n        \n        Use this in your my_func function: parse_args &quot;$@&quot;\nThe following variables are generated for:\n@code\n  my_func -ab --tree=life do re\n@endcode\n        \n      \n    \n    Return the extension of a file.\n    \n        \n        \n      \n    \n    Return the basename less the extension.\n    \n        \n        \n      \n    \n    Echo the size of a file.\n    \n          Arguments: \n              $1: The path to the file.\n                        \n        \n        \n      \n    \n    Determine if a path is absolute (begins with \/) or not.\n    \n          Arguments: \n              $1: The filepath to check\n                          Returns 0 if absolute; 1 otherwise.\n            \n        \n        \n      \n    \n    Echo the last modified time of a file.\n    \n          Arguments: \n              $1: The path to the the file.\n                          Returns 1 if the time cannot be determined.\n            \n        \n        \n      \n    \n    Echo a path relative to config_path_base.\n    \n        \n        If the path begins with \/ it is unchanged.\n        \n      \n    \n    Make $1 relative if it&#039;s inside $PWD.\n    \n          Arguments: \n              $1: An absolute filepath.  $PWD will be replaced by .\/ if possible.\n                        \n        \n        \n      \n    \n    Expand a relative path using $ROOT as base.\n    \n        \n        If the path begins with \/ it is unchanged.\n        \n      \n    \n    Resolve a path to an absolute link; if already absolute, do nothing.\n    \n          Arguments: \n              $1: The dirname to use if $2 is not absolute\n              $2: The path to make absolute if not starting with \/\n                          Returns nothing\n            \n        \n        \n      \n    \n    Echo a relative path by removing a leading directory(ies).\n    \n          Arguments: \n              $1: The dirname to remove from the left of $2\n              $2: The path to make relative by removing $1, if possible.\n                        \n        \n        The trailing slash will always be removed.  The relative path is returned\nwithout a leading slash.  If it cannot be unresolved, any leading slash will\nremain.  If the two arguments are the same, &#039;.&#039; will be returned.\n        \n      \n    \n    Echo the lowercase version of a string.\n    \n          Arguments: \n              $1: The string to convert to lowercase.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Repeat a string N times.\n    \n          Arguments: \n              $1: The string to repeat.\n              $2: The number of repetitions.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Split a string by a delimiter.\n    \n          Arguments: \n              $1: The delimiter string.\n                          Returns 0 if .\n            \n        \n        string_split__string\nstring_split__array\n@code\n string_split__string=&quot;do&lt;br \/&gt;re&lt;br \/&gt;mi&quot;\n string_split &#039;&lt;br \/&gt;&#039; &amp;&amp; local words=(&quot;${string_split__array[@]}&quot;)\n@endcode\n        \n      \n    \n    Echo the string with it&#039;s first letter in uppercase.\n    \n          Arguments: \n              $1: The string to convert\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo the uppercase version of a string.\n    \n          Arguments: \n              $1: The string to convert to uppercase.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Add a success reason to be shown on exit.\n    \n          Arguments: \n              $1: string The reason for the success.\n              $2: string A default value if $1 is empty.\n                          Returns 1 if both $message and $default are empty; 0 if successful.\n            \n        \n        @code\n  succeed_because &quot;$reason&quot; &quot;Some default if $reason is empty&quot;\n@endcode\n        \n      \n    \n    Send any number of arguments, each is a column value for a single row.\n    \n        \n        \n      \n    \n    Clear all rows from the table definition.\n    \n        \n        \n      \n    \n    Determine if the table definition has any rows.\n    \n        \n        \n      \n    \n    Manually set the column widths\n    \n        \n        A number for each column.  You should call this after adding all rows.\n        \n      \n    \n    Set the column headers for a table.\n    \n          Arguments: \n              $@: Each argument is the column header value.\n                          Returns nothing.\n            \n        \n        \n      \n    \n    Echo a temporary directory filepath.\n    \n          Arguments: \n              $1: string An optional directory name to use.\n                          Returns 0 if successful\n            \n        \n        If you do not provide $1 then a new temporary directory is created each time\nyou call tempdir.  If you do provide $1 and call tempdir more than once with\nthe same value for $1, the same directory will be returned each time--a shared\ndirectory within the system&#039;s temporary filesystem with the name passed as $1.\nIt is a common pattern to pass $CLOUDY_NAME as the argument as this will\ncreate a folder based on the name of your script.\n        \n      \n    \n    Add a failure message to be shown on exit.\n    \n          Arguments: \n              $1: string The reason for the failure.\n              $2: string A default value if $1 is empty.\n                          Returns 1 if both $message and $default are empty.\n            \n        \n        @code\n  test_fail_because &quot;$reason&quot; &quot;Some default if $reason is empty&quot;\n@endcode\n        \n      \n    \n    Echo an exception message and exit.\n    \n        \n        \n      \n    \n    Echo the current local time as hours\/minutes with optional seconds.\n    \n        \n        options -\n  -s - Include the seconds\n        \n      \n    \n    Echo the current unix timestamp.\n    \n        \n        \n      \n    \n    Echo the translation of a message id into $CLOUDY_LANGUAGE.\n    \n          Arguments: \n              $1: The untranslated message.\n                          Returns 0 if translated; 2 if not translated.\n            \n        \n        \n      \n    \n    Add a cache-busting timestamp to an URL and echo the new url.\n    \n        \n        \n      \n    \n    Echo the host portion an URL.\n    \n        \n        \n      \n    \n    Validate the CLI input arguments and options.\n    \n        \n        \n      \n    \n    Prompt the user to read a message and press any key to continue.\n    \n          Arguments: \n              $1: The message to show the user.\n                          Returns nothing\n            \n        \n        \n      \n    \n    Add a warning message to be shown on success exit; not shown on failure exits.\n    \n          Arguments: \n              $1: string The warning message.\n              $2: string A default value if $1 is empty.\n                          Returns 1 if both $message and $default are empty; 0 if successful.\n            \n        \n        @code\n  warn_because &quot;$reason&quot; &quot;Some default if $reason is empty&quot;\n@endcode\n@todo Should this show if a failure exit?\n        \n      \n    \n    You may include 1 or two arguments; when 2, the first is a log label\n    \n        \n        \n      \n    \n    Writes a log message using the alert level.\n    \n          Arguments: \n              $@: Any number of strings to write to the log.\n                          Returns 0 on success or 1 if the log cannot be written to.\n            \n        \n        \n      \n    \n    Write to the log with level critical.\n    \n          Arguments: \n              $1: The message to write.\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Write to the log with level debug.\n    \n          Arguments: \n              $1: The message to write.\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Log states that should only be thus during development or debugging.\n    \n        \n        Adds a &quot;... in dev only message to your warning&quot;\n        \n      \n    \n    @link https:\/\/www.php-fig.org\/psr\/psr-3\/\n    \n        \n        \n      \n    \n    Write to the log with level error.\n    \n          Arguments: \n              $1: The message to write.\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Write to the log with level info.\n    \n          Arguments: \n              $1: The message to write.\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Write to the log with level notice.\n    \n          Arguments: \n              $1: The message to write.\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Write to the log with level warning.\n    \n          Arguments: \n              $1: The message to write.\n                          Returns 0 on success.\n            \n        \n        \n      \n    \n    Add a line to our YAML data.\n    \n          Arguments: \n              $1: string\n                          Returns 0.\n            \n        \n        \n      \n    \n    Empties the YAML string from earlier builds, making ready anew.\n    \n        \n        \n      \n    \n    Echos the YAML string as YAML.\n    \n        \n        \n      \n    \n    Echos the YAML string as JSON.\n    \n        \n        \n      \n    \n    Sets the value of the YAML string.\n    \n          Arguments: \n              $1: string\n                          Returns 0\n            \n        \n        You can use this to convert YAML to JSON:\n  yaml_set &quot;$yaml&quot;\n  json=$(yaml_get_json)\n        \n  \n\n\n\n  \n\n\n\n  &laquo;CloudyCloudyCloudy Changelog&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:30 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"api.html"},{"title":"Application Root","text":"Application Root\n  \n  \n\n\n\n\n  &laquo;String ManipulationCloudyCloudy&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nThe application root is by default the same as $ROOT, which is the directory containing your cloudy entry script file.  However you may want to alter that by the use of config_path_base to point to a higher directory, such as the case with Cloudy Packages.\n\n$APP_ROOT should point to the most logical top-level directory in the context where the cloudy script is used.\n\n\n\n\nRelative paths read in with get_config_path are made absolute using $APP_ROOT.\nPaths shortened via path_shorten use $APP_ROOT as the basis for prefix removal.\n\n\n\n\n  \n\n\n\n  &laquo;String ManipulationCloudyCloudy&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:30 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"app_root.html"},{"title":"This script &quot;arguments&quot;","text":"This script &quot;arguments&quot;\n  \n  \n\n\n\n\n  &laquo;The Script &quot;Options&quot;CloudyUnit Testing&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nCloudy makes it easy to react to script arguments.  For example:\n\n.\/install.sh dev install --tree=blue -abc\n\n\nHere we have:\n\n\nThe script file install.sh\nThe command command=$(get_command), e.g. dev\nOne argument arg=$(get_arg 0), e.g., install.\nOne value option, tree, param=$(get_param \"tree\"), e.g., blue\nThree boolean options: a,b,c, has_flag \"a\"\n\n\n\n\nhas_option b &amp;&amp; echo \"has b option\"\n\n\n\n\necho \"tree's value is $(get_option tree \"not set\")\"\n\n\n\n\n  \n\n\n\n  &laquo;The Script &quot;Options&quot;CloudyUnit Testing&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:31 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"arguments.html"},{"title":"Arrays","text":"Arrays\n  \n  \n\n\n\n\n  &laquo;User Input and MenusCloudyString Manipulation&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\nnew_array=(\"${old_array[@]}\")\n\n\nThis comes in to play after array-based functions like string_split\n\nstring_split__string=\"do&lt;br \/&gt;re&lt;br \/&gt;mi\"\nstring_split '&lt;br \/&gt;' &amp;&amp; local words=(\"${string_split__array}\")\n\n\n\n\neval copy=(\\\"\\${$master[@]}\\\")\n\n\n\n\n$ a=(a b c d e)\n$ a=(\"${a[@]:1}\")\n$ echo \"${a[@]}\"\nb c d e\n\n\n\n\na=(\"${a[@]:0:${#a[@]} - 1}\" \n\n\n\n\ndeclare -a array=('value1' 'value2');\ncsv=$(printf \"%s,\" \"${array[@]}\")\ncsv=${csv%,}\n\n\n\n\ndeclare -a array=('foo' 'bar' 'foo');\nfoo=($(echo \"$(printf \"%s\\n\" \"${array[@]}\")\" | sort -u))\n\n\n\n\n  FILES=()\n  for i in $(cd $DIR &amp;&amp; find . -maxdepth 1 -type d -name '*.sql*'); do\n     [[ \"$i\" != '.' ]] &amp;&amp; FILES=(\"${FILES[@]}\" \"$(basename \"$i\")\")\n  done\n\n\n\n\n  \n\n\n\n  &laquo;User Input and MenusCloudyString Manipulation&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:31 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"bash--arrays.html"},{"title":"String Manipulation","text":"String Manipulation\n  \n  \n\n\n\n\n  &laquo;ArraysCloudyApplication Root&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nTaken from Advanced Bash-Scripting Guide: Chapter 10. Manipulating Variables\n\n\n\n${string%.}\n\n\n\n\n${string#.}\n\n\n\n\n${#string}\n\n\n\n\n  \n\n\n\n  &laquo;ArraysCloudyApplication Root&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:31 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"bash--strings.html"},{"title":"The Script &quot;Command&quot;","text":"The Script &quot;Command&quot;\n  \n  \n\n\n\n\n  &laquo;The Initialize APICloudyThe Script &quot;Options&quot;&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nThe script operation is defined as the first argument passed.  In all of the following examples it is alpha.\n\n.\/script.example.sh alpha bravo charlie\n.\/script.example.sh -f alpha\n.\/script.example.sh --test alpha -f\n\n\n\n\nIf no argument is passed then the YAML configuration file may define a default operation like this:\n\ndefault_command: get\n\n\nIf the configuration file is as above, then these two are identical:\n\n$ .\/script.example.sh    \n$ .\/script.example.sh get        \n\n\n\n\nSomewhat related to the default command is assume_command.  It is used in a case where you want to insert (assume) a command that is not typed.  For example, if you want your users to type,  .\/script.example.sh &lt;arg&gt; instead of .\/script.example.sh &lt;command&gt; &lt;arg&gt;, you should use assume_command in your config, which will cause the command to be inserted.  Any command that is registered will be respected as you would expect, but if the immediate first script argument is not registered as a command, then the assume_command will be used as if it had been typed.  This effectively inserts the assume_command value between the script name and the first argument.\n\nassume_command get\n\n\nWhen configured as show above, the following are the same (so long as file is not registered as a command).\n\n$ .\/script.example.sh file file2\n$ .\/script.example.sh get file file2     \n\n\n\n\nget_command\nget_config \"default_command\"\n\n\n\n\n  \n\n\n\n  &laquo;The Initialize APICloudyThe Script &quot;Options&quot;&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:32 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"command.html"},{"title":"Enabling Installation w\/Composer","text":"Enabling Installation w\/Composer\n  \n  \n\n\n\n\n  &laquo;Documenting CodeCloudyEvents (Hooks)&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n  This is a WIP page.\n\n\nWhen using Cloudy with a PHP application managed by Composer, you may follow this guide so that the Cloudy dependencies are handled as well. This is probably an easier road to travel since your dependencies are all in one place.\n\n\nCreate your cloudy script (foo.sh) in the desired location of your application, e.g. cloudy new foo.sh. (See also cloudy core.)\nOpen foo.sh and add the path (relative to foo.sh) to your application's vendor directory as COMPOSER_VENDOR; see script.example.sh for code example.\nAdd a repository reference to Cloudy in your application's composer.json.\n\n\"repositories\": [\n  {\n     \"type\": \"path\",\n     \"url\": \".\/cloudy\/\"\n\n],\n\nTell your app you want to require Cloudy: composer require aklump\/cloudy\nIgnore the following in your app's root .gitignore, adjusting paths as appropriate:\n\n\/cloudy\/vendor\/\n\/cloudy\/composer.lock\n\n\n\n\n\n\nAdd this to composer.json to the bin section\n\n\n{\n  \"bin\": [\n    \"bin\/ldp\"\n  ]\n}\n\n\n\nCreate bin folder\nCreate the symlink in bin to the entry script, refer to cloudypm.yml\ncomposer require aklump\/live-dev-porter:@dev\n\n\n\n\n  \n\n\n\n  &laquo;Documenting CodeCloudyEvents (Hooks)&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:32 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"composer.html"},{"title":"Configuration","text":"Configuration\n  \n  \n\n\n\n\n  &laquo;Cloudy PackagesCloudyDevelopment Tools&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\nConfiguration files are YAML or JSON.  They are connected to your script in one, two, or three ways.\n\n\nThe main configuration file is required and is hardcoded in your script as $CONFIG.\nWithin that file, you may indicate additional configuration files using the key additional_config, which defines an array.  Be aware that these paths are relative to config_path_base, see below for more info.\nFinally, configuration files may be provided dynamically at run time listening to the event compile_config.\n\n\nIf configuration values conflict, those that came later will take prescendence; note: arrays will be merged.\n\n\n\nThe following examples will be shown with YAML.\n\nIn the header of your script you will find $CONFIG, this is for the base configuration file, e.g.,\n\n    CONFIG=script.example.yml\n\n\n\nSet it's value to the path of a supported file to use as configuration, absolute paths must begin with a forward slash, otherwise the path will be taken relative to the directory containing the script, i.e., $(dirname your_cloudy_script.sh)\nYou may add additional configuration files by adding something like following in the YAML of the base configuration file.  Notice the use of ~ to reference the user's home directory; this is a nice way to allow per-user configuration overrides.  Additional configuration files are optional and will only be included if they exist.\n\nadditional_config:\n  - _install.local.yml\n  - ~\/.my_project.yml\n\nThirdly, you may provide configuration paths at run-time:\n\nfunction on_compile_config() {\n    echo \"some\/other\/config.yml\"\n}\n\nYou may have any number of configuration files.\nConsider limited file permissions on your configuration files; e.g. chmod go-rwx.\n\n\n\n\nScalars\n\nTo get a configuration value you will use the get_config function.  The following example is the contents of an imaginary config.yml:\n\nperms:\n  user: aklump\n  group: apache\n  files: 640\n  directories: 750\n\n\nTo access the perms group scalar value do one of the following:\n\neval $(get_config \"perms.group\" \"staff\")\n# [ perms_group = 'apache' ]\n\n\n\nNotice the dot separation to denote parent\/child.\nThe second argument is a default value, e.g., staff.\n\n\nYou can also assign to a different variable like this:\n\neval $(get_config_as \"group\" \"perms.group\" \"staff\") \n# [ group = 'apache' ]\n\n\nArrays\n\nArrays are handled differntly depending upon a few things: if the config key points to a multi-dimensional array, an single-level associative array, or an single-level indexed array.  For examples turn to the following configuration YAML:\n\nuser:\n  images:\n    tags:\n    - nature\n    - space\n    - religion\n    types:\n    - jpg\n    - png\n\n\nLet's see what $(get_config -a 'user.images.tags') returns us:\n\nWhen the config key points to an array get_config echos a string ready for eval, which generates a nice set of BASH vars containing the values of perms, e.g.,\n\neval $(get_config perms)\necho $perms_user\necho $perms_group\necho $perms_files\necho $perms_directories\n\n\nHere's how to locate a value key.\n\neval $(get_config_keys_as 'keys' \"items\")\nfor key in \"${keys[@]}\"; do\n  eval $(get_config_as -a 'label' \"items.${key}.label\")\ndone\n\n\nNon-Scalars Keys\n\nIn a more complex configuration like the following, you might want to get the array keys, in this case all the \"operations\"; do so with get_config.  Our example will echo a string like this: declare -a config_keys=(\"help\" \"new\")\n\ncommands:\n  help:\n    help: Display this help screen\n  new:\n    help: Create new Cloudy script file in the current directory\n    options:\n      config:\n        help: Set the basename of the config file.\n      force:\n        aliases: [f]\n        help: Force the overwrite of an existin file.\n\n\nThis is a usage example:\n\neval $(get_config_keys \"commands\")\n\n${config_keys[0]} == \"_default\"\n${config_keys[1]} == \"help\"\n${config_keys[2]} == \"new\"\n\n\nFilepaths\n\nConfiguration values which are filepaths can be added to the YAML as relative paths:\n\nwebroot: ..\/web\npath_to_binaries: .\npublic_files: ..\/web\/sites\/default\/files\n\n\nThen when you access the configuration use get_config_path, e.g.,\n\neval $(get_config_path \"webroot\")\n\n\nThe value of $webroot will be an an absolute filepath.\n\nHow are relative filepaths made absolute?\n\n\nBy default $ROOT is used as the basepath, which is the directory that contains your Cloudy script.\nYou can alter this behavior by setting the configuration variable as config_path_base with a value, which is either an absolute path, or a relative path, relative to $ROOT.  Both of the following are valid values:\n\n# relative to $ROOT\nconfig_path_base: ..\/..\/..\n\n# or using an absolute path...\nconfig_path_base: \/Users\/aklump\/config\n\n\n\nPro Tip: Prefix Your Paths Array\n\nThis example shows how you can get your files array with dynamic prefixes when necessary.\n\nfunction _get_ignore_paths() {\n  local snippet=$(get_config_as -a 'ignore_paths' 'pantheon.files.ignore')\n  local find=']=\"'\n\n  echo \"${snippet\/\/$find\/$find$CONFIG_DIR\/fetch\/$ENV\/files\/}\"\n}\n\nfunction plugin_init() {\n    eval $(_get_ignore_paths)\n\n    for path in \"${ignore_paths[@]}\"; do\n      if [ ! -f \"$path\" ]; then\n        touch \"$path\"\n        succeed_because \"Created: $path\"\n      fi\n    done\n}\n\n\nPro Tip\n\nIf you put a stack of paths under a single key, like so:\n\nfiles:\n- webroot: ..\/web\n- bin: .\n- public: ..\/web\/sites\/default\/files\n\n\nYou can import all of them with one line like this:\n\neval $(get_config_path \"files\")\n\n\nAnd you will have access to:\n\n$files_webroot        \n$files_bin        \n$files_public\n\n\nIf the yaml is an indexed array like so:\n\nfiles:\n- ..\/web\n- .\n- ..\/web\/sites\/default\/files\n\n\nYou have one extra step of variable assignment.\n\neval $(get_config_path \"writeable_directories\")\nwriteable_directories=($_config_values[@]})    \n\n\n\n\nThe variable $CLOUDY_CONFIG_HAS_CHANGED will be set to true if the configuration was rebuilt on a given execution.  This happens the first time the script is executed after a cache clear.  Otherwise it's value will be false.  The variable is available as early as the boot event.\n\nUse this variable to rebuild configuration when necessary:\n\nif [[ \"$CLOUDY_CONFIG_HAS_CHANGED\" == true ]]; then\n  # TODO rebuild my dependent configuration.\nfi  \n\n\n\n\n  \n\n\n\n  &laquo;Cloudy PackagesCloudyDevelopment Tools&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:33 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"configuration.html"},{"title":"Cloudy Conventions","text":"Cloudy Conventions\n  \n  \n\n\n\n\n  &laquo;Cloudy ChangelogCloudyCloudy Packages&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nCloudy has some opinions about how to write code, this page reveals them.\n\n\n\n\nFunctions that begin with _cloudy should be considered private and never called by your script.  They may change in future versions.\nAll functions listed in cloudy.sh comprise the public API and will not change across minor version changes.\n\n\n\n\n\nFunction names should be readable and intuitive, e.g., exit_with_success is better than success_exit\nFunction names should start with a verb if applicable, unless they are grouped by category, e.g. array_join is fine because stack is the common group; join is the verb.\n\n\n\n\nEven though BASH doesn't distinguish between (bool) \"true\" and (string) \"true\", you should indicate your intention by not using quotes for boolean value.\n\nmy_var=true\nmy_var=false\n\n\nDo not do the following when your intention is boolean:\n\nmy_var=\"true\"\nmy_var=\"false\"\n\n\nLikewise to test for true do like this, which again, omits any quotes around true.\n\n[[ \"$my_var\" = true ]]\n\n\n\n\n\nFor getters when echoing a default value, return 2\n\n\nFunctions that operate on arrays\n\nWhen a function needs to manipulate an array, the array should be assigned to a global variable, the name of which is the function with __array added to the end, e.g.,\n\nfunction array_join() {\n    local glue=$1\n    local string\n    string=$(printf \"%s$glue\" \"${array_join__array[@]}\") &amp;&amp; string=${string%$glue} || return 1\n    echo $string\n    return 0\n}\n\n\nAnd here is the usage\n\narray_join__array=(\"${_config_values[@]}\")\nlocal options=\"-$(array_join \", -\"), --${option}\"    \n\n\nHowever, if a single function operates on more than one array, then the suffix should be modified as necessary.  Look at _cloudy_parse_option_arguments for a good example.  You still want the suffix to begin with two underscores.\n\nFunctions that return an array\n\nThe same naming conventions apply, if the function has to \"return\" an array, which, in BASH means it sets or mutates a global array.\n\nBeware of a scope issue for functions that use eval to set or mutate.  This first example does not work, because eval doesn't affect the value of a global variable, even if said variable was already defined outside of the function.  My understanding is that  eval creates local variables by definition when called within a function.\n\nfunction array_sort_by_item_length() {\n    local eval=$(\"$CLOUDY_PHP\" \"$CLOUDY_ROOT\/php\/helpers.php\" \"array_sort_by_item_length\" \"${array_sort_by_item_length__array[@]}\")\n\n    # note: [ $eval = 'declare -a array_sort_by_item_length__array=(\"on\" \"five\" \"three\" \"september\")' ]\n    # Notice the eval code aims to mutate $array_sort_by_item_length__array\n    # Even though $array_sort_by_item_length__array was already global, the eval doesn't not mutate the global value.\n\n    eval $eval\n    ...\n}\n\n\nHere is the fix to make it work:\n\nfunction array_sort_by_item_length() {\n    local eval=$(\"$CLOUDY_PHP\" \"$CLOUDY_ROOT\/php\/helpers.php\" \"array_sort_by_item_length\" \"${array_sort_by_item_length__array[@]}\")\n\n    eval $eval\n\n    # note: [ $eval = 'declare -a sorted=(\"on\" \"five\" \"three\" \"september\")' ]\n    # It's the following assignment here that makes it work.\n    array_sort_by_item_length__array=(\"${sorted[@]}\")\n\n    ...\n}    \n\n\nName your function arguments\n\nTo make your code more readible, the first line(s) of a function should name the function arguments.  Declare them as local.  Then follow with a blank space, after which you begin the process of the function.\n\nfunction get_config() {\n    local config_key_path=\"$1\"\n    local default_value=\"$2\"\n\n    # Now do the function stuff...\n\n\nNext, declare local variables just below that\n\nGroup all local variable names below arguments and declare them there rather than deeper in the function where they are used.  Even if no default values, declare them here anyway.\n\nfunction get_config() {\n    local config_key_path=$1\n    local default_value=\"$2\"\n\n    local name\n    local type=\"string\"\n\n    ...    \n\n\n\n\n  \n\n\n\n  &laquo;Cloudy ChangelogCloudyCloudy Packages&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:33 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"conventions.html"},{"title":"Development Tools","text":"Development Tools\n  \n  \n\n\n\n\n  &laquo;ConfigurationCloudyDocumenting Code&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\nThis function has nothing to do with step debugging, however it gives you a consistent means to see where something happened and what a value is at a given point in the code\n\nExample One\n\ndebug \"Stopping at this point;$0;$FUNCNAME;$LINENO\"\n\n\nThis will give you a nice output like this:\n\n\n\nOr if called from within a function:\n\nfunction my_function() {\n    debug \"Stopping at this point;$0;$FUNCNAME;$LINENO\"\n}\n\n\n\n\n\nEven if not calling within a function you may pass $FUNCNAME as shown in both cases, and it will simply be ignored if irrelevent.\n\n\nExample Two\n\nThis example shows how to create a label.  By separating your message and label with a single semi-colon, you will get this type of result.  Notice the $ is escaped as we want a literal dollar-sign in the label.\n\n debug \"$WDIR;\\$WDIR\"\n\n\n\n\nExample Three\n\nThis will just give you a quick message with default label:\n\ndebug \"Quick message\"\n\n\n\n\n\n\nSimilar to debug, yet it stops execution immediately with an exit code of 3.\n\nthrow \"Aborting at this point;$0;$FUNCNAME;$LINENO\"\n\n\n\n\n\n\n  \n\n\n\n  &laquo;ConfigurationCloudyDocumenting Code&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:33 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"development.html"},{"title":"Documenting Code","text":"Documenting Code\n  \n  \n\n\n\n\n  &laquo;Development ToolsCloudyEnabling Installation w\/Composer&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nCloudy scripts should include function documentation per TomDoc syntax.\n\nDocumentation can be extracted using tomdoc.sh\n\nHere is an example docblock.\n\n# Prompt for a Y or N confirmation.\n#\n# $1 - The confirmation message\n# --caution - Use when answering Y requires caution.\n# --danger - Use when answering Y is a dangerous thing.\n#\n# Returns 0 if the user answers Y; 1 if not.\nfunction confirm() {\n    local message=\"$1\"\n    ...\n\n\n\n\n  \n\n\n\n  &laquo;Development ToolsCloudyEnabling Installation w\/Composer&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:34 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"documenting.html"},{"title":"Exit Status","text":"Exit Status\n  \n  \n\n\n\n\n  &laquo;Events (Hooks)CloudyLocalization\/Translation&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nWhen you call exit_with_success and exit_with_success_elapsed the exit status is set to 0 and the script exits.  With the latter, the elapsed time is also printed.\n\nWhen you call exit_with_failure the exit status is set to 1 by default.  To change the exit status to something other than 1, then pass the --status={code} option, like the following, which will return a 2.  Valid exit codes are from 0-255. Learn more.\n\nexit_with_failure --status=2 \"Missing $ROOT\/_perms.local.sh.\"\n\n\nYou can use throw kind of like an exception.\n\n\n\n  \n\n\n\n  &laquo;Events (Hooks)CloudyLocalization\/Translation&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:34 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"error-handling.html"},{"title":"Events (Hooks)","text":"Events (Hooks)\n  \n  \n\n\n\n\n  &laquo;Enabling Installation w\/ComposerCloudyExit Status&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\nEvent handlers are functions that must be defined before the Cloudy bootstrap.\n\n#!\/usr\/bin\/env bash\n\n...\n\n#\n# Define all event handlers here.\n#\n\n# Begin Cloudy Bootstrap\ns=\"${BASH_SOURCE[0]}\";while ...\n\nTo see the available events recursively search codebase for event_dispatch \".\n\n\n\n\n\npre_config\ncompile_config\nboot\nclear_cache\n\n\n\n\nIf you define this function before the bootstrap it will be called once the minimum bootstrap has been called.  To see an example of this you can look to the tests path in cloudy_installer.sh.\n\n\n\nImagine a custom event like showing info.  Let's call the event show_info.  You Cloudy script will fire or trigger the event with a line like this:\n\nevent_dispatch \"show_info\" \"do\" \"re\" \"mi\"\nlocal trigger_result=$?\n\n\nHow might another script respond to this event?\n\nfunction on_show_info() {\n    local do=$1\n    local re=$2\n    local mi=$3\n\n    ...\n}\n\n\nListening for events\n\nYou can register custom callbacks using event_listen.  See below...\n\nUsing additional_bootstrap files\n\nIn some cases you will need to add your listeners in a custom bootstrap file which is registered in your configuration as additional_bootstrap.  They are sourced after all configuration has been loaded.  The contents of such file could look like this:\n\n#!\/usr\/bin\/env bash\n\nfunction here_we_go() {\n    debug \"$FUNCNAME;\\$FUNCNAME\"\n}\n\nevent_listen \"boot\" \"here_we_go\"\n\n\n\n\n  \n\n\n\n  &laquo;Enabling Installation w\/ComposerCloudyExit Status&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:34 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"events.html"},{"title":"Functions","text":"Functions\n  \n  \n\n\n\n\n  &laquo;Command AccessCloudySingle File Plugins Pattern&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\n\n  Notice the double quotes below \"$@\"  Without these any quoted arguments containing spaces will not be properly passed along.\n\n\nfunction env_on_import_db() {\n  call_plugin mysql import_db \"$@\"\n}\n\n\nOr shift the first argument and pass the rest:\n\nfunction remote_ssh_by_environment() {\n  local environment_id=\"$1\"\n\n  eval $(get_config_as env_auth \"environments.$environment_id.ssh\")\n  [[ \"$env_auth\" ]] || return 1\n  echo ssh -t -o BatchMode=yes \"$env_auth\" \"${@:2}\"\n}\n\n\n\n\nFollow this pattern for best results.\n\nfunction lorem_echo_color() {\n  local is_colorblind=\"$1\"\n\n  [[ \"$is_colorblind\" == true ]] &amp;&amp; echo \"Observer is colorblind.\" &amp;&amp; return 1\n  echo \"blue\" &amp;&amp; return 0\n}\n\n\nActing Only When a Variable Is Set\n\nif color=$(lorem_echo_color); then\n  echo \"The color has been set to: $color\"\nfi\n\n\nFailing When a Variable Cannot Be Set\n\nfunction parent_caller() {\n  local color\n  ! color=$(lorem_echo_color) &amp;&amp; fail_because \"$color\" &amp;&amp; return 1\n}\n\n# In this example `lorem_echo_color` is not being called from inside a parent function.\n! color=$(lorem_echo_color) &amp;&amp; fail_because \"$color\" &amp;&amp; exit_with_failure\n\n\nAssigning Default Values Instead of Failing\n\n# Use this pattern for an empty or default value\ncolor=$(lorem_echo_color) || color=''\ncolor=$(lorem_echo_color) || color='some default'\n\n\nPoints to take note of:\n\n\nDo not put fail_because inside of functions that echo their results. The message will get lost due due to the subshell aspect.\nInstead echo the message to be passed into fail_because by the caller.\nIn parent functions, do not use local on the same line as the color= assignment or this will cause the return 1 to be lost.\nSometimes you will want a default value rather than to process a failure, use the second example in that case.\n\n\n\n\n  \n\n\n\n  &laquo;Command AccessCloudySingle File Plugins Pattern&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:35 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"ex--functions.html"},{"title":"User Input and Menus","text":"User Input and Menus\n  \n  \n\n\n\n\n  &laquo;Single File Plugins PatternCloudyArrays&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\nwait_for_any_key\n\n\n\n\nprompt \"Export the database first?\" --caution\n\n\n\n\n\nIn this example $search can be user input, substring of a filename to look for.\nThe options will be relative paths\nThe filepath= assignment converts the selection to an absolute path.\n\n\nchoose__array=()\nfor i in *$search*.sql*; do\n  [[ -f \"$i\" ]] &amp;&amp; choose__array=(\"${choose__array[@]}\" \"$i\")\ndone\nfor i in \"${export_dir%\/}\"\/*$search*.sql*; do\n  [[ -f \"$i\" ]] &amp;&amp; choose__array=(\"${choose__array[@]}\" \"$(path_unresolve \"$PWD\" \"$i\")\")\ndone\n! shortpath=$(choose \"Choose a database export by number\") &amp;&amp; fail_because \"Cancelled.\" &amp;&amp; exit_with_failure\nfilepath=${PWD%\/}\/${shortpath#\/}\n\necho \"Your choice was: $filepath\"\n\n\n\n\n  \n\n\n\n  &laquo;Single File Plugins PatternCloudyArrays&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:35 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"ex--menus-input.html"},{"title":"Single File Plugins Pattern","text":"Single File Plugins Pattern\n  \n  \n\n\n\n\n  &laquo;FunctionsCloudyUser Input and Menus&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nHere is a pattern that can be used if you want to allow \"plugin\" type files, php or bash, to be used by your project:\n\nImplementing controller snippet:\n\ncall_plugin \"$CONFIG_DIR\/plugins\/$plugin\" || exit_with_failure\n\n\nFunction definition for call_plugin()\n\nfunction call_plugin() {\n  local plugin_path=\"$1\"\n\n  if [[ ! -f \"$plugin_path\" ]]; then\n    fail_because \"$plugin_path does not exist.\"\n    return 1\n  elif [[ \"$(path_extension \"$plugin_path\")\" == \"php\" ]]; then\n    # TODO It may be more appropriate to be explicite about the arguments.\n    plugin_output=$($CLOUDY_PHP  $@)\n  else\n    plugin_output=$(.  $@)\n  fi\n\n  if [[ $? -ne 0 ]]; then\n    [[ \"$plugin_output\" ]] &amp;&amp; fail_because \"$plugin_output\"\n    fail_because \"\\\"$plugin\\\" has failed.\"\n    return 1\n  fi\n\n  [[ \"$plugin_output\" ]] &amp;&amp; succeed_because \"$plugin_output\"\n  return 0\n}\n\n\nThe plugin, PHP version:\n\n&lt;?php\n$filepath = $argv[1];\n\n$contents = file_get_contents($filepath);\n\nif ('' == $contents) {\n  echo \"$filepath is an empty file.\";\n  exit(1);\n}\necho \"Contents approved in $filepath\";\n\n\n\n\n\nThe echo string should not contain any line breaks.\nThe plugin must exit with non-zero if it fails.\nWhen existing non-zero, a default failure message will always be displayed. If the plugin echos a message, this default will appear after the message.\nIf the plugin exists with a zero, there is no default message.\n\n\n\n\n  \n\n\n\n  &laquo;FunctionsCloudyUser Input and Menus&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:35 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"ex--plugins.html"},{"title":"Command Access","text":"Command Access\n  \n  \n\n\n\n\n  &laquo;Writing Your First Cloudy ScriptCloudyFunctions&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nThis describes a pattern for controlling command access.\n\nCreate a method such as this:\n\nfunction implement_route_access() {\n  command=$(get_command)\n  eval $(get_config_as 'allowed_routes' \"commands.$command.access_by_env\")\n  [[ \"\" == \"$allowed_routes\" ]] &amp;&amp; return 0\n\n  local csv\n  for i in \"${allowed_routes[@]}\"; do\n     [ \"$i\" == \"$LOCAL_ENV_ID\" ] &amp;&amp; return 0\n     eval $(get_config_as env_alias \"environments.$i.id\")\n     csv=\"$csv, \\\"$env_alias\\\"\"\n  done\n\n  fail_because \"\\\"$command\\\" can be used only in ${csv#, } environments.\"\n  fail_because \"Current environment is \\\"$LOCAL_ENV\\\".\"\n  exit_with_failure \"Command not allowed\"\n}\n\n\nAdd to your configuration, e.g.,\n\ncommands:\n  fetch:\n    access_by_env:\n      - dev\n      - staging\n    help: 'Fetch remote assets to local.'\n    ...\n\n\nCall the function before your command switch:\n\n...\nimplement_cloudy_basic\nimplement_route_access\n\n# Handle other commands.\ncommand=$(get_command)\ncase $command in\n...\n\n\n\n\n  \n\n\n\n  &laquo;Writing Your First Cloudy ScriptCloudyFunctions&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:36 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"ex--route-access.html"},{"title":"PHP and Cloudy","text":"PHP and Cloudy\n  \n  \n\n\n\n\n  &laquo;Logging to FileCloudyScript Version&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nCloudy makes heavy use of PHP and in so doing gets the PHP executable using command -v php. If this is insufficient you may provide the PHP executable in the environment variable CLOUDY_PHP.\n\nFrom that same article:\n\n\n  To create environment variables for your own use, add them to the bottom of your .bashrc file. If you want to have the environment variables available to remote sessions, such as SSH connections, you\u2019ll need to add them to your .bash_profile file, as well.\n\n\n\n\nAdd the following line to one or both of these files as appropriate to your case.\n\nexport CLOUDY_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.2.20\/bin\/php\"\n\n\n\n\nCoincidentally, if you tun the following, the test will actually fail, as it asserts that $CLOUDY_PHP is set to the default PHP binary, which it will not be in this case.\n\n export CLOUDY_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.2.20\/bin\/php\"; .\/cloudy_tools.sh tests\n\n\n\n\n\nAlways execute PHP with the following syntax--using $CLOUDY_PHP, never calling php directly:\n\n\noutput=$(\"$CLOUDY_PHP\" \"\/my\/php\/script\/foo.php\")\n\n\n\n\n\nAdd this line just after bootstrap in your app controller export CLOUDY_CONFIG_JSON (or wherever appropriate)\nDecode the environment variable in your PHP script, something like this: $config = json_decode(getenv('CLOUDY_CONFIG_JSON'), TRUE);\n\n\nScoping $CLOUDY_PHP to Only Your App\n\nIt may be desired in your cloudy-built app to expose a different variable other than $CLOUDY_PHP, e.g. $LOFT_DEPLOY_PHP. Here's how to do that with an event handler. In this case the Cloudy-built app is called \"Loft Deploy\".\n\nfunction on_pre_config() {\n  if [[ \"$LOFT_DEPLOY_PHP\" ]]; then\n    CLOUDY_PHP=\"$LOFT_DEPLOY_PHP\"\n  fi\n}\n\n\n\n\n  \n\n\n\n  &laquo;Logging to FileCloudyScript Version&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:36 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"handling-php-versions.html"},{"title":"The Initialize API","text":"The Initialize API\n  \n  \n\n\n\n\n  &laquo;Tables (Tabular Output)CloudyThe Script &quot;Command&quot;&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nIf you want you may hook into the Cloudy initialize api, which normalizes the work of initializing configuration files for an instance of your Cloudy Package.\n\n\nCreate a folder init\/ and place all files needed during initializeation.\nCreate a file init\/cloudypm.files_map.txt and define where the files go.  See below.\n\n\n\n\nThis is a text file that tells what files go where.  Basically two columns, separated by a space.  The first column lists filenames in init\/.  The second column are filenames (not directories) relative to $ROOT, or absolute.\n\nThe contents of the files map must have at least the following line; however column two dirname may be different.  The point is the asterix must be there.\n\n* ..\/..\/..\/bin\/config\/*\n\n\n\nThe * represents all filenames in init\/.\n\n\nBut let's say you want one of the files to go elsewhere.  The contents of cloudypm.files_map.txt might look like this:\n\n* ..\/..\/..\/bin\/config\/*\n_perms.custom.sh ..\/..\/..\/bin\/_perms.custom.sh\n\n\nIn this case * represents all files except for &#95;perms.custom.sh.  They are initializeed as before, however &#95;perms.custom.sh is initializeed at $ROOT\/..\/..\/..\/bin\/&#95;perms.custom.sh.\n\nRemember you must indicate filenames, not directories.  Also, you may rename the file by indicating a different filename in column two.\n\nFinally let's say you want to skip over a file completely; do not include a destination for it, and it will be ignored, like this\n\n* ..\/..\/..\/bin\/config\/*\n_perms.custom.sh ..\/..\/..\/bin\/_perms.custom.sh\nignored_file.txt\n\n\n\n\nIf you create init\/gitignore (no leading dot), it will be copied to ..\/..\/..\/opt\/.gitignore.  (This is the recommended location by Cloudy Package Manager.)  However, it will be merged with an existing .gitignore file, which already exists at that location.  Do not make an entry in cloudypm.files_map.txt.\n\n\n\n  \n\n\n\n  &laquo;Tables (Tabular Output)CloudyThe Script &quot;Command&quot;&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:36 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"installer.html"},{"title":"Localization\/Translation","text":"Localization\/Translation\n  \n  \n\n\n\n\n  &laquo;Exit StatusCloudyLogging to File&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nNote: this is not available until after the configuration has been bootstrapped.\n\n\n\nYou can translate or reword certain strings with this feature\n\ntranslate:\n  ids:\n  - Completed successfully.\n  - Failed.\n  strings:\n    en:\n    - Installation succeeded.\n    - Installation failed.\n\n\n\nThe ids are the strings that appear normally.\nTo begin a translation, copy the entire ids array as translate.strings.LANG and then alter the strings you mean to.  The value of LANG must be a two or three letter ISO 639 language code.\nThe indexes of the ids array must match with the translate.strings.LANG array.\n\n\n\n\nTo implement localization in a script, do like this:\n\n echo_title $(translate \"Welcome to your new script!\")\n\n\nThen add that to translate.ids:\n\ntranslate:\n  ids:\n  - Completed successfully.\n  - Failed. \n  - Welcome to your new script!    \n\n\n\n\n  \n\n\n\n  &laquo;Exit StatusCloudyLogging to File&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:37 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"localize.html"},{"title":"Logging to File","text":"Logging to File\n  \n  \n\n\n\n\n  &laquo;Localization\/TranslationCloudyPHP and Cloudy&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nThere is a file logging API built in to Cloudy.\n\n[Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_language\n[Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_translate_en_exit_with_success\n[Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_translate_en_exit_with_failure\n[Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_commands_coretest_options__keys\n[Tue Sep 11 18:16:24 PDT 2018] [debug] Using filesystem to obtain config: cloudy_config_commands__keys\n\n\nFirst you must declare the filename of the log file; this enables logging.  This is relative to your script's directory and should be placed at the top of your script before the bootstrap.\n\nLOGFILE=\"script.example.log\"\n\n# Begin Cloudy Bootstrap\ns=\"${BASH_SOURCE[0]}\";while ...\n\n\nThese functions should be self-explanatory; each one takes a single argument, which is the message.\n\nwrite_log_*\n\n\nTo log an error, e.g.,\n\nwrite_log_error \"Cannot load file $filepath\"    \n\n\nThe one that may require explanation is write_log, which takes one or two arguments.\n\nWhen using two arguments the first is an arbitrary log label, which appears in place of the standard log levels from above.  You can set this to anything and that will allow you to filter your log items by that key using whatever log reader you're using.  Using Console in OSX is my preference.\n\nwrite_log \"alpha\" \"Recording a value $value\"    \n\n\nYou may also call it like this:\n\nwrite_log \"No custom label\"\n\n\n\n\n  \n\n\n\n  &laquo;Localization\/TranslationCloudyPHP and Cloudy&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:37 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"logging.html"},{"title":"The Script &quot;Options&quot;","text":"The Script &quot;Options&quot;\n  \n  \n\n\n\n\n  &laquo;The Script &quot;Command&quot;CloudyThis script &quot;arguments&quot;&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nOptions are arguments passed to the script that begin with a single - or double -.  Here are some examples:\n\n    .\/script.example.sh -f -h -p\n    .\/script.example.sh -fhp\n    .\/script.example.sh --file=intro.txt --noup\n\n\n\nSingle hyphen options may only be one letter\nThey may be grouped or separate.\nOrder does not matter.\nDouble hypen options may provide values.\n\n\n\n\n  \n\n\n\n  &laquo;The Script &quot;Command&quot;CloudyThis script &quot;arguments&quot;&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:38 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"options.html"},{"title":"Cloudy Packages","text":"Cloudy Packages\n  \n  \n\n\n\n\n  &laquo;Cloudy ConventionsCloudyConfiguration&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nCloudy packages are modular scripts that are meant to share a single cloudy instance across all of them.  There is a defined directory structure that must be followed for this to work.\n\n\n\nname: aklump\/perms\nclone_from: https:\/\/github.com\/aklump\/website-perms\nentry_script: perms.sh\nentry_symlink: perms\non_install: init\non_update: update\n\n\n\nCreate a file, convention names it cloudypm.yml.\nThe name must follow vendor\/name format.\nThe schema of the file can be seen here.\nThe on_* are commands that will be fired at the end of that event.  They are optional.\nentry_symlink is optional and can be used to indicate a symlink value other than the filename of entry_script without extension.  In the above example entry_symlink is shown only for illustration.  The default value if it was omitted is perms.\n\n\n\n\n\nThe registry file is located here.\nAdd the vendor\/name and a link to cloudypm.yml or cloudypm.json for your package.  These must be separated by a single space, e.g.\n\naklump\/perms https:\/\/raw.githubusercontent.com\/aklump\/website-perms\/master\/cloudypm.yml?token=AAZ_CajHqKkAfvJNQT5WKrtqwcYZivzGks5btjkEwA%3D%3D\n\nYou do this by cloning and creating a pull request with your addition.\n\n\n\n\n  \n\n\n\n  &laquo;Cloudy ConventionsCloudyConfiguration&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:38 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"packages.html"},{"title":"Writing Your First Cloudy Script","text":"Writing Your First Cloudy Script\n  \n  \n\n\n\n\n  &laquo;CloudyCloudyCommand Access&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nLet's say you want to create a script called imagine.sh.\n\n\n\nTo understand how to define commands, let's look at the following example.  This is taken from the script's master configuration file.\n\ncommands:\n  mountain:\n    help: Indicate the the user wants to imagine a mountain setting.\n    aliases:\n      - mt\n    arguments:\n      mountain_name:\n        help: The name to give to the imagined item.\n        required: true\n    options:\n      peaks:\n        help: The numbe of peaks.\n        aliases:\n          - p\n        type: integer\n\n\nLet's break the above down into parts, but first take note that it is not enough merely to define your commands in configuration, you have to handle each command in imagine.sh as well, e.g.,\n\nif [[ \"$(get_command)\" == \"mountain\" ]]; then ...\n\n\n... or with a case statment, e.g.,\n\ncase $(get_command) in\n  \"mountain\")\n    ...\n  ;;   \n\n\nBack to the configuration...\n\nIndicate the command name\n\nThe most basic definition consists fo a command and a help topic:\n\ncommands:\n  mountain:\n    help: Install a Cloudy package from the Cloudy Package Registry.\n\n\nIf this was all that was defined in the configuration, users would only be able to enter:\n\n.\/imagine.sh mountain\n\n\nIndicate command aliases\n\nBy adding one or more command aliases, you give the user options, usually for brevity in typing.\n\ncommands:\n  mountain:\n    help: Indicate the the user wants to imagine a mountain setting.\n    aliases:\n      - mt\n\n\nWith this configuration the user can enter either of these two and get the same effect.\n\n.\/imagine.sh mountain\n.\/imagine.sh mt\n\n\nIndicate command arguments\n\nLet's say you want to collect a mountain name, you would indicate a command argument &lt;mountain_name&gt;.\n\ncommands:\n  mountain:\n    ...\n    arguments:\n      mountain_name:\n        help: The name to give to the imagined mountain.\n\n\nNow the user may enter any of the following, however the user who provides the mountain name will have a different response--presumably--than the one who omits it.\n\n.\/imagine.sh mountain\n.\/imagine.sh mt\n.\/imagine.sh mountain Everest\n.\/imagine.sh mt Everest\n\n\nMake an argument required\n\nBut what if the name is to be requried?\n\ncommands:\n  mountain:\n    ...\n    arguments:\n      mountain_name:\n        ...\n        required: true\n\n\nNow the user can no longer omit the &lt;mountain_name&gt; argument.\n\nIndicate command options\n\ncommands:\n  mountain:\n    ...\n    options:\n      peaks:\n        help: The numbe of peaks.\n        aliases:\n          - p\n        type: integer\n      yes:\n        help: Answer yes to all questions.\n        aliases:\n          - y\n        type: boolean\n\n\nThe user will now be entering any of the following:\n\n.\/imagine.sh mt \"Three Sisters\" --peaks=3            \n.\/imagine.sh mt \"Three Sisters\" -p=3            \n.\/imagine.sh mt \"Three Sisters\" --yes -p=3            \n.\/imagine.sh mt \"Three Sisters\" -y -p=3            \n\n\n\n\n  \n\n\n\n  &laquo;CloudyCloudyCommand Access&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:38 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"qs--writing-scripts.html"},{"title":"Search Results","text":"&laquo;Cloudy&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\n\n\n  \n\n\n\n  &laquo;Cloudy&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:39 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"search--results.html"},{"title":"Tables (Tabular Output)","text":"Tables (Tabular Output)\n  \n  \n\n\n\n\n  &laquo;Script VersionCloudyThe Initialize API&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nYou can easily create tables with Cloudy.\n\nThe following code:\n\necho_heading \"Tabular Data Example\"\ntable_set_header \"Word\" \"Part of Speech\"\ntable_add_row \"jump\" \"verb\"\ntable_add_row \"chocolaty\" \"adjective\"\ntable_add_row \"kitten cat\" \"noun noun\"\ntable_add_row \"quickly\" \"adverb\"\necho_table\n\n\nWill produce output like the following\n\n\n\n\n\nUse the options --lpad and --rpad to control the horizontal padding.\n\n    echo_heading \"Tabular Data Example\"\n    table_set_header \"Word\" \"Part of Speech\"\n    table_add_row \"jump\" \"verb\"\n    ...\n    echo_table --lpad=10 --rpad=10\n\n\n\n\n\n\n  \n\n\n\n  &laquo;Script VersionCloudyThe Initialize API&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:39 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"tables.html"},{"title":"Using a Temporary Directory","text":"Using a Temporary Directory\n  \n  \n\n\n\n\n  &laquo;Unit TestingCloudyYAML in BASH&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nIn some cases you may need to define the variable $TMPDIR to allow a script to work.  To do so enter something like the following to .bash_profile on your server.\n\nexport TMPDIR=\"\/home\/foo\/tmp\"\n\n\nhttps:\/\/www.cyberciti.biz\/tips\/shell-scripting-bash-how-to-create-empty-temporary-file-quickly.html\n\n\n\n  \n\n\n\n  &laquo;Unit TestingCloudyYAML in BASH&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:39 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"tempdir.html"},{"title":"Unit Testing","text":"Unit Testing\n  \n  \n\n\n\n\n  &laquo;This script &quot;arguments&quot;CloudyUsing a Temporary Directory&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nCloudy offers a simple unit testing framework based on PhpUnit.  To see how you might implement unit tests, refer to the following files\n\n\ncloudy_tools.sh and find how the command tests is handled in on_boot.\ntests\/cloudy.tests.sh to see how the tests themselves are written.\nframework\/cloudy\/inc\/cloudy.testing.sh for a list of assertions.\nIt is optional to add the command to your config.yml file.  It's not functionally necessary, but you might do it for documentation purposes.\nTo check if code is being run from inside a test you can use is_being_tested, e.g.:\n\nis_being_tested &amp;&amp; ...\n\n\n\n\n\nYou will want to implement the on_boot hook if you want to run tests.\n\n...\n# Uncomment this line to enable file logging.\nLOGFILE=\"install\/cloudy\/cache\/cloudy_installer.log\"\n\nfunction on_boot() {\n    [[ \"$(get_command)\" == \"tests\" ]] || return 0\n    source \"$CLOUDY_ROOT\/inc\/cloudy.testing.sh\"\n    do_tests_in \"cloudy_installer.tests.sh\"\n    do_tests_in --continue ...\n    do_tests_in --continue ...\n    exit_with_test_results\n}\n...\n\n\n\n\nYou may use the following as test fixtures, i.e., https:\/\/phpunit.readthedocs.io\/en\/7.3\/fixtures.html?highlight=setup\n\nsetup_before_test\nteardown_after_test\n\n\n\n\nA good example of how to setup unit tests for PHP classes can be found in aklump\/website_backup.\n\n\n\n  \n\n\n\n  &laquo;This script &quot;arguments&quot;CloudyUsing a Temporary Directory&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:40 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"testing.html"},{"title":"Script Version","text":"Script Version\n  \n  \n\n\n\n\n  &laquo;PHP and CloudyCloudyTables (Tabular Output)&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nTo provide a version for your script other than the default 1.0, you have two options.\n\n\n\nYou may hard-code the version in a YAML config file like this:\n\ntitle: Cloudy Installer\nversion: 1.5\n...\n\n\n\n\nIf you would rather provide your version dynamically with BASH, you can override the default get_version by adding it to your script file anytime after the bootstrap; this allows you to provide it via PHP, cat or whatever, e.g.,\n\n...\ndone;r=\"$(cd -P \"$(dirname \"$s\")\" &amp;&amp; pwd)\";source \"$r\/framework\/cloudy\/cloudy.sh\"\n# End Cloudy Bootstrap\n\nfunction get_version() {\n    local version=$(grep \"version = \" \"$ROOT\/web_package.info\")\n    echo ${version\/version = \/ }\n}\n\n\n\n\n  \n\n\n\n  &laquo;PHP and CloudyCloudyTables (Tabular Output)&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:40 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"version.html"},{"title":"YAML in BASH","text":"YAML in BASH\n  \n  \n\n\n\n\n  &laquo;Using a Temporary DirectoryCloudyIndex&raquo;\n\n  \n  \n    \n  \n\n\n  \n  Index\n\n\n\nThere are some helper functions to facilitate JSON and YAML data manipulation.  Here is some real-world code to illustrate this:\n\n# Begin a new YAML string.\nyaml_clear\n\n# Add a root-level value.\nyaml_add_line \"base_url: $base_url\"\n\n# Begin a new hash\/array.\nyaml_add_line \"results:\"\nfor path in \"${pages[@]}\"; do\n\n  # Notice the indent on this hash key.\n  yaml_add_line \"  \\\"$path\\\":\"\n  for (( i = 0; i &lt; 5; ++i )); do\n    time=$(curl -w '%{time_total}' -o \/dev\/null -s ${base_url%\/}\/${path%\/} -L)\n\n    # Add a hash element, notice the double indent.\n    yaml_add_line \"    - $time\"\n  done\ndone\n\n# Send the YAML off to be processed by PHP, but first convert it to JSON for\n# easier PHP consumption.  helpers.php will process the raw json and add\n# some values to it and echo augmented JSON string which we can then do\n# something with...\nprocessed_json=$(\"$CLOUDY_PHP\" \"$ROOT\/helpers.php\" \"$(yaml_get_json)\") || fail_because \"Could not process raw results.\"\n\n...\n\n\n\n\n  \n\n\n\n  &laquo;Using a Temporary DirectoryCloudyIndex&raquo;  \n  \n    Version: 1.4.10 &bull; Last Updated: Wed, 11 Jan 2023 18:08:40 -0800\n  \n\n\n\n  \n  \n  \n  \n    $(document).ready(function () {\n      $('#tipue_search_input').tipuesearch();\n    });","tags":"","url":"yaml.html"}]};
